#!/bin/bash
#
# ----------------------------------------------------------------------------------------------------
# Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
#
# Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
# that is described in this document. In particular, and without limitation, these intellectual property
# rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
# more additional patents or pending patent applications in the U.S. and in other countries.
#
# U.S. Government Rights - Commercial software. Government users are subject to the Sun
# Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
# supplements.
#
# Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
# registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
# are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
# U.S. and other countries.
#
# UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
# Company, Ltd.
# ----------------------------------------------------------------------------------------------------
#
# A launcher for Maxine executables and tools. This launch simplifies the task
# of running the Maxine VM and utilities by setting up the necessary class paths
# and executable paths. The only requirement is for the user to have set the
# environment variable JAVA_HOME to point to a JDK installation directory.
# The '-java_home' global option can be used instead.
#
# To add a new command, write a function named 'run_<command>' and
# define a variable named '<command>_help'. See the existing commands for examples.
# Once added, the command can be launched as follows:
#
#   max <command> <arguments>
#
# In addition, the command and it's description will be listed when this script
# is run without any arguments.
#
# It is possible to extend this script by sourcing it from a parent script. For
# example, if this script is at $MAXINE_HOME/bin/max, then the parent script
# needs to end with:
#
#    . "$MAXINE_HOME/bin/max" 
#
# One reason to extend this script is to build additional
# projects that depend on Maxine, e.g. for the Guest VM Xen port of Maxine.
# To do this set the following variables before invoking max:
#
#  extra_projects      an array of extra projects to build (see projects below for syntax)
#  extra_project_dir   the path to where the projects reside
# 
# It is also possible to override any of the commands in this script. For example, to
# override the 'image' command, define a function named 'run_image_override' in the
# parent script before sourcing this script. In this case, the 'run_image_override'
# function will be called instead of 'run_image' if the user specified the 'image' command.
#
# Author: Doug Simon, Mick Jordan

verbose=false
unknown_option=""
show_help=false
default_jvm_args="-d64 -ea -Xss2m -Xms1g -Xmx1g"
jvm_args="$default_jvm_args"
jvm_args_prefix=""
jvm_args_suffix=""
maxine_dir=""
make_arg=
while [ "${1:0:1}" = "-" ]; do
    case $1 in
        -v )
            verbose=true
            ;;
        -d )
            set -x
            ;;
        -h )
            show_help=true
            ;;
        -make )
            shift
            make_arg=$1
            ;;
        -java_home )
            shift
            JAVA_HOME=$1
            ;;
        -maxine )
            shift
            maxine_dir=$1
            ;;
        -jvm )
            shift
            jvm=$1
            ;;
        -J/p* )
            jvm_args_prefix="$jvm_args_prefix ${1/-J\/p/}"
            ;;
        -J/a* )
            jvm_args_suffix="$jvm_args_suffix ${1/-J\/a/}"
            ;;
        -J* )
            jvm_args=${1/-J/}
            ;;
        -junit4 )
            shift
            JUNIT4_CP=$1
            ;;
        * )
            unknown_option=$1
            break
            ;;
    esac
    shift
done
command=$1
shift
jvm_args="$jvm_args_prefix $jvm_args $jvm_args_suffix"
command_args=$@

# Ensure that the JAVA_HOME is set or guess at its location:
if [ -z "${JAVA_HOME}" ]; then
    if [ -d /usr/lib/jvm/java-6-sun ]; then
       export JAVA_HOME=/usr/lib/jvm/java-6-sun
    elif [ -d /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home ]; then
       export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home
    elif [ -d /usr/jdk/latest ]; then
       export JAVA_HOME=/usr/jdk/latest
    else 
       echo "JAVA_HOME must be set to a JDK 6 installation directory"
       exit 1;
    fi
fi

# Try to find the base directory of the Maxine code base by using the path of this script
if [ -z "${maxine_dir}" ]; then
    # Resolve location of this script
    me="${BASH_SOURCE[0]}"
    while [ -h "$me" ]; do
        me=`readlink -e "$me"`
    done
    pushd . >/dev/null
    cd `dirname "${me}"`
    cd ..
    maxine_dir=`pwd`
    popd >/dev/null
fi

# Sanity check: is ${maxine_dir}/bin/max an executable 
if [ ! -x "${maxine_dir}/bin/max" ]; then
    echo "Can't find Maxine code base at '${maxine_dir}': '${maxine_dir}/bin/max' does not exist or is not an executable"
    exit 1
fi

# Undefined optional variables are set to defaults
test -n "${jvm}" || jvm="${JAVA_HOME}/bin/java"
jvm_exe="$jvm $jvm_args"

# Ensure that a JDK 6 is being used
java_version="`$jvm -version 2>&1 | head -1 | cut -d '"' -f2`"
if [[ "$java_version" != 1.6* ]]; then
    echo "JAVA_HOME does not denote a JDK 6 installation: $java_version"
    exit 255
fi 

arch=""
if [ -z "${MAXINE_OS}" ]; then
    OS=`uname -s`
    case $OS in
        Darwin* )
            MAXINE_OS=darwin
            ;;
        Linux* )
            MAXINE_OS=linux
            ;;
        SunOS* )
            MAXINE_OS=solaris
            ;;
    esac
    if [ -z "${MAXINE_OS}" ]; then
        echo "Supported operating system could not be derived from $OS. Please set MAXINE_OS explicitly."
        exit 1
    fi
fi

# The set of projects whose sources are to be compiled. The order of this list must
# reflect any dependencies between the projects (i.e. if x depends on y, then y must
# precede x in the list).
projects=( \
    C1X:src               \
    Base:src,test,shell   \
    Assembler:src,test    \
    VM:src,test           \
    VMDI:src              \
    Tele:src              \
    JDWP:src              \
    TeleJDWP:src          \
    Inspector:src,test    \
)

if [ "$OS" != "Darwin" ]; then
    maxine_cp=${JAVA_HOME}/lib/tools.jar
fi

for project in ${projects[@]}; do
    project_dir=${project/:*/}
    maxine_cp=${maxine_cp}:${maxine_dir}/${project_dir}/bin
done

# create the augmented classpath for the extra projects
extra_cp=$maxine_cp
# add in any extra projects
for project in ${extra_projects[@]}; do
    project_dir=${project/:*/}
    extra_cp=${extra_cp}:${extra_projects_dir}/${project_dir}/bin
done

# now combine the two project lists for build purposes
projects=( ${projects[@]} ${extra_projects[@]} )

test -n "${JUNIT4_CP}" || { echo "Need to use '-junit4' option or JUNIT4_CP environment variable to specify a class path for Junit4 classes"; exit 1; }
junit_version="`$jvm -cp ${JUNIT4_CP} junit.runner.Version 2>&1`"
if [[ "$junit_version" != 4.* ]]; then
    echo "The value of JUNIT4_CP ($JUNIT4_CP) does not denote a JUnit4 installation."
    echo "Running \"$jvm -cp ${JUNIT4_CP} junit.runner.Version\" produced:"
    echo "$junit_version"
    exit 255
fi 
maxine_cp=${maxine_cp}:${JUNIT4_CP}

maxine_vm=${maxine_dir}/Native/generated/${MAXINE_OS}/maxvm

#=======================================
# Utility for verbose execution
#=======================================

function run() {
    if $verbose ; then
        echo "$@"
    fi
    "$@"
}

#=======================================
# Utility to ensure $make points to a
# GNU make executable
#=======================================

function config_gnu_make() {
    for a in $make_arg make gmake gnumake; do
        if ( sh -c "$a --version" 2>/dev/null | grep GNU >/dev/null ) ; then 
            make=$(type -p $a)
            break
        fi
    done
}

function check_gnu_make() {
    config_gnu_make
    if [ -z "$make" ]; then
        if [ -n "$make_arg" ]; then
            echo "$make_arg does not denote a GNU make executable"
        else
            echo "Could not find a GNU make executable on the current path."
            echo "Please fix the path or use the -make option."
        fi
    exit 1
    fi
}

#============================================================
# When building extra projects, this function sets the
# project_dir_parent variable and project_cp variable
# appropriately for the run_build function
#============================================================

function set_project_dir_parent() {
    for xproject in ${extra_projects[@]}; do
        if [[ "$xproject" == "$1" ]]; then
            project_dir_parent=$extra_projects_dir
            project_cp=$extra_cp
            return
        fi
    done
    project_dir_parent=$maxine_dir;
    project_cp=$maxine_cp
}

#=======================================
# 'build' command
#=======================================

build_usage="[options] projects..."
build_help="compile the Maxine Java and C sources, linking the latter

   Compile all or some of the Maxine source code using the appropriate compilers
   and linkers for the various source code types.
   
options:
 -clean         removes existing binaries and class files before building projects
 -javac <path>  path to a Java source compiler (default: ${JAVA_HOME}/bin/javac)
 
If no projects are given, then all projects are built."

function run_build() {
    javac=${JAVA_HOME}/bin/javac
    native_only=false
    exit_after_help=false
    clean=false
    projects_to_build=""
    while [ "$1" != "" ]; do
        case $1 in
            -javac )
                shift
                javac=$1
                ;;
            -clean )
                clean=true
                ;;
            -* )
                echo "unknown build option '$1'"
                run_help build
                exit 1
                ;;
            * )
                projects_to_build="$projects_to_build $1"
                ;;
        esac
        shift
    done
    
    if [ -z "$projects_to_build" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_build="$projects_to_build $project_dir"
        done
        projects_to_build="Native $projects_to_build"
    fi
    
    # Compile C sources
    if [[ "$projects_to_build" == *Native* ]]; then
        echo "Compiling C sources in ${maxine_dir}/Native..."
  
        check_gnu_make      
        
        pushd . >/dev/null
        cd ${maxine_dir}/Native;
        if $clean ; then
           run $make clean
        fi
        run $make;
        result=$?
        popd >/dev/null
        if [ $result -ne 0 ]; then
            exit $result
        fi
    fi
        
    # Compile Java sources
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        project_build_match=0
        for project_to_build in ${projects_to_build[@]}; do
            if [[ "$project_to_build" == ${project_dir} ]]; then
                project_build_match=1
            fi
        done
        if [ $project_build_match -eq 0 ] ; then
            continue
        fi
        set_project_dir_parent ${project}
        if $clean ; then
            run rm -rf ${project_dir_parent}/${project_dir}/bin
        fi
        run mkdir -p ${project_dir_parent}/${project_dir}/bin

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }        
        for source_dir in ${source_dirs} ; do
            pushd . >/dev/null
            cd ${project_dir_parent}/${project_dir}/${source_dir}
            javac_input=/tmp/javacfiles.txt.$$
            find . -name *.java | grep -v 'package-info.java' >$javac_input
	        echo "Compiling Java sources in ${project_dir_parent}/${project_dir}/${source_dir}..."
                run ${javac} -source 1.6 -g -J-Xmx1g -classpath ${project_cp} -d ../bin @$javac_input 2>&1 | \
                   awk ' BEGIN                    { s=0; c=-1}
                         /is Sun proprietary API/ { s++; c=2; }
                                                  { if (c-- >= 0) next; print; }
                         END                      { if (s > 0) print "Suppressed " s " warnings about use of Sun implementation classes" }'
            
            result=${PIPESTATUS[0]}
            if [ $result -eq 0 ]; then
                # Copying non Java source files from 'src' to 'bin'
                for file in `find . -type f | grep -v '.java$'`; do
                    if [ -d ../bin/$(dirname $file) ]; then
                       run cp $file ../bin/$file
                    fi
                done
            fi
            rm $javac_input
            popd >/dev/null
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

#=======================================
# 'check' command
#=======================================

check_usage="[options] projects..."
check_help="run Checkstyle on the Maxine Java sources

   Run Checkstyle over the Java sources. Any errors or warnings
   produced by Checkstyle result in a non-zero exit code.
   
options:
 -cs <path>   path to a Checkstyle jar file. (default: value of CHECKSTYLE_JAR environment variable)
 
If no projects are given, then all Java projects are checked."

function run_check() {
    projects_to_check=""
    while [ "$1" != "" ]; do
        case $1 in
            -cs )
                shift
                CHECKSTYLE_JAR=$1
                ;;
            -* )
                echo "unknown build option '$1'"
                run_help check
                exit 1
                ;;
            * )
                projects_to_check="$projects_to_check $1"
                ;;
        esac
        shift
    done
    
    if [ -z "$CHECKSTYLE_JAR" ]; then
        if [ -f /proj/maxwell/bin/checkstyle-4.jar ]; then
            CHECKSTYLE_JAR=/proj/maxwell/bin/checkstyle-4.jar
        else
            echo "Need to use '-cs' option or CHECKSTYLE_JAR environment variable to specify location of Checkstyle jar file"
            exit 1
        fi
    fi

    if [ ! -f "$CHECKSTYLE_JAR" ]; then
        echo "No such file: $CHECKSTYLE_JAR"
        exit 1
    fi
    
    if [ -z "$projects_to_check" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_check="$projects_to_check $project_dir"
        done
    fi

    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        project_found=0
        for project_to_build in ${projects_to_check[@]}; do
            if [[ "$project_to_build" == ${project_dir} ]]; then
                project_found=1
            fi
        done
        if [ $project_found -eq 0 ] ; then
            continue
        fi
        set_project_dir_parent ${project}

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }        
        for source_dir in ${source_dirs} ; do
            pushd . >/dev/null
            cd ${project_dir_parent}/${project_dir}/${source_dir}
            javac_input=/tmp/javacfiles.txt.$$
            find . -name *.java | grep -v 'package-info.java' >$javac_input

            if [ -f $maxine_dir/$project_dir/.checkstyle ]; then
                checks_file=$(grep 'location=' < $maxine_dir/$project_dir/.checkstyle | sed 's:.*location="\([^"]*\)".*:\1:g')
                if [[ "$checks_file" = /* ]]; then
                    checks_file=${checks_file/#\//$maxine_dir/}
                else
                    checks_file="$maxine_dir/$project_dir/$checks_file"
                fi
            
                echo "Running Checkstyle on $project_dir/$source_dir using $checks_file..."
                checkstyle_out=/tmp/audit.$$
                checkstyle_input=/tmp/checkfiles.txt.$$

                cat $javac_input | \
                    grep -v 'test/bytecode/' |\
                    grep -v 'test/except/' |\
                    grep -v 'test/interactive/' |\
                    grep -v 'test/jdk/' |\
                    grep -v 'test/lang/' |\
                    grep -v 'test/micro/' |\
                    grep -v 'test/optimize/' |\
                    grep -v 'test/reflect/' |\
                    grep -v 'test/threads/' >$checkstyle_input
                
                run $jvm -Xmx1g -jar $CHECKSTYLE_JAR -c $checks_file $(cat $checkstyle_input) -o $checkstyle_out
                result=$?
                rm $checkstyle_input
                if [ $result -eq 0 ]; then
                    if [ "X$(grep 'warning:' <$checkstyle_out)" != "X" ]; then
                        cat $checkstyle_out
                        result=1
                    fi
                else
                    cat $checkstyle_out
                fi
                rm $checkstyle_out
            fi
            rm $javac_input
            popd >/dev/null
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

#=======================================
# 'javadoc' command
#=======================================

javadoc_usage="[options]"
javadoc_help="run javadoc over the Maxine Java source files

   Run javadoc over the Maxine Java source code and place the generated
   HTML in $maxine_dir/javadoc.
   
options:
 -clean     removes existing generated javadoc first
 <any other javadoc option>
    
    Use \"max image -help\" to see what other options this command accepts."

function run_javadoc() {
    javadoc=${JAVA_HOME}/bin/javadoc
    clean=false
    extra_javadoc_options=""
    while [ "$1" != "" ]; do
        case $1 in
            -clean )
                clean=true
                ;;
            * )
                extra_javadoc_options="$extra_javadoc_options $1"
                ;;
        esac
        shift
    done
    
    javadoc_output_dir=${maxine_dir}/javadoc
    if $clean ; then
        run rm -rf $javadoc_output_dir
    fi
    run mkdir -p $javadoc_output_dir

    source_path=""
    package_list=/tmp/packages.txt.$$
    cat /dev/null > $package_list
    
    for project in ${projects[@]}; do
        project_dir=${project/:*/}

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }
        for source_dir in ${source_dirs} ; do
            abs_source_dir=${maxine_dir}/${project_dir}/${source_dir}
            if [ -z "$source_path" ]; then
                source_path=$abs_source_dir
            else
                source_path="$source_path:$abs_source_dir"
            fi
            find $abs_source_dir -name package-info.java | sed 's:'$abs_source_dir'/\(.*\)/package-info.java:\1:g' | tr '/' '.' >>$package_list
        done
    done
            
    echo "Running javadoc over Java sources..."
    run ${javadoc} -quiet -source 1.6 -J-Xmx1g \
        -classpath ${maxine_cp} \
        -sourcepath $source_path \
        -d $javadoc_output_dir \
        -link http://java.sun.com/javase/6/docs/api \
         $extra_javadoc_options $(<$package_list)
    result=$?
    rm $package_list
    if [ $result -ne 0 ]; then
        exit $result
    fi
}

#=======================================
# 'image' command
#=======================================

image_configs=( \
    java:-run=java \
    optopt:-run=test.com.sun.max.vm.testrun.all,-native-tests \
    optjit:-run=test.com.sun.max.vm.testrun.all,-native-tests,-test-callee-jit \
    jitopt:-run=test.com.sun.max.vm.testrun.all,-native-tests,-test-caller-jit \
    jitjit:-run=test.com.sun.max.vm.testrun.all,-native-tests,-test-caller-jit,-test-callee-jit \
)

image_usage="[options]"
image_help="build a boot image

    Run the BinaryImageGenerator to build a Maxine boot image.
    
    An option starting with '@' denotes a preconfigured set of
    options. The available preconfigured option sets are:  
"
    
image_help=$(printf "%s\n    %-15s %s\n " "$image_help" "Configuration" "Expansion")
for image_config in ${image_configs[@]}; do
    image_config_args="${image_config/*:/}"
    image_help=$(printf "%s\n    @%-15s %s" "$image_help" "${image_config/:*/}" "${image_config_args//,/ }")
done

image_help="$image_help
    
    An option starting with '--' is interpreted as a VM option of the same name
    after the leading '-' is removed. Note that not all VM options have an
    effect during image building. For example, to use the '-verbose:class' VM option
    to trace class loading while image building, specify '--verbose:class'.
    
    Use \"max image -help\" to see what other options this command accepts."
    
function run_image() {

    vm_args=""
    image_args=""
    while [ "$1" != "" ]; do
        case $1 in
            @*)
                image_config_arg=${1/@/}
                image_config_found=false
                for image_config in ${image_configs[@]}; do
                    image_config_name=${image_config/:*/}
                    if [ "$image_config_name" = "$image_config_arg" ]; then
                        image_config_args="${image_config/*:/}"
                        image_args="$image_args ${image_config_args//,/ }"
                        image_config_found=true
                        break
                    fi
                done
                if ! $image_config_found ; then
                    echo "Invalid image configuration: $1"
                    run_help image
                    exit 1
                fi
                ;;
            --* )
                if [ -z "$vm_args" ]; then
                    vm_args="${1/-/}"
                else
                    vm_args="$vm_args ${1/-/}"
                fi
                ;;
            *)
                image_args="$image_args $1"
                ;;
        esac
        shift
    done    

    if [ -z "$vm_args" ]; then
        run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageGenerator -trace=1 -run=java $image_args
    else
        run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageGenerator -trace=1 -run=java $image_args -vmargs="$vm_args"
    fi
}

#=======================================
# 'compile' command
#=======================================

compile_usage="[options] compilation_specs..."
compile_help="compile a list of classes and/or methods using the VM's compiler

    A compilation spec is a class name pattern followed by an optional method name
    pattern separated by a ':'. For example:

        Object:wait String

    will compile all methods in a class whose name contains "Object" where the
    method name contains "wait" as well as all methods in a class whose name
    contains "String". The classes searched are those on the class path.
    
    The compilation phases are traced and the resulting machine code is disassembled.
    
    The output traced by this command is not guaranteed to be the same as the output
    for a compilation done at runtime. The code produced by a compiler is very sensitive
    to the compilation context such as what classes have been resolved etc.
    
    Use \"max compile -help\" to see what other options this command accepts."

function run_compile() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.compiler.CompilerRunner $@
}

#=======================================
# 'c1x' command
#=======================================

c1x_usage="[options] compilation_specs..."
c1x_help="process a list of classes and/or methods with the C1X compiler

    A compilation spec is a class name pattern followed by an optional method name
    pattern separated by a ':'. For example:

        Object:wait String

    will compile all methods in a class whose name matches "Object" where the
    method name matches "wait" as well as all methods in a class whose name
    contains "String". The classes searched are those on the class path.
    
    The type of matching performed for a given class/method name is determined
    by the position of '^' in the pattern name as follows:
    
    Position of '^'   | Match algorithm
    ------------------+------------------
    start AND end     | Equality
    start             | Prefix
    end               | Suffix
    absent            | Substring
    
    For example, '^java.util:^toString^' matches all methods named 'toString' in
    any class whose name start with 'java.util'.
    
    The output traced by this command is not guaranteed to be the same as the output
    for a compilation done at runtime. The code produced by a compiler is sensitive
    to the compilation context such as what classes have been resolved etc.
    
    Use \"max c1x -help\" to see what other options this command accepts."

function run_c1x() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.compiler.c1x.C1XTest $@
}

#=======================================
# 'vm' command
#=======================================

vm_usage="[options] [class | -jar jarfile]  [args...]"
vm_help="launch the Maxine VM

    Run the Maxine VM with the given options and arguments.
    
    Use \"max vm -help\" to see what other options this command accepts."

function run_vm() {
    run ${maxine_vm} $MAXVM_OPTIONS $@
}

#=======================================
# 'javap' command
#=======================================

javap_usage="[options] classes..."
javap_help="launch javap with a -classpath option denoting all the Maxine classes

    Run the JDK javap class file disassembler with the following prepended options:
    
        -private -verbose -classpath <path to Maxine classes>
    
    Use \"max javap -help\" to see what other options this command accepts."

function run_javap() {
    run ${JAVA_HOME}/bin/javap -private -verbose -classpath ${maxine_cp}:${JCK_CLASSPATH} "$@"
}

#=======================================
# 'dis' command
#=======================================

dis_usage="[options] classes..."
dis_help="preprocess class files with the Maxine VM and disassembles the result with javap

    Run Maxine in boot image building mode to load one or more classes (which performs
    preprocessing of the bytecode in the classes for implementing JNI stubs, exception
    dispatchers and sychronized methods, etc), writes the classes back to valid Java
    class files and feeds them into javap.
    
    This is an easy way to see how Maxine implements certain VM features via bytecode
    preprocessing or generation.

    Use \"max dis -help\" to see what other options this command accepts."
    
function run_dis() {
    TMP_DIR=/tmp/${USER}/generated.$$
    run mkdir -p ${TMP_DIR}
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.classfile.ClassfileWriter -d=${TMP_DIR} -javap "$@"
    run rm -rf ${TMP_DIR}
}

#=======================================
# 'inspect' command
#=======================================

inspect_usage="[options] [class | -jar jarfile]  [args...]"
inspect_help="launch a given program under the Inspector

    Run the Maxine VM under the Inspector. The arguments accepted by this command
    are those accepted by the 'max vm' command plus the Inspector specific
    options. To debug a program in the Inspector, simply replace 'vm' on the
    command line that launches the program with 'inspect'.
    
    Use \"max inspect --help\" to see what the Inspector options are. These options
    must be specified with a '--' prefix so that they can be distinguished from
    the VM options.
    
    Use \"max vm -help\" to see what the VM options are."

function run_inspect() {

    vm_args=""
    inspector_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -XX:LogFile=*)
                MAXINE_LOG_FILE=${1/*=/}
                TELE_LOG_FILE=tele-${1/*=/}
                if $verbose ; then
                       echo "MAXINE_LOG_FILE=$MAXINE_LOG_FILE"
                       echo "TELE_LOG_FILE=$TELE_LOG_FILE"
                   fi
                export MAXINE_LOG_FILE
                export TELE_LOG_FILE
                ;;
            -cp | -classpath )
                vm_args="$vm_args $1"
                shift
                vm_args="$vm_args $1"
                inspector_args="$inspector_args -cp=$1"
                ;;
            --* )
                inspector_args="$inspector_args ${1/-/}"
                ;;
            *)
                vm_args="$vm_args $1"
                ;;
        esac
        shift
    done    

    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.ins.MaxineInspector -d -trace=1 ${inspector_args} -a="$vm_args"
}

#=======================================
# 'jtest' command
#=======================================

jtest_help="run the Java Tester"

function run_jtest() {
    vm_args=""
    jtester_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -- )
                shift
                jtester_args="$@"
                break
                ;;
            -h )
                echo "Usage: jtest <VM options> -- <Java Tester options>"
                echo "where Java Tester options include:"
                run ${maxine_vm} -classpath ${maxine_dir}/Base/bin:${maxine_dir}/VM/bin test.com.sun.max.vm.compiler.JavaTester -help
                return
                ;;
            * )
                vm_args="$vmargs $1"
                ;;
        esac
        shift
    done
    run ${maxine_vm} -classpath ${maxine_dir}/Base/bin:${maxine_dir}/VM/bin $vm_args test.com.sun.max.vm.compiler.JavaTester $jtester_args
}

#=======================================
# 'helloworld' command
#=======================================

helloworld_help="run a basic 'hello world' program on the Maxine VM"

function run_helloworld() {
    run ${maxine_vm} -classpath ${maxine_dir}/VM/bin "$@" test.output.HelloWorld
}

#=======================================
# 'objecttree' command
#=======================================

objecttree_usage="[options]"
objecttree_help="print the causality spanning-tree of the object graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given object is in the image. This is useful when trying to reduce
    the size of the image.

    Use \"max objecttree -help\" to see what other options this command accepts."
    
function run_objecttree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageObjectTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.object.tree "$@"
}

#=======================================
# 'methodtree' command
#=======================================

methodtree_usage="[options]"
methodtree_help="print the causality spanning-tree of the method graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given method is (or isn't) in the image. This is useful when
    trying to reduce the size of the image.

    Use \"max methodtree -help\" to see what other options this command accepts."

function run_methodtree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageMethodTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.method.tree "$@"
}

#=======================================
# 'test' command
#=======================================

test_usage="[options]"
test_help="run some or all of the Maxine tests

    The Maxine sources include a variety of tests that can be run by a
    special launcher. These include JUnit tests, VM micro tests, certain
    benchmark suites and output comparison tests, amongst others. 
    
    Use \"max test -help\" to see what other options this command accepts."

function run_test() {
    rm -rf maxine-tester
    mkdir maxine-tester
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -output-dir=maxine-tester\
        -java-executable="${jvm}" "-java-vm-args=${jvm_args}" "$@" 2>&1 | tee maxine-tester/console
    result=${PIPESTATUS[0]}
    logs=test-logs.zip
    zip -q -r $logs maxine-tester/console `find maxine-tester | egrep '(.stdout|.stderr|.passed|.failed|.command)'`
    echo "Test log files are in $logs"
    exit $result
}

#=======================================
# 'gate' command
#=======================================

gate_usage="[options]"
gate_presets="-java-config-alias=optopt -fail-fast"
gate_help="run the tests used to validate a push to the stable Maxine repository

    If this commands exits with a 0 exit code, then the source code is in
    a state that would be accepted for integration into the main repository.
    
    This is simply a wrapper for invoking the \"max test\" command with the following
    preset options:
    
        ${gate_presets}

    Use \"max gate -help\" to see what other options this command accepts."

function run_gate() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -java-executable="${jvm}" "-java-vm-args=${jvm_args}" ${gate_presets} "$@"
}

#=======================================
# 'xref' command
#=======================================

xref_usage="[options]"
xref_help="run Sorcerer to produce a HTML cross-reference of the Java source files

    Run Sorcerer (https://sorcerer.dev.java.net/) to produce a HTML cross-reference of
    the Java source files. The cross reference is written to the following directory:
    
        $maxine_dir/xref
    
options:
 -exe       path to the Sorcerer executable (default: sorcerer)
 -htm       modify generated files to use an '.htm' extension instead of '.html'"
    
function run_xref() {
    projects_to_xref=""
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        projects_to_xref="$projects_to_xref $maxine_dir/$project_dir"
    done
    sorcerer="sorcerer"
    htm=false
    while [ "$1" != "" ]; do
        case $1 in
            -exe )
                shift
                sorcerer=$1
                ;;
            -htm )
                htm=true
                ;;
            * )
                echo "unknown option '$1'"
                run_help xref
                exit 1
                ;;
        esac
        shift
    done
    run $sorcerer -cp $JUNIT4_CP -d $maxine_dir/xref -auto $projects_to_xref 2>&1 |\
        grep -v 'is Sun proprietary API'

    if $htm ; then
        for html in $maxine_dir/xref/*.html; do
            cat $html | \
                sed 's:\(src="[^"]*\).html":\1.htm":g' | \
                sed 's:source-view.html:source-view.htm:g' > $maxine_dir/xref/$(basename $html .html).htm
        done
    fi    
}

#=======================================
# 'help' command
#=======================================

help_usage="[command]"
help_help="show help for a given command

    With no arguments, print a list of commands and short help for each command.

    Given a command name, print help for that command."

function run_help() {
    if [ $# -eq 0 ]; then
        usage
    else
        command="$1"
        
        run_command="run_${command}"
        command_type=`type -t ${run_command}`
        if [ "${command_type}" != "function" ]; then
            usage "max: unknown command '${command}'"
            exit 255
        fi
        
        usage_var="${command}_usage"
        usage=${!usage_var}
        
        help_var="${command}_help"
        help=${!help_var}
        if [ -z "$help" ]; then
            help="[no description available]"
        fi
        printf "max %s %s\n\n%s\n" "$command" "$usage" "$help"
    fi
}

#=======================================
# Main launcher
#=======================================

function usage() {
    if [ -n "$1" ]; then
        echo $1
    fi
    echo "Maxine Launcher"
    echo
    echo "available commands:"
    for run_command in `declare -Ff | grep 'run_' | grep -v '_override' | cut -d ' ' -f 3 | sort`; do
        command=${run_command/run_/}
        help=""
        help_var="${command}_help"
        help=${!help_var}
        if [ -z "$help" ]; then
            help="[no description available]"
        fi
        printf " %-16s %s\n" "$command" "$help" | head -n 1
    done
    config_gnu_make
    echo
    echo "global options:"
    echo " -v               enable verbose output "
    echo " -d               enable debug output"
    echo " -h               show launcher help"
    echo " -java_home <path> specifies JDK installation directory (must be JDK 6 or later)"
    echo "                    (default: value of the JAVA_HOME environment variable)"
    echo " -jvm <path>      specifies Java VM executable (default: bin/java under JAVA_HOME)"
    echo " -J<args>         specifies Java VM arguments (default: ${default_jvm_args})"
    echo " -J/p<args>       prefix Java VM arguments"
    echo " -J/a<args>       suffix Java VM arguments"
    echo " -maxine <path>   specifies base directory of the Maxine code base"
    echo "                    (default: ${maxine_dir})"
    echo " -junit4 <cp>     class path for Junit 4 classes (default: value of JUNIT4_CP environment variable)"
    echo " -make <path>     path to GNU make executable (default: $make)"
}

if [ -n "${unknown_option}" ]; then
    usage "max: unknown global option '${unknown_option}'"
    exit 255
fi

if $show_help ; then
    usage ""
    exit 0
fi

if [ -z "${command}" ]; then
    usage ""
    exit 0
fi

run_command="run_${command}"
shift


command_type=`type -t ${run_command}`
if [ "${command_type}" != "function" ]; then
    usage "max: unknown command '${command}'"
    exit 255
fi
    
# Check for override
run_command_override="run_${command}_override"
command_override_type=`type -t ${run_command_override}`
if [ "${command_override_type}" == "function" ]; then
    $run_command_override $command_args
else
    $run_command $command_args
fi
