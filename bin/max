#!/bin/bash
#
# A launcher for Maxine executables and tools. This launch simplifies the task
# of running the Maxine VM and utilities by setting up the necessary class paths
# and executable paths. The only requirement is for the user to have set the
# environment variable JAVA_HOME to point to a JDK installation directory.
# The '-java_home' global option can be used instead.
#
# To add a new command, write a function named 'run_<command>' and
# define a variable named '<command>_help'. See the existing commands for examples.
# Once added, the command can be launched as follows:
#
#   max <command> <arguments>
#
# In addition, the command and it's description will be listed when this script
# is run without any arguments.
#
# Author: Doug Simon

verbose=false
unknown_option=""
show_help=false
default_jvm_args="-d64 -ea -Xss2m -Xms1g -Xmx2g"
jvm_args="$default_jvm_args"
jvm_args_prefix=""
jvm_args_suffix=""
maxine_dir=""
make_arg=
while [ "${1:0:1}" = "-" ]; do
    case $1 in
        -v )
            verbose=true
            ;;
        -d )
            set -x
            ;;
        -h )
            show_help=true
            ;;
        -make )
            shift
            make_arg=$1
            ;;
        -java_home )
            shift
            JAVA_HOME=$1
            ;;
        -maxine )
            shift
            maxine_dir=$1
            ;;
        -jvm )
            shift
            jvm=$1
            ;;
        -J/p* )
            jvm_args_prefix="$jvm_args_prefix ${1/-J\/p/}"
            ;;
        -J/a* )
            jvm_args_suffix="$jvm_args_suffix ${1/-J\/a/}"
            ;;
        -J* )
            jvm_args=${1/-J/}
            ;;
        -junit4 )
            shift
            JUNIT4_CP=$1
            ;;
        * )
            unknown_option=$1
            break
            ;;
    esac
    shift
done
command=$1
shift
jvm_args="$jvm_args_prefix $jvm_args $jvm_args_suffix"
command_args=$@

# Ensure that the non-optional variables are set
test -n "${JAVA_HOME}" || { echo "JAVA_HOME must be set to a JDK 6 installation directory"; exit 1; }

# Try to find the base directory of the Maxine code base by using the path of this script
if [ -z "${maxine_dir}" ]; then
    # Resolve location of this script
    me="${BASH_SOURCE[0]}"
    while [ -h "$me" ]; do
        me=`readlink -e "$me"`
    done
    pushd . >/dev/null
    cd `dirname "${me}"`
    cd ..
    maxine_dir=`pwd`
    popd >/dev/null
fi

# Sanity check: is ${maxine_dir}/bin/max an executable 
if [ ! -x "${maxine_dir}/bin/max" ]; then
    echo "Can't find Maxine code base at '${maxine_dir}': '${maxine_dir}/bin/max' does not exist or is not an executable"
    exit 1
fi

# Undefined optional variables are set to defaults
test -n "${jvm}" || jvm="${JAVA_HOME}/bin/java"
jvm_exe="$jvm $jvm_args"

# Ensure that a JDK 6 is being used
java_version="`$jvm -version 2>&1 | head -1 | cut -d '"' -f2`"
if [[ "$java_version" != 1.6* ]]; then
    echo "JAVA_HOME does not denote a JDK 6 installation: $java_version"
    exit 255
fi 

arch=""
if [ -z "${MAXINE_OS}" ]; then
    OS=`uname -s`
    case $OS in
        Darwin* )
            MAXINE_OS=darwin
            ;;
        Linux* )
            MAXINE_OS=linux
            ;;
        SunOS* )
            MAXINE_OS=solaris
            ;;
    esac
    if [ -z "${MAXINE_OS}" ]; then
        echo "Supported operating system could not be derived from $OS. Please set MAXINE_OS explicitly."
        exit 1
    fi
fi

# The set of projects whose sources are to be compiled. The order of this list must
# reflect any dependencies between the projects (i.e. if x depends on y, then y must
# precede x in the list).
projects=( \
    Base:src,test,shell   \
    Assembler:src,test    \
    VM:src,test           \
    VMDI:src              \
    Tele:src              \
    JDWP:src              \
    TeleJDWP:src          \
    Inspector:src,test    \
)

maxine_cp=${JAVA_HOME}/lib/tools.jar
for project in ${projects[@]}; do
    project_dir=${project/:*/}
    maxine_cp=${maxine_cp}:${maxine_dir}/${project_dir}/bin
done

test -n "${JUNIT4_CP}" || { echo "Need to use '-junit4' option or JUNIT4_CP environment variable to specify a class path for Junit4 classes"; exit 1; }
maxine_cp=${maxine_cp}:/${JUNIT4_CP}

maxine_vm=${maxine_dir}/Native/generated/${MAXINE_OS}/maxvm

#=======================================
# Utility for verbose execution
#=======================================

function run() {
    if $verbose ; then
        echo "$@"
    fi
    eval "$@"
}

#=======================================
# Utility to ensure $make points to a
# GNU make executable
#=======================================

function config_gnu_make() {
    for a in $make_arg make gmake gnumake; do
        if ( sh -c "$a --version" 2>/dev/null | grep GNU >/dev/null ) ; then 
            make=$(which $a)
            break
        fi
    done
}

function check_gnu_make() {
    config_gnu_make
    if [ -z "$make" ]; then
        if [ -n "$make_arg" ]; then
            echo "$make_arg does not denote a GNU make executable"
        else
            echo "Could not find a GNU make executable on the current path."
            echo "Please fix the path or use the -make option."
        fi
    exit 1
    fi
}

#=======================================
# 'build' command
#=======================================

build_usage="[options] projects..."
build_help="compile the Maxine Java and C sources, linking the latter

   Compile all or some of the Maxine source code using the appropriate compilers
   and linkers for the various source code types.
   
options:
 -clean     removes existing binaries and class files before building projects
 -javac     path to a Java source compiler (default: ${JAVA_HOME}/bin/javac

If no projects are given, then all projects are built."

function run_build() {
    javac=${JAVA_HOME}/bin/javac
    native_only=false
    exit_after_help=false
    clean=false
    projects_to_build=""
    while [ "$1" != "" ]; do
        case $1 in
            -javac )
                shift
                javac=$1
                ;;
            -clean )
                clean=true
                ;;
            -* )
                echo "unknown build option '$1'"
                show_build_help=true
                break
                ;;
            * )
                projects_to_build="$projects_to_build $1"
                ;;
        esac
        shift
    done
    if [ -z "$projects_to_build" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_build="$projects_to_build $project_dir"
        done
        projects_to_build="Native $projects_to_build"
    fi
    
    # Compile C sources
    if [[ "$projects_to_build" == *Native* ]]; then
        echo "Compiling C sources in ${maxine_dir}/Native..."
  
        check_gnu_make      
        
        pushd . >/dev/null
        cd ${maxine_dir}/Native;
        if $clean ; then
           run $make clean
        fi
        run $make;
        result=$?
        popd >/dev/null
        if [ $result -ne 0 ]; then
            exit $result
        fi
    fi
        
    # Compile Java sources
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        if [[ "$projects_to_build" != *${project_dir}* ]]; then
            continue
        fi
        if $clean ; then
            run rm -rf ${maxine_dir}/${project_dir}/bin
        fi
        run mkdir -p ${maxine_dir}/${project_dir}/bin

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }        
        for source_dir in ${source_dirs} ; do
            pushd . >/dev/null
            cd ${maxine_dir}/${project_dir}/${source_dir}
            echo "Compiling Java sources in ${maxine_dir}/${project_dir}/${source_dir}..."
            javac_input=/tmp/javacfiles.txt.$$
            find . -name *.java | grep -v 'package-info.java' >$javac_input
            run ${javac} -source 1.6 -g -J-Xmx1g -classpath ${maxine_cp} -d ../bin @$javac_input 2>&1 | \
               awk ' BEGIN                    { s=0; c=-1}
                     /is Sun proprietary API/ { s++; c=2; }
                                              { if (c-- >= 0) next; print; }
                     END                      { if (s > 0) print "Suppressed " s " warnings about use of Sun implementation classes" }'
            
            result=$?
            rm $javac_input
            for file in `find . -type f | grep -v '.java$'`; do
                if [ -d ../bin/$(dirname $file) ]; then
                   run cp $file ../bin/$file
                fi
            done
            popd >/dev/null
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

#=======================================
# 'image' command
#=======================================

image_usage="[options]"
image_help="build a boot image

    Run the com.sun.max.vm.prototype.BinaryImageGenerator class to build a Maxine boot image.
    
    Use \"max image -help\" to see what other options this command accepts."

function run_image() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageGenerator -trace=1 -run=java $@
}

#=======================================
# 'compile' command
#=======================================

compile_usage="[options] compilation_specs..."
compile_help="compile a list of classes and/or methods using the VM's compiler

    A compilation spec is a class name pattern followed by an optional method name
    pattern separated by a ':'. For example:

        Object:wait String

    will compile all methods in a class whose name contains "Object" where the
    method name contains "wait" as well as all methods in a class whose name
    contains "String". The classes searched are those on the class path.
    
    The compilation phases are traced and the resulting machine code is disassembled.
    
    The output traced by this command is not guaranteed to be the same as the output
    for a compilation done at runtime. The code produced by a compiler is very sensitive
    to the compilation context such as what classes have been resolved etc.
    
    Use \"max compile -help\" to see what other options this command accepts."

function run_compile() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.compiler.CompilerRunner $@
}

#=======================================
# 'vm' command
#=======================================

vm_usage="[options] [class | -jar jarfile]  [args...]"
vm_help="launch the Maxine VM

    Run the Maxine VM with the given options and arguments.
    
    Use \"max vm -help\" to see what other options this command accepts."

# Parses the positional parameters to extract 'pseudo' VM options
# that actually manifest themselves to the VM as environment variables.
function parse_vm_args() {
    vm_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -XX:LogFile=*)
                MAXINE_LOG_FILE=${1/*=/}
                if $verbose ; then
                       echo "MAXINE_LOG_FILE=$MAXINE_LOG_FILE"
                   fi
                export MAXINE_LOG_FILE
                ;;
            *)
                vm_args="$vm_args $1"
                ;;
        esac
        shift
    done    
}

function run_vm() {
    parse_vm_args $@
    run ${maxine_vm} $vm_args
}

#=======================================
# 'javap' command
#=======================================

javap_usage="[options] classes..."
javap_help="launch javap with a -classpath option denoting all the Maxine classes

    Run the JDK javap class file disassembler with the following prepended options:
    
        -private -verbose -classpath <path to Maxine classes>
    
    Use \"max javap -help\" to see what other options this command accepts."

function run_javap() {
    run ${JAVA_HOME}/bin/javap -private -verbose -classpath ${maxine_cp}:${JCK_CLASSPATH} "$@"
}

#=======================================
# 'dis' command
#=======================================

dis_usage="[options] classes..."
dis_help="preprocess class files with the Maxine VM and disassembles the result with javap

    Run Maxine in boot image building mode to load one or more classes (which performs
    preprocessing of the bytecode in the classes for implementing JNI stubs, exception
    dispatchers and sychronized methods, etc), writes the classes back to valid Java
    class files and feeds them into javap.
    
    This is an easy way to see how Maxine implements certain VM features via bytecode
    preprocessing or generation.

    Use \"max dis -help\" to see what other options this command accepts."
    
function run_dis() {
    TMP_DIR=/tmp/${USER}/generated.$$
    run mkdir -p ${TMP_DIR}
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.classfile.ClassfileWriter -d=${TMP_DIR} -javap "$@"
    run rm -rf ${TMP_DIR}
}

#=======================================
# 'inspect' command
#=======================================

inspect_usage="[options] [class | -jar jarfile]  [args...]"
inspect_help="launch a given program under the inspector

    Run the Maxine VM under the inspector. The arguments accepted by this command
    are exactly those accepted by the 'max vm' command. To debug a program in the
    inspector, simply replace 'vm' on the command line that launches the program
    with 'inspect'."

function run_inspect() {
    parse_vm_args $@
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.ins.MaxineInspector -trace=${TRACE:-1} -d -a=\""$vm_args"\"
}

#=======================================
# 'inspector' command
#=======================================

inspector_usage="[options]"
inspector_help="launch the inspector

    Run the inspector. This allows you to run supply inspector specific options as opposed
    to the \"max inspect\" command which only supports VM options.
    
    Use \"max inspector -help\" to see what other options this command accepts."

function run_inspector() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.ins.MaxineInspector "$@"
}

#=======================================
# 'jtest' command
#=======================================

jtest_help="run the Java Tester"

function run_jtest() {
    vm_args=""
    jtester_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -- )
                shift
                jtester_args="$@"
                break
                ;;
            -h )
                echo "Usage: jtest <VM options> -- <Java Tester options>"
                echo "where Java Tester options include:"
                run ${maxine_vm} -classpath ${maxine_dir}/Base/bin:${maxine_dir}/VM/bin test.com.sun.max.vm.compiler.JavaTester -help
                return
                ;;
            * )
                vm_args="$vmargs $1"
                ;;
        esac
        shift
    done
    run ${maxine_vm} -classpath ${maxine_dir}/Base/bin:${maxine_dir}/VM/bin $vm_args test.com.sun.max.vm.compiler.JavaTester $jtester_args
}

#=======================================
# 'helloworld' command
#=======================================

helloworld_help="run a basic 'hello world' program on the Maxine VM"

function run_helloworld() {
    run ${maxine_vm} -classpath ${maxine_dir}/VM/bin "$@" util.HelloWorld
}

#=======================================
# 'objecttree' command
#=======================================

objecttree_usage="[options]"
objecttree_help="print the causality spanning-tree of the object graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given object is in the image. This is useful when trying to reduce
    the size of the image.

    Use \"max objecttree -help\" to see what other options this command accepts."
    
function run_objecttree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageObjectTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.object.tree "$@"
}

#=======================================
# 'methodtree' command
#=======================================

methodtree_usage="[options]"
methodtree_help="print the causality spanning-tree of the method graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given method is (or isn't) in the image. This is useful when
    trying to reduce the size of the image.

    Use \"max methodtree -help\" to see what other options this command accepts."

function run_methodtree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageMethodTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.method.tree "$@"
}

#=======================================
# 'test' command
#=======================================

test_usage="[options]"
test_help="run some or all of the Maxine tests

    The Maxine sources include a variety of tests that can be run by a
    special launcher. These include JUnit tests, VM micro tests, certain
    benchmark suites and output comparison tests amongst others. 
    
    Use \"max test -help\" to see what other options this command accepts."

function run_test() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester "$@"
}

#=======================================
# 'gate' command
#=======================================

gate_usage="[options]"
gate_presets="-java-config-alias=optopt"
gate_help="run the tests used to validate a push to the stable Maxine repository

    If this commands exits with a 0 exit code, then the source code is in
    a state that would be accepted for integration into the main repository.
    
    This is simply a wrapper for invoking the \"max test\" command with the following
    preset options:
    
        ${gate_presets}

    Use \"max gate -help\" to see what other options this command accepts."

function run_gate() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -java-executable="${jvm}" "-java-vm-args=\"${jvm_args}\" ${gate_presets}" "$@"
}

#=======================================
# 'help' command
#=======================================

help_usage="[command]"
help_help="show help for a given command

    With no arguments, print a list of commands and short help for each command.

    Given a command name, print help for that command."

function run_help() {
    if [ $# -eq 0 ]; then
        usage
    else
        command="$1"
        
        usage_var="${command}_usage"
        usage=${!usage_var}
        
        help_var="${command}_help"
        help=${!help_var}
        if [ -z "$help" ]; then
            help="[no description available]"
        fi
        printf "max %s %s\n\n%s\n" "$command" "$usage" "$help"
    fi
}

#=======================================
# Main launcher
#=======================================

function usage() {
    if [ -n "$1" ]; then
        echo $1
    fi
    echo "Maxine Launcher"
    echo
    echo "available commands:"
    for run_command in `declare -Ff | grep 'run_' | cut -d ' ' -f 3 | sort`; do
        command=${run_command/run_/}
        help=""
        help_var="${command}_help"
        help=${!help_var}
        if [ -z "$help" ]; then
            help="[no description available]"
        fi
        printf " %-16s %s\n" "$command" "$help" | head -n 1
    done
    config_gnu_make
    echo
    echo "global options:"
    echo " -v               enable verbose output "
    echo " -d               enable debug output"
    echo " -h               show launcher help"
    echo " -java_home <path> specifies JDK installation directory (must be JDK 6 or later)"
    echo "                    (default: value of the JAVA_HOME environment variable)"
    echo " -jvm <path>      specifies Java VM executable (default: bin/java under JAVA_HOME)"
    echo " -J<args>         specifies Java VM arguments (default: ${default_jvm_args})"
    echo " -J/p<args>       prefix Java VM arguments"
    echo " -J/a<args>       suffix Java VM arguments"
    echo " -maxine <path>   specifies base directory of the Maxine code base"
    echo "                    (default: ${maxine_dir})"
    echo " -junit4 <cp>     class path for Junit 4 classes (default: value of JUNIT4_CP environment variable)"
    echo " -make <path>     path to GNU make executable (default: $make)"
}

if [ -n "${unknown_option}" ]; then
    usage "max: unknown global option '${unknown_option}'"
    exit 255
fi

if $show_help ; then
    usage ""
    exit 0
fi

if [ -z "${command}" ]; then
    usage ""
    exit 0
fi

run_command="run_${command}"
shift

command_type=`type -t ${run_command}`
if [ "${command_type}" != "function" ]; then
    usage "max: unknown command '${command}'"
    exit 255
fi

eval $run_command $command_args
