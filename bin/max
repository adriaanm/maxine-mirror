#!/bin/bash
#
# A launcher for Maxine executables and tools. This launch simplifies the task
# of running the Maxine VM and utilities by setting up the necessary class paths
# and executable paths. The only requirement is for the user to have set the
# environment variable MAXINE_HOME to point to the Maxine code base and JAVA_HOME
# to point to a JDK installation directory. The '-java_home' and '-maxine_home'
# global options can be used instead.
#
# To add a new launchable command, write two functions named 'run_<command>' and
# 'describe_<command>'. See the existing commands for examples. Once added, the
# command can be launched as follows:
#
#   max <command> <arguments>
#
# In addition, the command and it's description will be listed when this script
# is run without any arguments.
#
# Author: Doug Simon

verbose=false
unknown_option=""
show_help=false
default_jvm_args="-d64 -ea -Xss2m -Xms1g -Xmx2g"
jvm_args="$default_jvm_args"
while [ "${1:0:1}" = "-" ]; do
    case $1 in
        -v )
            verbose=true
            ;;
        -d )
            set -x
            ;;
        -h )
            show_help=true
            ;;
        -java_home )
            shift
            JAVA_HOME=$1
            ;;
        -maxine_home )
            shift
            MAXINE_HOME=$1
            ;;
        -junit4 )
            shift
            JUNIT4_CP=$1
            ;;
        -jvm )
            shift
            jvm=$1
            ;;
        -jvm_args )
            shift
            jvm_args=$1
            ;;
        * )
            unknown_option=$1
            break
            ;;
    esac
    shift
done
command=$1
shift
command_args=$@

# Ensure that the non-optional variables are set
test -n "${JAVA_HOME}" || { echo "JAVA_HOME must be set to JDK installation directory"; exit 1; }
test -n "${MAXINE_HOME}" || { echo "MAXINE_HOME must be set to the base directory of the Maxine code base"; exit 1; }

# Undefined optional variables are set to defaults
test -n "${jvm}" || jvm="${JAVA_HOME}/bin/java"
jvm="$jvm $jvm_args"

java_version="`$jvm -version 2>&1 | head -1 | cut -d '"' -f2`"
if [[ "$java_version" != 1.6* ]]; then
    echo "JAVA_HOME does not denote a JDK 6 installation: $java_version"
    exit 255
fi 

if [ -z "${MAXINE_OS}" ]; then
    OS=`uname -s`
    case $OS in
        Darwin*) MAXINE_OS=darwin ;;
        Linux*)  MAXINE_OS=linux ;;
        SunOS*)  MAXINE_OS=solaris ;;
    esac
    if [ -z "${MAXINE_OS}" ]; then
        echo "Supported operating system could not be derived from $OS. Please set MAXINE_OS explicitly."
        exit 1
    fi
fi

# The set of projects whose sources are to be compiled. The order of this list must
# reflect any dependencies between the projects (i.e. if x depends on y, then y must
# precede x in the list).
projects=( \
    Base:src,test,shell   \
    Assembler:src,test    \
    VM:src,test           \
    VMDI:src              \
    Tele:src              \
    JDWP:src              \
    TeleJDWP:src          \
    Inspector:src,test    \
)

maxine_cp=${JAVA_HOME}/lib/tools.jar
for project in ${projects[@]}; do
    project_dir=${project/:*/}
    maxine_cp=${maxine_cp}:${MAXINE_HOME}/${project_dir}/bin
done

maxine_vm=${MAXINE_HOME}/Native/generated/${MAXINE_OS}/maxvm

function describe_build() {
    echo "compile the Maxine Java and C sources, linking the latter";
}

function describe_build() {
    echo "compile the Maxine Java and C sources, linking the latter"
}

function run_build() {
    javac=${JAVA_HOME}/bin/javac
    make=gmake
    show_build_help=false
    native_only=false
    exit_after_help=false
    projects_to_build=""
    while [ "$1" != "" ]; do
        case $1 in
            -h )
                show_build_help=true
                ;;
            -make )
                shift
                make=$1
                ;;
            -javac )
                shift
                javac=$1
                ;;
            -junit4 )
                shift
                JUNIT4_CP=$1
                ;;
            -* )
                echo "unknown build option '$1'"
                show_build_help=true
                break
                ;;
            * )
                projects_to_build="$projects_to_build $1"
                ;;
        esac
        shift
    done
    if [ -z "$projects_to_build" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_build="$projects_to_build $project_dir"
        done
    fi
    
    if $show_build_help ; then
        echo "Usage: build [-options]"
        echo
        echo "where options include:"
        echo " -h         show help message"
        echo " -make      path to GNU make executable (default: gmake)"
        echo " -javac     path to a Java source compiler (default: ${JAVA_HOME}/bin/javac"
        echo " -junit4    class path for Junit 4 classes"
        return
    fi
    
    test -n "${JUNIT4_CP}" || { echo "JUNIT4_CP must specify a class path for Junit4 classes"; exit 1; }
    maxine_cp=${maxine_cp}:/${JUNIT4_CP}

    # Compile C sources
    if [[ "$projects_to_build" == *Native* ]]; then
        echo "Compiling C sources in ${MAXINE_HOME}/Native..."
        ( cd ${MAXINE_HOME}/Native; $make; )
    fi
        
    # Compile Java sources
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        if [[ "$projects_to_build" != *${project_dir}* ]]; then
            continue
        fi
        rm -rf ${MAXINE_HOME}/${project_dir}/bin/*
        mkdir -p ${MAXINE_HOME}/${project_dir}/bin

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }        
        for source_dir in ${source_dirs} ; do
            ( cd ${MAXINE_HOME}/${project_dir}/${source_dir}
              cmd="${javac} -source 1.6 -g -J-Xmx1g -classpath ${maxine_cp} -d ../bin `find . -name *.java`"
              echo "Compiling Java sources in ${MAXINE_HOME}/${project_dir}/${source_dir}..."
              if $verbose ; then
                  echo $cmd
              fi
              eval $cmd
              result=$?
              for file in `find . -type f | grep -v '.java$'`; do
                  if [ -d ../bin/$(dirname $file) ]; then
                     cp $file ../bin/$file
                  fi
              done
              return $result
            )
            result=$?
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

function describe_image () {
    echo "build a VM image"
}

function run_image() {
    cmd="${jvm} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageGenerator -trace=1 -build=DEBUG -run=java $@"
    if $verbose ; then
        echo $cmd
    fi
    eval $cmd
}

function describe_vm() {
    echo "launch the Maxine VM"
}

function run_vm() {
    vm_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -XX:LogFile=*)
                MAXINE_LOG_FILE=${1/*=/}
                if $verbose ; then
                       echo "MAXINE_LOG_FILE=$MAXINE_LOG_FILE"
                   fi
                export MAXINE_LOG_FILE
                ;;
            *)
                vm_args="$vm_args $1"
                ;;
        esac
        shift
    done    
    cmd="${maxine_vm} $vm_args"
    if $verbose ; then
        echo $cmd
    fi
    eval $cmd
}

function describe_javap() {
    echo "launch javap with a -classpath option denoting all the Maxine classes"
}

function run_javap() {
    cmd="${JAVA_HOME}/bin/javap -private -verbose -classpath ${maxine_cp}:${JCK_CLASSPATH} $@"
    if $verbose ; then
        echo $cmd
    fi
    eval $cmd
}

function describe_dis() {
    echo "preprocess class files with the Maxine VM and disassembles the result with javap"
}

function run_dis() {
    TMP_DIR=/tmp/${USER}/generated.$$
    mkdir -p ${TMP_DIR}
    cmd="${jvm} -d64 -cp ${maxine_cp} com.sun.max.vm.classfile.ClassfileWriter -d=${TMP_DIR} -javap $@"
    if $verbose ; then
        echo $cmd
    fi
    eval $cmd
    rm -rf ${TMP_DIR}
}

function describe_jtest() {
    echo "run the Java Tester"
}
function run_jtest() {
    vm_args=""
    jtester_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -- )
                shift
                jtester_args="$@"
                break
                ;;
            -h )
                echo "Usage: jtest <VM options> -- <Java Tester options>"
                return
                ;;
            * )
                vm_args="$vmargs $1"
                ;;
        esac
        shift
    done
    cmd="${maxine_vm} -classpath ${MAXINE_HOME}/Base/bin:${MAXINE_HOME}/VM/bin test.com.sun.max.vm.compiler.JavaTester $jtester_args"
    if $verbose ; then
        echo $cmd
    fi
    eval $cmd
}


function describe_hw() {
    echo "run a basic 'hello world' program on the Maxine VM"
}

function run_hw() {
    ${maxine_vm} -classpath ${MAXINE_HOME}/VM/bin $@ util.HelloWorld
}

function describe_otree() {
    echo "print the causality spanning-tree of the object graph in the VM image"
}

function run_otree() {
    ${jvm} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageObjectTree -in=${MAXINE_HOME}/Native/generated/${MAXINE_OS}/maxine.object.tree "$@"
}

function describe_mtree() {
    echo "print the causality spanning-tree of the method graph in the VM image"
}

function run_mtree() {
    ${jvm} -cp ${maxine_cp} com.sun.max.vm.prototype.BinaryImageMethodTree -in=${MAXINE_HOME}/Native/generated/${MAXINE_OS}/maxine.method.tree "$@"
}

function describe_maxinetester() {
   echo "run MaxineTester"
}

function run_maxinetester() {
    ${jvm} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester "$@"
}

function showCommands() {
    if [ -n "$1" ]; then
        echo $1
    fi
    echo "Maxine Launcher"
    echo
    echo "available commands:"
    for run_command in `declare -Ff | grep 'run_' | cut -d ' ' -f 3 | sort`; do
        command="`echo $run_command | sed 's:run_::g'`"
        describe_command="`echo $run_command | sed 's:run_:describe_:g'`"
        if [ "`type -t ${describe_command}`" = "function" ]; then
            echo -e " ${command}\t `eval ${describe_command}`"
        else
            echo -e " ${command}\t [no description available]"
        fi
    done
    echo
    echo "global options:"
    echo " -v           enable verbose output"
    echo " -d           enable debug output"
    echo " -h           show launcher help"
    echo " -java_home   specifies JDK installation directory (must be JDK 6 or later)"
    echo "                (default: value of the JAVA_HOME environment variable)"
    echo " -jvm         specifies Java VM executable (default: bin/java under JAVA_HOME)"
    echo " -jvm_args    specifies Java VM arguments (default: ${default_jvm_args})"
    echo " -maxine_home specifies base directory of Maxine code base"
    echo "                (default: value of the MAXINE_HOME environment variable)"
    echo " -junit4      specifies classpath for Junit 4 classes"
    echo "                (default: value of the JUNIT4_CP environment variable)"
}

if [ -n "${unknown_option}" ]; then
    showCommands "max: unknown global option '${unknown_option}'"
    exit 255
fi

if $show_help ; then
    showCommands ""
    exit 0
fi

if [ -z "${command}" ]; then
    showCommands ""
    exit 0
fi

run_command="run_${command}"
shift

command_type=`type -t ${run_command}`
if [ "${command_type}" != "function" ]; then
    showCommands "max: unknown command '${command}'"
    exit 255
fi

eval $run_command $command_args
