#!/bin/bash
#
# ----------------------------------------------------------------------------------------------------
# Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
#
# Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
# that is described in this document. In particular, and without limitation, these intellectual property
# rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
# more additional patents or pending patent applications in the U.S. and in other countries.
#
# U.S. Government Rights - Commercial software. Government users are subject to the Sun
# Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
# supplements.
#
# Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
# registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
# are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
# U.S. and other countries.
#
# UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
# Company, Ltd.
# ----------------------------------------------------------------------------------------------------
#
# A launcher for Maxine executables and tools. This launch simplifies the task
# of running the Maxine VM and utilities by setting up the necessary class paths
# and executable paths. The only requirement is for the user to have set the
# environment variable JAVA_HOME to point to a JDK installation directory.
# The '-java_home' global option can be used instead.
#
# To add a new command, write a function named 'run_<command>' and
# define a variable named '<command>_help'. See the existing commands for examples.
# Once added, the command can be launched as follows:
#
#   max <command> <arguments>
#
# In addition, the command and it's description will be listed when this script
# is run without any arguments.
#
# It is possible to extend this script by sourcing it from a parent script. For
# example, if this script is at $MAXINE_HOME/bin/max, then the parent script
# needs to end with:
#
#    . "$MAXINE_HOME/bin/max"
#
# One reason to extend this script is to build additional
# projects that depend on Maxine, e.g. for the Guest VM Xen port of Maxine.
# To do this set the following variables before invoking max:
#
#  extra_projects      an array of extra projects to build (see projects below for syntax)
#  extra_project_dir   the path to where the projects reside
#
# It is also possible to override any of the commands in this script. For example, to
# override the 'image' command, define a function named 'run_image_override' in the
# parent script before sourcing this script. In this case, the 'run_image_override'
# function will be called instead of 'run_image' if the user specified the 'image' command.
#
# Author: Doug Simon, Mick Jordan

#set -x

verbose=false
unknown_option=""
show_help=false
default_jvm_args="-d64 -ea -Xss2m -Xmx1g"
default_jvm_dbg_port=8000
jvm_args="$default_jvm_args"
jvm_args_prefix=""
jvm_args_suffix=""
jvm_dbg_port=""
maxine_dir=""
make_arg=
cp_suffix=
cp_prefix=
base_ide_dir=shell
if [ x${MAXINE_IDE} = xINTELLIJ ]; then
    base_ide_dir=intellij
fi
if [ x${MAXINE_IDE} = xNETBEANS ]; then
    base_ide_dir=netbeans
fi
if [ x${MAXINE_IDE} = xECLIPSE ]; then
    base_ide_dir=eclipse
fi
while [ "${1:0:1}" = "-" ]; do
    case $1 in
        -v )
            verbose=true
            ;;
        -d )
            set -x
            ;;
        -h )
            show_help=true
            ;;
        -vmdir )
            shift
            MAXVM_DIR=$1
            ;;
        -max.os )
            shift
            MAXINE_OS=$1
            jvm_args="$jvm_args -Dmax.os=$1"
            remote=1
            ;;
        -make )
            shift
            make_arg=$1
            ;;
        -java_home )
            shift
            export JAVA_HOME=$1
            ;;
        -maxine )
            shift
            maxine_dir=$1
            ;;
        -jvm )
            shift
            jvm=$1
            ;;
        -J/p* )
            jvm_args_prefix="$jvm_args_prefix ${1/-J\/p/}"
            ;;
        -J/a* )
            jvm_args_suffix="$jvm_args_suffix ${1/-J\/a/}"
            ;;
        -J* )
            jvm_args=${1/-J/}
            ;;
        -dbg )
            jvm_dbg_port=$default_jvm_dbg_port
            ;;
        -dbgport )
            shift
            jvm_dbg_port=$1
            ;;
        -junit4 )
            shift
            JUNIT4_CP=$1
            ;;
        -cp/p:* )
            cp_prefix="${1/-cp\/p:/}"
            ;;
        -cp/a:* )
            cp_suffix="${1/-cp\/a:/}"
            ;;
        * )
            unknown_option=$1
            break
            ;;
    esac
    shift
done

command=$1
shift
if [ -n "$jvm_dbg_port" ]; then
    jvm_args="$jvm_args -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$jvm_dbg_port"
fi
jvm_args="$jvm_args_prefix $jvm_args $jvm_args_suffix"
command_args=$@

# Ensure that the JAVA_HOME is set or guess at its location:
if [ -z "${JAVA_HOME}" ]; then
    if [ -d /usr/lib/jvm/java-6-sun ]; then
       export JAVA_HOME=/usr/lib/jvm/java-6-sun
    elif [ -d /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home ]; then
       export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home
    elif [ -d /usr/jdk/latest ]; then
       export JAVA_HOME=/usr/jdk/latest
    else
       echo "JAVA_HOME must be set to a JDK 6 installation directory"
       exit 1;
    fi
fi

# Try to find the base directory of the Maxine code base by using the path of this script
if [ -z "${maxine_dir}" ]; then
    # Resolve location of this script
    me="${BASH_SOURCE[0]}"
    while [ -h "$me" ]; do
        me=`readlink -e "$me"`
    done
    pushd . >/dev/null
    cd `dirname "${me}"`
    cd ..
    maxine_dir=`pwd`
    popd >/dev/null
fi

# Sanity check: is ${maxine_dir}/bin/max an executable
if [ ! -x "${maxine_dir}/bin/max" ]; then
    echo "Can't find Maxine code base at '${maxine_dir}': '${maxine_dir}/bin/max' does not exist or is not an executable"
    exit 1
fi

# Undefined optional variables are set to defaults
test -n "${jvm}" || jvm="${JAVA_HOME}/bin/java"
jvm_exe="$jvm $jvm_args"

# Ensure that a JDK 6 is being used
# The definition f quote is for purely cosmetic reasons to avoid emacs thinking
# the rest of the file is a string and messing up the syntax highlighting
quote='"'
quote='"'
java_version="`$jvm -version 2>&1 | head -1 | cut -d $quote -f2`"
if [[ "$java_version" != 1.6* ]]; then
    echo "JAVA_HOME does not denote a JDK 6 installation: $java_version"
    exit 255
fi

arch=""
if [ -z "${MAXINE_OS}" ]; then
    OS=`uname -s`
    case $OS in
        Darwin* )
            if [ "$java_version" != "1.6.0_20" ]; then
                # Integration with the JDK on Mac OS X has proven to be brittle
                # due to the way in which the JDK libraries are linked against
                # each other. For example, in version 1.6.0_17 libjava.jnilib
                # had a Mach-O load command that explicitly specified a hard coded
                # absolute path to libclient.dylib. In version 1.6.0_20, the linkage
                # mechanism was changed to use @rpath/ commands instead (see the
                # man page for dyld(1)). To keep things simple, only an exact
                # version of the Mac OS X JDK is supported.
                echo "WARNING: Only JDK 1.6.0_20 is known to work with Maxine on Mac OS X"
            fi
            MAXINE_OS=darwin
            ;;
        Linux* )
            MAXINE_OS=linux
            ;;
        SunOS* )
            MAXINE_OS=solaris
            ;;
    esac
    if [ -z "${MAXINE_OS}" ]; then
        echo "Supported operating system could not be derived from $OS. Please set MAXINE_OS explicitly."
        exit 1
    fi
fi

# gets the destination for classes for the project
function get_project_dest() {
	if [ "x$MAXINE_IDE" = "xINTELLIJ" ]; then
		echo ${project_dir_parent}/out/production/$1
	else
		echo ${project_dir_parent}/$1/bin
	fi
}

# gets the classpath entry for a project
function get_project_cp() {
	if [ "x$MAXINE_IDE" = "xINTELLIJ" ]; then
		zee_project_cp="${maxine_dir}/out/production/$1"
	else
		zee_project_cp="${maxine_dir}/$1/bin"
	fi
	if [ -d ${maxine_dir}/$1/classes ]; then
	    # the project has a "classes" directory
	    zee_project_cp="$zee_project_cp:${maxine_dir}/$1/classes"
	fi
	echo $zee_project_cp
}

# The set of projects whose sources are to be compiled. The order of this list must
# reflect any dependencies between the projects (i.e. if x depends on y, then y must
# precede x in the list).
projects=( \
    CRI:src                       \
    C1X:src                       \
    C0X:src                       \
    Base:src,test,$base_ide_dir   \
    Assembler:src,test            \
    VM:src,test                   \
    CPS:src,test                  \
    MaxineC1X:src,test            \
    MaxineELF:src                 \
    VMDI:src                      \
    Tele:src                      \
    JDWP:src                      \
    TeleJDWP:src                  \
    Inspector:src,test            \
)

if [ "$OS" != "Darwin" ]; then
    maxine_cp=${JAVA_HOME}/lib/tools.jar
fi

for project in ${projects[@]}; do
    project_dir=${project/:*/}
    maxine_cp=${maxine_cp}:$(get_project_cp ${project_dir})
done

# create the augmented classpath for the extra projects
extra_project_cp=$maxine_cp
# add in any extra projects
for project in ${extra_projects[@]}; do
    project_dir=${project/:*/}
    extra_project_cp=${extra_project_cp}:${extra_projects_dir}/${project_dir}/bin
done

# now combine the two project lists for build purposes
projects=( ${projects[@]} ${extra_projects[@]} )

test -n "${JUNIT4_CP}" || { echo "Need to use '-junit4' option or JUNIT4_CP environment variable to specify a class path for Junit4 classes"; exit 1; }
junit_version="`$jvm -cp ${JUNIT4_CP} junit.runner.Version 2>&1`"
if [[ "$junit_version" != 4.8.1 ]]; then
    echo "The value of JUNIT4_CP ($JUNIT4_CP) does not denote a JUnit4.8.1 installation."
    echo "Running \"$jvm -cp ${JUNIT4_CP} junit.runner.Version\" produced:"
    echo "$junit_version"
    exit 255
fi
maxine_cp=${maxine_cp}:${JUNIT4_CP}

if [ -n "$cp_prefix" ]; then
    maxine_cp="$cp_prefix:$maxine_cp"
fi

if [ -n "$cp_suffix" ]; then
    maxine_cp="$maxine_cp:$cp_suffix"
fi

test -n "$MAXVM_DIR" || MAXVM_DIR="${maxine_dir}/Native/generated/${MAXINE_OS}"
maxine_vm=$MAXVM_DIR/maxvm

method_finder_pattern_help='A pattern is a class name pattern followed by an optional method name
    pattern separated by a ':' further followed by an optional signature:
    
      <class name>[:<method name>[:<signature>]]
    
    For example, the list of patterns:
    
         "Object:wait", "String", "Util:add:(int,float)"
         
    will match all methods in a class whose name contains "Object" where the
    method name contains "wait", all methods in a class whose name
    contains "String" and all methods in any class whose name
    contains "Util", the method name contains "add" and the
    megnature is (int, float).
    
    The type of matching performed for a given class/method name is determined
    by the position of '^' in the pattern name as follows:
    
    Position of '^'   | Match algorithm
     ------------------+------------------
     start AND end     | Equality
     start             | Prefix
     end               | Suffix
     absent            | Substring
    
    For example, "^java.util:^toString^" matches all methods named "toString" in
    any class whose name starts with "java.util".

    The matching performed on a signature is always a substring test. Signatures can
    specified either in Java source syntax (e.g. "int,String") or JVM internal syntax
    (e.g. "IFLjava/lang/String;"). The latter must always use fully qualified type
    names where as the former must not.

    Any pattern starting with "!" is an exclusion specification. Any class or method
    whose name contains an exclusion string (the exclusion specification minus the
    leading "!") is excluded.'

#=======================================
# Utility for verbose execution
#=======================================

function run() {
    if $verbose ; then
        echo "$@"
    fi
    "$@"
}

#=======================================
# Utility to ensure $make points to a
# GNU make executable
#=======================================

function config_gnu_make() {
    for a in $make_arg make gmake gnumake; do
        if ( sh -c "$a --version" 2>/dev/null | grep GNU >/dev/null ) ; then
            make=$(type -p $a)
            break
        fi
    done
}

function check_gnu_make() {
    config_gnu_make
    if [ -z "$make" ]; then
        if [ -n "$make_arg" ]; then
            echo "$make_arg does not denote a GNU make executable"
        else
            echo "Could not find a GNU make executable on the current path."
            echo "Please fix the path or use the -make option."
        fi
    exit 1
    fi
}

#=======================================
# Utility to get image configurations
#=======================================



#============================================================
# When building extra projects, this function sets the
# project_dir_parent variable and project_cp variable
# appropriately for the run_build function
#============================================================

function set_project_dir_parent() {
    for xproject in ${extra_projects[@]}; do
        if [[ "$xproject" == "$1" ]]; then
            project_dir_parent=$extra_projects_dir
            project_cp=$extra_project_cp
            return
        fi
    done
    project_dir_parent=$maxine_dir;
    project_cp=$maxine_cp
}

#=======================================
# 'build' command
#=======================================

build_usage="[options] projects..."
build_help="compile the Maxine Java and C sources, linking the latter

   Compile all or some of the Maxine source code using the appropriate compilers
   and linkers for the various source code types.

options:
 -clean         removes existing binaries and class files before building projects
 -javac <path>  path to a Java source compiler (default: ${JAVA_HOME}/bin/javac)

If no projects are given, then all projects are built."

function run_build() {
    javac=${JAVA_HOME}/bin/javac
    native_only=false
    exit_after_help=false
    clean=false
    projects_to_build=""
    while [ "$1" != "" ]; do
        case $1 in
            -javac )
                shift
                javac=$1
                ;;
            -clean )
                clean=true
                ;;
            -* )
                echo "unknown build option '$1'"
                run_help build
                exit 1
                ;;
            * )
                projects_to_build="$projects_to_build $1"
                ;;
        esac
        shift
    done

    if [ -z "$projects_to_build" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_build="$projects_to_build $project_dir"
        done
        projects_to_build="Native $projects_to_build"
    fi

    # Compile C sources
    if [[ "$projects_to_build" == *Native* ]]; then
        echo "Compiling C sources in ${maxine_dir}/Native..."

        check_gnu_make

        pushd ${maxine_dir}/Native >/dev/null
        if $clean ; then
           run $make clean
        fi
        run $make;
        result=$?
        popd >/dev/null
        if [ $result -ne 0 ]; then
            exit $result
        fi
    fi

    # Compile Java sources
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        project_build_match=0
        for project_to_build in ${projects_to_build[@]}; do
            if [[ "$project_to_build" == ${project_dir} ]]; then
                project_build_match=1
            fi
        done
        if [ $project_build_match -eq 0 ] ; then
            continue
        fi
        set_project_dir_parent ${project}
	project_dest=$(get_project_dest ${project_dir})
        if $clean ; then
            run rm -rf ${project_dest}
        fi
        run mkdir -p ${project_dest}

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }
        for source_dir in ${source_dirs} ; do
            pushd ${project_dir_parent}/${project_dir}/${source_dir} >/dev/null
            javac_input=/tmp/javacfiles.txt.$$
            find . -name *.java | grep -v 'package-info.java' >$javac_input
	        echo "Compiling Java sources in ${project_dir_parent}/${project_dir}/${source_dir}..."
                run ${javac} -source 1.6 -g -J-Xmx1g -classpath ${project_cp} -d ${project_dest} @$javac_input 2>&1 | \
                   awk ' BEGIN                    { s=0; c=-1}
                         /is Sun proprietary API/ { s++; c=2; }
                                                  { if (c-- >= 0) next; print; }
                         END                      { if (s > 0) print "Suppressed " s " warnings about use of Sun implementation classes." }'

            result=${PIPESTATUS[0]}
            if [ $result -eq 0 ]; then
                # Copying non Java source files from 'src' to 'bin'
                for file in `find . -type f | grep -v '.java$'`; do
                    if [ -d ${project_dest}/$(dirname $file) ]; then
                       run cp $file ${project_dest}/$file
                    fi
                done
            fi
            rm $javac_input
            popd >/dev/null
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

#=======================================
# 'clean' command
#=======================================

clean_help="Remove all class files, images, and executables

    Removes all files created by a build, including Java class files, executables, and
    generated images."


function run_clean() {
    if [ $# -ne 0 ]; then
        run_help clean
        exit 1
    fi

    pushd $maxine_dir/Native >/dev/null
    check_gnu_make
    run $make clean
    rm -rf generated	
    popd >/dev/null
    
    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        set_project_dir_parent ${project}
        project_cp=$(get_project_dest ${project_dir})
        if [ "x$project_cp" != "x" ]; then
            echo Removing $project_cp...
            rm -rf $project_cp
        fi
    done

    exit $result
}


#=======================================
# 'jtt' command
#=======================================

jtt_usage="[JTMaxine args...]"
jtt_help="run the JTMaxine program in the Maxine VM

    Run the JTMaxine program in the Maxine VM with the given arguments.
    The MAXVM_OPTIONS environment variable can be used to specify VM options.

    Use \"max vm -help\" to see what VM options are available.
    Use \"max jtt -help\" to see what arguments the JTMaxine program accepts."

function run_jtt() {
    jtt_cp=$(get_project_cp VM)
    jtt_cp=$jtt_cp:$(get_project_cp Base)
    jtt_cp=$jtt_cp:$(get_project_cp CRI)
    jtt_cp=$jtt_cp:$(get_project_cp C0X)
    jtt_cp=$jtt_cp:$(get_project_cp C1X)
    jtt_cp=$jtt_cp:$(get_project_cp Assembler)
    jtt_cp=$jtt_cp:$JUNIT4_CP
    run ${maxine_vm} -cp $jtt_cp $MAXVM_OPTIONS test.com.sun.max.vm.jtrun.JTMaxine -native-tests $@
}

#=======================================
# 'jttgen' command
#=======================================

jttgen_help="(re)generate harness and run scheme for the JavaTester tests

    Run the JavaTester to update the JavaTesterRunScheme.java and JavaTesterTests.java
    files in the com.sun.max.vm.jtrun.all package."

function run_jttgen() {
    if [ $# -ne 0 ]; then
        run_help jttgen
        exit 1
    fi

    pushd $maxine_dir/VM/test >/dev/null
    run ${jvm_exe} -cp $(get_project_cp Base):$(get_project_cp VM) test.com.sun.max.vm.compiler.JavaTester \
        -scenario=target -run-scheme-package=all -native-tests $(echo jtt/* | sed 's:jtt/fail::g')
    result=$?
    popd >/dev/null
    exit $result
}

#=======================================
# 'jnigen' command
#=======================================

jnigen_help="(re)generate content in JniFunctions.java from JniFunctionsSource.java

    Run JniFunctionsGenerator.java to update the methods in JniFunctions.java by adding
    a prologue and epilogue to the @JNI_FUNCTION annotated methods in JniFunctionsSource.java.

    The exit code is non-zero if JniFunctions.java was modified."

function run_jnigen() {
    if [ $# -ne 0 ]; then
        run_help jnigen
        exit 1
    fi

    run ${jvm_exe} -cp $(get_project_cp Base):$(get_project_cp VM) com.sun.max.vm.jni.JniFunctionsGenerator
    result=$?
    exit $result
}

#=======================================
# 'check' command
#=======================================

check_usage="[options] projects..."
check_help="run Checkstyle on the Maxine Java sources

   Run Checkstyle over the Java sources. Any errors or warnings
   produced by Checkstyle result in a non-zero exit code.

options:
 -cs <path>   path to a Checkstyle jar file. (default: value of CHECKSTYLE_JAR environment variable)

If no projects are given, then all Java projects are checked."

function run_check() {
    projects_to_check=""
    while [ "$1" != "" ]; do
        case $1 in
            -cs )
                shift
                CHECKSTYLE_JAR=$1
                ;;
            -* )
                run_help check
                echo "unknown build option '$1'"
                exit 1
                ;;
            * )
                projects_to_check="$projects_to_check $1"
                ;;
        esac
        shift
    done

    if [ -z "$CHECKSTYLE_JAR" ]; then
        if [ -f /import/maxwell/bin/checkstyle.jar ]; then
            CHECKSTYLE_JAR=/import/maxwell/bin/checkstyle.jar
        else
            echo "Need to use '-cs' option or CHECKSTYLE_JAR environment variable to specify location of Checkstyle jar file"
            exit 1
        fi
    fi

    if [ ! -f "$CHECKSTYLE_JAR" ]; then
        echo "No such file: $CHECKSTYLE_JAR"
        exit 1
    fi

    if [ -z "$projects_to_check" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_check="$projects_to_check $project_dir"
        done
    fi

    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        project_found=0
        for project_to_build in ${projects_to_check[@]}; do
            if [[ "$project_to_build" == ${project_dir} ]]; then
                project_found=1
            fi
        done
        if [ $project_found -eq 0 ] ; then
            continue
        fi
        set_project_dir_parent ${project}

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }
        for source_dir in ${source_dirs} ; do
            pushd ${project_dir_parent}/${project_dir}/${source_dir} >/dev/null
            javac_input=/tmp/javacfiles.txt.$$
            find . -name *.java | grep -v 'package-info.java' >$javac_input

	    result=0
            if [ -f $maxine_dir/$project_dir/.checkstyle ]; then
                checks_file=$(grep 'location=' < $maxine_dir/$project_dir/.checkstyle | sed 's:.*location="\([^"]*\)".*:\1:g')
                if [[ "$checks_file" = /* ]]; then
                    checks_file=${checks_file/#\//$maxine_dir/}
                else
                    checks_file="$maxine_dir/$project_dir/$checks_file"
                fi

                echo "Running Checkstyle on $project_dir/$source_dir using $checks_file..."
                checkstyle_out=/tmp/audit.$$
                checkstyle_input=/tmp/checkfiles.txt.$$

                cat $javac_input | \
                    grep -v 'test/bytecode/' |\
                    grep -v 'test/except/' |\
                    grep -v 'test/interactive/' |\
                    grep -v 'test/jdk/' |\
                    grep -v 'test/lang/' |\
                    grep -v 'test/micro/' |\
                    grep -v 'test/optimize/' |\
                    grep -v 'test/reflect/' |\
                    grep -v 'test/threads/' >$checkstyle_input

                run $jvm -Xmx1g -jar $CHECKSTYLE_JAR -c $checks_file $(cat $checkstyle_input) -o $checkstyle_out
                result=$?
                rm $checkstyle_input
                if [ $result -eq 0 ]; then
                    if [ "X$(grep 'warning:' <$checkstyle_out)" != "X" ]; then
                        cat $checkstyle_out
                        result=1
                    fi
                else
                    cat $checkstyle_out
                fi
                rm $checkstyle_out
            fi
            rm $javac_input
            popd >/dev/null
            if [ $result -ne 0 ]; then
                exit $result
            fi
        done
    done
}

#=======================================
# 'javadoc' command
#=======================================

javadoc_usage="[options]"
javadoc_help="run javadoc over the Maxine Java source files

   Run javadoc over the Maxine Java source code and place the generated
   HTML in $maxine_dir/javadoc.

options:
 -clean     removes existing generated javadoc first
 -projects p1,p2,... limit to listed projects
 <any other javadoc option>

    Use \"max javadoc -help\" to see what other options this command accepts."

function run_javadoc() {
    javadoc=${JAVA_HOME}/bin/javadoc
    clean=false
    extra_javadoc_options=""
    projects_to_build=""
    while [ "$1" != "" ]; do
        case $1 in
            -clean )
                clean=true
                ;;
            -projects )
                shift
                projects_to_build="$projects_to_build ${1//,/ }"
                ;;
            -* )
                extra_javadoc_options="$extra_javadoc_options $1"
                ;;
            * )
                break
                ;;
        esac
        shift
    done

    if [ $# -ne 0 ]; then
        echo "Ignoring trailing args: $@"
    fi

    if [ -z "$projects_to_build" ]; then
        for project in ${projects[@]}; do
            project_dir=${project/:*/}
            projects_to_build="$projects_to_build $project_dir"
        done
    fi

    javadoc_output_dir=${maxine_dir}/javadoc
    if $clean ; then
        run rm -rf $javadoc_output_dir
    fi
    run mkdir -p $javadoc_output_dir

    source_path=""
    package_list=/tmp/packages.txt.$$
    cat /dev/null > $package_list

    for project in ${projects[@]}; do
        project_dir=${project/:*/}
        project_build_match=0
        for project_to_build in ${projects_to_build[@]}; do
            if [[ "$project_to_build" == ${project_dir} ]]; then
                project_build_match=1
            fi
        done
        if [ $project_build_match -eq 0 ] ; then
            continue
        fi

        source_dirs_spec=${project/*:/}
        source_dirs=${source_dirs_spec//,/ }
        for source_dir in ${source_dirs} ; do
            abs_source_dir=${maxine_dir}/${project_dir}/${source_dir}
            if [ -z "$source_path" ]; then
                source_path=$abs_source_dir
            else
                source_path="$source_path:$abs_source_dir"
            fi
            find $abs_source_dir -name package-info.java | sed 's:'$abs_source_dir'/\(.*\)/package-info.java:\1:g' | tr '/' '.' >>$package_list
        done
    done

    echo "Running javadoc over Java sources..."
    run ${javadoc} -quiet -source 1.6 -J-Xmx1g \
        -classpath ${maxine_cp} \
        -sourcepath $source_path \
        -d $javadoc_output_dir \
        -link http://java.sun.com/javase/6/docs/api \
     $extra_javadoc_options $(<$package_list)
    result=$?
    rm $package_list
    if [ $result -ne 0 ]; then
        exit $result
    fi
}

#=======================================
# 'configs' command
#=======================================

# To add new configs, see class test.com.sun.max.vm.MaxineTesterConfiguration
configs_usage=""
configs_help="prints the predefined image configurations"

function run_configs() {
    image_configs=`${jvm} -client -Xmx40m -Xms40m -XX:NewSize=30m -cp ${maxine_cp} test.com.sun.max.vm.MaxineTesterConfiguration | sort`
    configs_message=$(printf "    %-15s %s\n " "Configuration" "Expansion")

    for image_config in ${image_configs[@]}; do
        image_config_args="${image_config/*\#/}"
        configs_message=$(printf "%s\n    @%-15s %s" "$configs_message" "${image_config/\#*/}" "${image_config_args//,/ }")
    done

    printf "The available preconfigured option sets are:\n\n%s\n" "$configs_message"
}

#=======================================
# 'image' command
#=======================================

image_usage="[options] classes|packages..."
function image_help() {
    image_configs=`${jvm} -client -Xmx40m -Xms40m -XX:NewSize=30m -cp ${maxine_cp} test.com.sun.max.vm.MaxineTesterConfiguration | sort`
    image_help_message="build a boot image

    Run the BootImageGenerator to build a Maxine boot image. The classes
    and packages specified on the command line will be included in the
    boot image in addition to those found by the Package.java mechanism.
    Package names are differentiated from class names by being prefixed
    with '^'.

    The platform configuration for the generated image is auto-detected
    by native methods. However, the following system properties can be
    used to override the defaults:
    
    Name            | Description                   | Example values
    ================+===============================+================
    max.platform    | name of a preset platform     | solaris-amd64 linux-amd64 darwin-amd64 
    max.cpu         | processor model               | AMD64 IA32 SPARCV9   
    max.isa         | instruction set architecture  | AMD64 ARM PPC SPARC
    max.os          | operating system              | Darwin Linux Solaris 
    max.endianness  | endianness                    | BIG LITTLE
    max.bits        | machine word size             | 64 32
    max.page        | page size                     | 4096 8192 
    max.nsig        | number of signals             | 32
    
    These system properties can be specified as options to the image
    command (e.g. '-os Darwin -bits 32').

    An option starting with '@' denotes a preconfigured set of
    options. $(run_configs)
"
    image_help_message="$image_help_message

    An option starting with '--' is interpreted as a VM option of the same name
    after the leading '-' is removed. For example, to use the '-verbose:class'
    VM option to trace class loading while image building, specify '--verbose:class'.
    Note that not all VM options have an effect during image building.

    Use \"max image -help\" to see what other options this command accepts."

    printf "%s" "$image_help_message"
}

function run_image() {
    system_props=""
    vm_args=""
    image_args=""
    while [ "$1" != "" ]; do
        case $1 in
            @*)
                if [ -z "$image_configs" ]; then
                    # Lazily construct this variable as it requires running a Java program
                    image_configs=$(${jvm} -client -Xmx40m -Xms40m -XX:NewSize=30m -cp ${maxine_cp} test.com.sun.max.vm.MaxineTesterConfiguration | sort)
                fi
                image_config_arg=${1/@/}
                for image_config in ${image_configs[@]}; do
                    image_config_name=${image_config/\#*/}
                    if [ "$image_config_name" = "$image_config_arg" ]; then
                        image_config_args="${image_config/*\#/}"

                        # Prepand the expanded macro to the positional parameters
                        shift
                        set -- ${image_config_args//,/ } "$@"

                        # Continue at the outer 'while' loop
                        continue 2
                    fi
                done
                echo "Invalid image configuration: $1"
                run_help image
                exit 1
                ;;
            --* )
                if [ -z "$vm_args" ]; then
                    vm_args="${1/-/}"
                else
                    vm_args="$vm_args ${1/-/}"
                fi
                ;;
            -platform | -cpu | -isa | -os | -endianness | -bits | -page | -nsig )
                prop_name="max.${1/-/}"
                shift
                system_props="$system_props -D${prop_name}=$1"
                ;;
            *)
                image_args="$image_args $1"
                ;;
        esac
        shift
    done

    if [ -z "$vm_args" ]; then
        run ${jvm_exe} $system_props -cp ${maxine_cp} com.sun.max.vm.prototype.BootImageGenerator -trace=1 -run=java $image_args
    else
        run ${jvm_exe} $system_props -cp ${maxine_cp} com.sun.max.vm.prototype.BootImageGenerator -trace=1 -run=java $image_args -vmargs="$vm_args"
    fi
}

#=======================================
# 'compile' command
#=======================================

compile_usage="[options] compilation_specs..."
compile_help="compile a list of classes and/or methods using the VM's compiler

    A compilation spec is a class name pattern followed by an optional method name
    pattern separated by a ':'. For example:

        Object:wait String

    will compile all methods in a class whose name contains "Object" where the
    method name contains "wait" as well as all methods in a class whose name
    contains "String". The classes searched are those on the class path.

    The compilation phases are traced and the resulting machine code is disassembled.

    The output traced by this command is not guaranteed to be the same as the output
    for a compilation done at runtime. The code produced by a compiler is very sensitive
    to the compilation context such as what classes have been resolved etc.

    Use \"max compile -help\" to see what other options this command accepts."

function run_compile() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.cps.CompilerRunner $@
}

#=======================================
# 'verify' command
#=======================================

verify_usage="[options] patterns..."
verify_help="verifies a set methods using the Maxine bytecode verifier

    Run the Maxine verifier over a set of specified methods available
    on the class path. To extend the class path, use one of the global
    \"-cp/p:<arg>\" or \"-cp/a:<arg>\" options.

    See Patterns below for a description of the format expected for \"patterns...\"

    Use \"max verify -help\" to see what other options this command accepts.
    
    --- Patterns ---
    
    $method_finder_pattern_help"

function run_verify() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.verifier.CommandLineVerifier $@
}

#=======================================
# 'c1x' command
#=======================================

c1x_usage="[options] patterns..."
c1x_help="process a list of methods with the C1X compiler

    See Patterns below for a description of the format expected for \"patterns...\"
    
    The output traced by this command is not guaranteed to be the same as the output
    for a compilation performed at runtime. The code produced by a compiler is sensitive
    to the compilation context such as what classes have been resolved etc.

    Use \"max c1x -help\" to see what other options this command accepts.
    
    --- Patterns ---
    
    $method_finder_pattern_help"

function run_c1x() {
    c1x_cp=${maxine_cp}:`echo $@ | grep '\-search\-cp' | sed 's:.*-search-cp=\([^ ]*\).*:\1:g'`
    run ${jvm_exe} -cp ${c1x_cp} test.com.sun.max.vm.compiler.c1x.C1XTest $@
}

#=======================================
# 'cp' command
#=======================================

cp_help="print the Maxine classpath"

function run_cp() {
    echo ${maxine_cp}
}

#=======================================
# 'vm' command
#=======================================

vm_usage="[options] [class | -jar jarfile]  [args...]"
vm_help="launch the Maxine VM

    Run the Maxine VM with the given options and arguments.
    The expansion of the MAXVM_OPTIONS environment variable is inserted
    before any other VM options specified on the command line.

    Use \"max vm -help\" to see what other options this command accepts."

function run_vm() {
    run ${maxine_vm} $MAXVM_OPTIONS $@
}

#=======================================
# 'copyvm' command
#=======================================

copyvm_usage="dest"
copyvm_help="copy the VM files to a specified directory

    Copy the VM executable, shared libraries and boot image files to
    a specified directory, creating it first if necessary. This allows
    multiple VMs to exist in a single workspace.

    To use a particular VM, set the MAXVM_DIR environment variable before
    running a \"max vm ...\" command."

function run_copyvm() {
    if [ ! -d $1 ]; then
        mkdir -p $1 || { echo "Failed to created directory $1"; exit 1; }
    fi
    run cp -r ${maxine_dir}/Native/generated/${MAXINE_OS}/* $1 && {
        echo "Copied all VM files to $1."
        echo "Use either of the following commands to run this copy of the VM:"
        echo
        echo "    max -vmdir $1 vm ..."
        echo "    env MAXVM_DIR=$1 max vm ..."
        echo
    }
}

#=======================================
# 'eclipse' command
#=======================================

eclipse_usage="[options]"
eclipse_help="launch Eclipse with the Maxine VM

    Run Eclipse under Maxine VM with the given options supplied as
    the value of the '-vmargs' Eclipse launcher option.
    The expansion of the MAXVM_OPTIONS environment variable is inserted
    before any other VM options specified on the command line."

function run_eclipse() {
    run eclipse -vm ${maxine_vm} -vmargs $MAXVM_OPTIONS $@
}

#=======================================
# 'makejdk' command
#=======================================

makejdk_usage="[<destination directory>]"
makejdk_help="create a JDK directory based on the Maxine VM

    Create a JDK directory by replicating the file structure of $JAVA_HOME
    and replacing the 'java' executable with the Maxine VM
    executable. This produces a Maxine VM based JDK for applications
    (such as NetBeans) which expect a certain directory structure
    and executable names in a JDK installation."

function run_makejdk() {
#    set -x

    if [ $# -eq 0 ]; then
        maxjdk_dir="$maxine_dir/maxjdk"
    else
        maxjdk_dir="$1"
        if [[ "$maxjdk_dir" != /* ]]; then
            maxjdk_dir="$PWD/$1"
        fi
    fi

	if [ -e $maxjdk_dir ]; then
	    echo "The destination directory already exists: $maxjdk_dir"
	    echo "Delete it first? [y/n]"
	    done=
	    while [ -z "$done" ]; do
            read reply leftover
            case $reply in
                [yY] | [yY][eE][sS])
                    echo "Deleting $maxjdk_dir..."
                    rm -rf $maxjdk_dir || {
                        echo "Could not remove $maxjdk_dir."
                        echo "Please remove it manually and retry."
                        exit 1;
                    }
                    done=1
                    ;;
                [nN] | [nN][oO])
                    done=1
                    ;;
                *)
                    echo "Please enter \"yes\" or \"no\"."
                    ;;
            esac
        done
    fi
	mkdir -p $maxjdk_dir

    pushd $JAVA_HOME >/dev/null
    entries=$(find . | wc -l)
    echo "Replicating JDK in $maxjdk_dir"
    i=0;
    percent_done=0
    one_percent=$(( entries / 100 ))
    for f in `find .`; do
        mod=$(($i % $one_percent))
        if [ $mod -eq 0 ]; then
            echo -e "\r$percent_done%\c"
            percent_done=$(($percent_done + 1))

        fi
        i=$(($i + 1))

        if [ -d $f ]; then
            mkdir -p $maxjdk_dir/$f
        elif [ ! -f $maxjdk_dir/$f ]; then
            ln -s $JAVA_HOME/$f $maxjdk_dir/$f
        fi
    done
    echo -e "\r100%"
    popd >/dev/null
    for f in ${maxine_dir}/Native/generated/${MAXINE_OS}/*; do
        if [ -f $f ]; then
            cp $f $maxjdk_dir/bin
            if [ "$OS" != "Darwin" ]; then
                cp $f $maxjdk_dir/jre/bin
            fi
        fi
    done
    rm $maxjdk_dir/bin/java
    ln -s $maxjdk_dir/bin/maxvm $maxjdk_dir/bin/java
    if [ "$OS" != "Darwin" ]; then
        rm $maxjdk_dir/jre/bin/java
        ln -s $maxjdk_dir/jre/bin/maxvm $maxjdk_dir/jre/bin/java
    fi

    echo "Created Maxine based JDK in $maxjdk_dir"
}

#=======================================
# 'javap' command
#=======================================

javap_usage="[options] classes..."
javap_help="launch javap with a -classpath option denoting all the Maxine classes

    Run the JDK javap class file disassembler with the following prepended options:

        -private -verbose -classpath <path to Maxine classes>

    Use \"max javap -help\" to see what other options this command accepts."

function run_javap() {
    run ${JAVA_HOME}/bin/javap -private -verbose -classpath ${maxine_cp}:${JCK_CLASSPATH} "$@"
}

#=======================================
# 'dis' command
#=======================================

dis_usage="[options] classes..."
dis_help="preprocess class files with the Maxine VM and disassemble the result with javap

    Run Maxine in boot image building mode to load one or more classes (which performs
    preprocessing of the bytecode in the classes for implementing JNI stubs, exception
    dispatchers and sychronized methods, etc), writes the classes back to valid Java
    class files and feeds them into javap.

    This is an easy way to see how Maxine implements certain VM features via bytecode
    preprocessing or generation.

    Use \"max dis -help\" to see what other options this command accepts."

function run_dis() {
    TMP_DIR=/tmp/${USER}/generated.$$
    run mkdir -p ${TMP_DIR}
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.classfile.ClassfileWriter -d=${TMP_DIR} -javap "$@"
    run rm -rf ${TMP_DIR}
}

#=======================================
# 'inspect' command
#=======================================

inspect_usage="[options] [class | -jar jarfile]  [args...]"
inspect_help="launch a given program under the Inspector

    Run Maxine under the Inspector. The arguments accepted by this command
    are those accepted by the 'max vm' command plus the Inspector specific
    options. To debug a program in the Inspector, simply replace 'vm' on the
    command line that launches the program with 'inspect'.
    
    Use \"max inspect --help\" to see what the Inspector options are. These options
    must be specified with a '--' prefix so that they can be distinguished from
    the VM options.

    The inspect command also accepts the same system property related options
    as the 'image' command except that a '--' prefix must be used (e.g.
    '--os Darwin --bits 32'). Use \"max help image\" for more detail.
    
    Use \"max vm -help\" to see what the VM options are."

function run_inspect() {
    save_class_dir="$MAXVM_DIR/inspected_classes"
    vm_args="-XX:SaveClassDir=$save_class_dir"
    inspector_args="-vmdir=$MAXVM_DIR"
    inspector_cp="$MAXVM_DIR/inspected_classes"
    mkdir -p $save_class_dir || { echo "Failed to created directory $save_class_dir"; exit 1; }
    system_props=""

    while [ "$1" != "" ]; do
        case $1 in
            -XX:LogFile=*)
                vm_args="$vm_args $1"
                TELE_LOG_FILE=tele-${1/*=/}
                if $verbose ; then
                    echo "TELE_LOG_FILE=$TELE_LOG_FILE"
                fi
                export TELE_LOG_FILE
                ;;
            -cp | -classpath )
                vm_args="$vm_args $1"
                shift
                vm_args="$vm_args $1"
                inspector_cp="$inspector_cp:$1"
                ;;
            -jar )
                shift
                vm_args="$vm_args -jar $1"
                inspector_cp="$inspector_cp:$1"
                ;;
            --platform | --cpu | --isa | --os | --endianness | --bits | --page | --nsig )
                prop_name="max.${1/--/}"
                shift
                system_props="$system_props -D${prop_name}=$1"
                ;;
            --cp=* )
                inspector_cp="$inspector_cp:${1/--cp=/}"
                ;;
            --* )
                inspector_args="$inspector_args ${1/-/}"
                ;;
            -XX:SaveClassDir=*)
                vm_args="$vm_args $1"
                save_class_dir=${1/*=/}
                mkdir -p $save_class_dir || { echo "Failed to created directory $save_class_dir"; exit 1; }
                inspector_cp="$inspector_cp:$save_class_dir"
                ;;
            -*)
                vm_args="$vm_args $1"
                ;;
            *)
                # This is the main class argument; copy it and any following
                # arguments to the VM verbatim
                vm_args="$vm_args $@"
                break
                ;;
        esac
        shift
    done

	if [ -n "$inspector_cp" ]; then
	    inspector_args="$inspector_args -cp=${inspector_cp/#:/}"
	fi

    if [[ "$MAXINE_OS" = "darwin" ]]; then
        run sudo -p \
"Debugging is a privileged operation on Mac OS X.
Please enter your 'sudo' password:" \
        ${jvm_exe} $system_props -cp ${maxine_cp}:$maxine_dir/Inspector/jlfgr-1_0.jar com.sun.max.ins.MaxineInspector -trace=1 ${inspector_args} -a="$vm_args"
    else
        run ${jvm_exe} $system_props -cp ${maxine_cp}:$maxine_dir/Inspector/jlfgr-1_0.jar com.sun.max.ins.MaxineInspector -trace=1 ${inspector_args} -a="$vm_args"
    fi
}

#=======================================
# 'inspectoragent' command
#=======================================

inspectoragent_usage="[-impl target] [-port port]"
inspectoragent_help="launch the Inspector agent

    Launch the Inspector agent.

    The agent listens on a given port for an incoming connection from
    a remote Inspector process."

function run_inspectoragent() {
    if [ "$MAXINE_OS" = "darwin" ]; then
        run sudo -p \
"Debugging is a privileged operation on Mac OS X.
Please enter your 'sudo' password:" \
        ${jvm_exe} -cp ${maxine_cp} com.sun.max.tele.channel.agent.InspectorAgent $@
    else
        run ${jvm_exe} -cp ${maxine_cp} com.sun.max.tele.channel.agent.InspectorAgent  $@
    fi
}

#=======================================
# 'view' command
#=======================================

view_usage="[options]"
view_help="browse the boot image under the Inspector

    Browse a Maxine boot image under the Inspector.

    Use \"max view -help\" to see what the Inspector options are."

function run_view() {
    run ${jvm_exe} -cp ${maxine_cp}:$maxine_dir/Inspector/jlfgr-1_0.jar com.sun.max.ins.MaxineInspector -trace=1 -vmdir=$MAXVM_DIR -mode=image $@
}

#=======================================
# 'jtest' command
#=======================================

jtest_usage="[VM options] -- [Java Tester options]"
jtest_help="run the Java Tester

    Use \"max jtest -- -help\" to see what the JavaTester options are. These options
    must be separated from the VM options with '--'.

    Use \"max jtest -help\" to see what the VM options are."

function run_jtest() {
    vm_args=""
    jtester_args=""
    while [ "$1" != "" ]; do
        case $1 in
            -- )
                shift
                jtester_args="$@"
                break
                ;;
            -h )
                echo "Usage: jtest <VM options> -- <Java Tester options>"
                echo "where Java Tester options include:"
                run ${maxine_vm} -classpath $(get_project_cp Base):$(get_project_cp VM) test.com.sun.max.vm.compiler.JavaTester -help
                return
                ;;
            * )
                vm_args="$vmargs $1"
                ;;
        esac
        shift
    done
    
    run ${jvm_exe} -classpath $maxine_cp $vm_args test.com.sun.max.vm.compiler.JavaTester $jtester_args
}

#=======================================
# 'helloworld' command
#=======================================

helloworld_help="run a basic 'hello world' program on the Maxine VM"

function run_helloworld() {
    run ${maxine_vm} -classpath $(get_project_cp VM) "$@" test.output.HelloWorld
}

#=======================================
# 'nm' command
#=======================================

nm_usage="[options] [boot image file]"
nm_help="print the contents of a boot image

    Print the contents of a boot image in a textual form.
    If not specified, the following path will be used for the boot image file:

        ${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.vm

    Use \"max nm -help\" to see what other options this command accepts."

function run_nm() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BootImagePrinter "$@" ${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.vm
}

#=======================================
# 'objecttree' command
#=======================================

objecttree_usage="[options]"
objecttree_help="print the causality spanning-tree of the object graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given object is in the image. This is useful when trying to reduce
    the size of the image.

    This tool requires an input *.tree file which is produced by specifying the
    -tree option when building the boot image.

    Use \"max objecttree -help\" to see what other options this command accepts."

function run_objecttree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BootImageObjectTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.object.tree "$@"
}

#=======================================
# 'methodtree' command
#=======================================

methodtree_usage="[options]"
methodtree_help="print the causality spanning-tree of the method graph in the boot image

    The causality spanning-tree allows one to audit the boot image with respect
    to why any given method is (or isn't) in the image. This is useful when
    trying to reduce the size of the image.

    This tool requires an input *.tree file which is produced by specifying the
    -tree option when building the boot image.

    Use \"max methodtree -help\" to see what other options this command accepts."

function run_methodtree() {
    run ${jvm_exe} -cp ${maxine_cp} com.sun.max.vm.prototype.BootImageMethodTree -in=${maxine_dir}/Native/generated/${MAXINE_OS}/maxine.method.tree "$@"
}

#=======================================
# 'test' command
#=======================================

test_usage="[options]"
test_help="run some or all of the Maxine tests

    The Maxine sources include a variety of tests that can be run by a
    special launcher. These include JUnit tests, VM micro tests, certain
    benchmark suites and output comparison tests, amongst others.

    Use \"max test -help\" to see what other options this command accepts."

function run_test() {
    if [ -d maxine-tester ]; then
	    rm -f `find maxine-tester | egrep '(.stdout|.stderr|.passed|.failed|.command)'`
	else
	    mkdir maxine-tester
    fi
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -output-dir=maxine-tester\
        -refvm="${jvm}" "-refvm-args=${jvm_args}" "$@" 2>&1 | tee maxine-tester/console
    result=${PIPESTATUS[0]}
    logs=test-logs.zip
    zip -q -r $logs maxine-tester/console `find maxine-tester | egrep '(.stdout|.stderr|.passed|.failed|.command)'`
    echo "Test log files are in $logs"
    exit $result
}

#=======================================
# 'gate' command
#=======================================

gate_usage="[options]"
gate_presets="-maxvm-config-alias=cpscps -fail-fast"
gate_help="run the tests used to validate a push to the stable Maxine repository

    If this commands exits with a 0 exit code, then the source code is in
    a state that would be accepted for integration into the main repository.

    This is simply a wrapper for invoking the \"max test\" command with the following
    preset options:

        ${gate_presets}

    Use \"max gate -help\" to see what other options this command accepts."

function run_gate() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -refvm="${jvm}" "-refvm-args=${jvm_args}" ${gate_presets} "$@"
}



#=======================================
# 'msgate' command
#=======================================

msgate_usage="[options]"
msgate_presets="-maxvm-config-alias=mscpscps -fail-fast"

msgate_testlist="-tests=output:"
sep=""
i=0
while [ ! $i == "8" ] ; do
  msgate_testlist="${msgate_testlist}${sep}GCTest$i"
  i=$[ $i + 1 ]
  sep="+"
done
i=1
while [ ! $i == "5" ] ; do
  msgate_testlist="${msgate_testlist}${sep}WeakReferenceTestt$i"
  i=$[ $i + 1 ]
done

msgate_presets="$msgate_presets $msgate_testlist"

msgate_help="run the tests used to validate a push to the stable Maxine repository using MS heap scheme

    If this commands exits with a 0 exit code, then the source code is in
    a state that would be accepted for integration into the main repository.

    This is simply a wrapper for invoking the \"max test\" command with the following
    preset options:

        ${msgate_presets}

    Use \"max msgate -help\" to see what other options this command accepts."

function run_msgate() {
    run ${jvm_exe} -cp ${maxine_cp} test.com.sun.max.vm.MaxineTester -refvm="${jvm}" "-refvm-args=${jvm_args}" ${msgate_presets} "$@"
}

#=======================================
# 'jrockitbm' command
#=======================================
jrockitbm_usage="[-all] [options]"
jrockitbm_help="run the jrockit benchmark suite
    Set -all to run all the benchmarks in succession
    otherwise specify a benchmark on the command line"

function run_jrockitbm() {
    if [ -z "$JROCKITBM_HOME" ]; then
        if [ -f /import/maxwell/jrockitbm/benchmarks.jar ]; then
            JROCKITBM_HOME=/import/maxwell/jrockitbm
        else
            echo "Need to set JROCKITBM_HOME environment variable to specify directory containing benchmarks.jar and tests.lst"
            exit 1
        fi
    fi
    all=0
    while [ "$1" != "" ]; do
        case $1 in
            -all )
                all=1
                shift
                break
                ;;
            * )
                break;
                ;;
        esac
        shift
    done

    if [ $all -eq 1 ]; then
        for i in `cat $JROCKITBM_HOME/tests.lst`
        do
            echo Running $i
            run ${maxine_vm} $MAXVM_OPTIONS -jar $JROCKITBM_HOME/benchmarks.jar $i "$@"
        done
    else
        run ${maxine_vm} $MAXVM_OPTIONS -jar $JROCKITBM_HOME/benchmarks.jar "$@"
    fi
}

#=======================================
# 'help' command
#=======================================

help_usage="[command]"
help_help="show help for a given command

    With no arguments, print a list of commands and short help for each command.

    Given a command name, print help for that command."

function run_help() {
    if [ $# -eq 0 ]; then
        usage
    else
        command="$1"

        run_command="run_${command}"
        command_type=`type -t ${run_command}`
        if [ "${command_type}" != "function" ]; then
            usage "max: unknown command '${command}'"
            exit 255
        fi

        usage_var="${command}_usage"
        usage=${!usage_var}

        help_var="${command}_help"
        help_type=`type -t ${help_var}`
        if [ "${help_type}" == "function" ]; then
            help=`$help_var`
        else
            help=${!help_var}
        fi
        if [ -z "$help" ]; then
            help="[no description available]"
        fi

        printf "max %s %s\n\n%s\n" "$command" "$usage" "$help"
    fi
}

#=======================================
# Main launcher
#=======================================

function usage() {
    if [ -n "$1" ]; then
        echo $1
    fi
    echo "Maxine Launcher"
    echo
    echo "available commands:"
    for run_command in `declare -Ff | grep 'run_' | grep -v '_override' | cut -d ' ' -f 3 | sort`; do
        command=${run_command/run_/}
        help=""
        help_var="${command}_help"
        help=${!help_var}
        if [ -z "$help" ]; then
            help="[no description available]"
        fi
        printf " %-16s %s\n" "$command" "$help" | head -n 1
    done
    config_gnu_make
    echo
    echo "global options:"
    echo " -v               enable verbose output "
    echo " -d               enable debug output"
    echo " -h               show launcher help"
    echo " -cp/p:<arg>      class path prefix"
    echo " -cp/a:<arg>      class path suffix"
    echo " -vmdir <path>    directory for VM executable, shared libraries boot image and related files"
    echo "                    (default: $MAXVM_DIR)"
    echo " -java_home <path> JDK installation directory (must be JDK 6 or later)"
    echo "                    (default: value of the JAVA_HOME environment variable)"
    echo " -jvm <path>      Java VM executable (default: bin/java under JAVA_HOME)"
    echo " -dbgport <num>   add following to Java VM arguments to enable attaching a debugger:"
    echo "                      -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=<num>"
    echo " -dbg             alias for '-dbgport $default_jvm_dbg_port'"
    echo " -J<args>         Java VM arguments (default: ${default_jvm_args})"
    echo " -J/p<args>       prefix Java VM arguments"
    echo " -J/a<args>       suffix Java VM arguments"
    echo " -maxine <path>   base directory of the Maxine code base"
    echo "                    (default: ${maxine_dir})"
    echo " -junit4 <cp>     class path for Junit 4 classes (default: value of JUNIT4_CP environment variable)"
    echo " -make <path>     path to GNU make executable (default: $make)"
}

if [ -n "${unknown_option}" ]; then
    usage "max: unknown global option '${unknown_option}'"
    exit 255
fi

if $show_help ; then
    usage ""
    exit 0
fi

if [ -z "${command}" ]; then
    usage ""
    exit 0
fi

run_command="run_${command}"
shift


command_type=`type -t ${run_command}`
if [ "${command_type}" != "function" ]; then
    usage "max: unknown command '${command}'"
    exit 255
fi

# Check for override
run_command_override="run_${command}_override"
command_override_type=`type -t ${run_command_override}`
if [ "${command_override_type}" == "function" ]; then
    $run_command_override $command_args
else
    $run_command $command_args
fi
