/*
 * Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.max.vm.ext.maxri;

import static com.sun.max.platform.Platform.*;
import static com.sun.max.vm.MaxineVM.*;
import static com.sun.max.vm.compiler.target.Stub.Type.*;
import static com.sun.max.vm.stack.VMFrameLayout.*;

import java.lang.reflect.*;
import java.util.*;
import java.util.concurrent.*;

import com.oracle.max.asm.target.amd64.*;
import com.oracle.max.cri.intrinsics.*;
import com.oracle.max.criutils.*;
import com.oracle.max.graal.cri.*;
import com.oracle.max.graal.graph.*;
import com.oracle.max.graal.nodes.*;
import com.sun.cri.ci.*;
import com.sun.cri.ci.CiTargetMethod.Call;
import com.sun.cri.ci.CiTargetMethod.DataPatch;
import com.sun.cri.ci.CiTargetMethod.Safepoint;
import com.sun.cri.ci.CiUtil.RefMapFormatter;
import com.sun.cri.ri.*;
import com.sun.max.annotate.*;
import com.sun.max.lang.*;
import com.sun.max.platform.*;
import com.sun.max.unsafe.*;
import com.sun.max.vm.*;
import com.sun.max.vm.actor.*;
import com.sun.max.vm.actor.holder.*;
import com.sun.max.vm.actor.member.*;
import com.sun.max.vm.bytecode.*;
import com.sun.max.vm.compiler.*;
import com.sun.max.vm.compiler.target.*;
import com.sun.max.vm.runtime.*;
import com.sun.max.vm.type.*;
import com.sun.max.vm.value.*;

/**
 * The {@code MaxRiRuntime} class implements the runtime interface needed by C1X.
 * This includes access to runtime features such as class and method representations,
 * constant pools, as well as some compiler tuning.
 */
public class MaxRuntime implements GraalRuntime {

    private static MaxRuntime instance = new MaxRuntime();

    private IntrinsicImpl.Registry intrinsicRegistry;

    public static MaxRuntime getInstance() {
        return instance;
    }

    private MaxRuntime() {
    }

    public void setIntrinsicRegistry(IntrinsicImpl.Registry registry) {
        intrinsicRegistry = registry;
    }

    /**
     * Gets the constant pool for a specified method.
     * @param method the compiler interface method
     * @return the compiler interface constant pool for the specified method
     */
    public RiConstantPool getConstantPool(RiResolvedMethod method) {
        return asClassMethodActor(method, "getConstantPool()").compilee().codeAttribute().cp;
    }

    /**
     * Checks whether the runtime requires inlining of the specified method.
     * @param method the method to inline
     * @return {@code true} if the method must be inlined; {@code false}
     * to allow the compiler to use its own heuristics
     */
    public boolean mustInline(RiResolvedMethod method) {
        ClassMethodActor methodActor = asClassMethodActor(method, "mustNotInline()");
        if (methodActor.isInline()) {
            return true;
        }

        // Remove the indirection through the "access$..." methods generated by the Java
        // source compiler for the purpose of implementing access to private fields between
        // in an inner-class relationship.
        if (MaxineVM.isHosted() && methodActor.isSynthetic() && methodActor.isStatic() && methodActor.name().startsWith("access$")) {
            return true;
        }

        return methodActor.isInline();
    }

    /**
     * Checks whether the runtime forbids inlining of the specified method.
     * @param method the method to inline
     * @return {@code true} if the runtime forbids inlining of the specified method;
     * {@code false} to allow the compiler to use its own heuristics
     */
    public boolean mustNotInline(RiResolvedMethod method) {
        final ClassMethodActor classMethodActor = asClassMethodActor(method, "mustNotInline()");
        if (classMethodActor.isNative()) {
            // Native stubs must not be inlined as there is a 1:1 relationship between
            // a NativeFunction and the TargetMethod from which it is called. This
            // required so that the exact position of the native function call
            // site can be recorded in the NativeFunction instance. The call site
            // is used by
            return true;
        }

        if (isHosted() && CompilationBroker.compileWithBaseline.contains(classMethodActor.holder().javaClass())) {
            // Ensure that methods intended to be compiled by the baseline compiler for the
            // purpose of a JTT test are not inlined.
            return true;
        }

        return classMethodActor.codeAttribute() == null || classMethodActor.isNeverInline();
    }

    /**
     * Checks whether the runtime forbids compilation of the specified method.
     * @param method the method to compile
     * @return {@code true} if the runtime forbids compilation of the specified method;
     * {@code false} to allow the compiler to compile the method
     */
    public boolean mustNotCompile(RiResolvedMethod method) {
        return false;
    }

    static ClassMethodActor asClassMethodActor(RiResolvedMethod method, String operation) {
        return (ClassMethodActor) method;
    }

    public int basicObjectLockOffsetInBytes() {
        // Must not be called if the size of the lock object is 0.
        throw new InternalError("should not reach here");
    }

    public int sizeOfBasicObjectLock() {
        // locks are not placed on the stack
        return 0;
    }

    public int codeOffset() {
        return CallEntryPoint.OPTIMIZED_ENTRY_POINT.offset();
    }

    @Override
    public String disassemble(RiResolvedMethod method) {
        ClassMethodActor classMethodActor = asClassMethodActor(method, "disassemble()");
        return classMethodActor.format("%f %R %H.%n(%P)") + String.format("%n%s", CodeAttributePrinter.toString(classMethodActor.codeAttribute()));
    }

    public String disassemble(byte[] code, long address) {
        final Platform platform = Platform.platform();
        HexCodeFile hcf = new HexCodeFile(code, address, platform.isa.name(), platform.wordWidth().numberOfBits);
        return HexCodeFileTool.toText(hcf);
    }

    @Override
    public String disassemble(final CiTargetMethod tm) {
        return disassemble(tm, null);
    }

    public String disassemble(CiTargetMethod ciTM, MaxTargetMethod maxTM) {
        byte[] code = maxTM == null ? Arrays.copyOf(ciTM.targetCode(), ciTM.targetCodeSize()) : maxTM.code();
        final Platform platform = Platform.platform();

        long startAddress = maxTM == null ? 0L : maxTM.codeStart().toLong();
        HexCodeFile hcf = new HexCodeFile(code, startAddress, platform.isa.name(), platform.wordWidth().numberOfBits);
        HexCodeFile.addAnnotations(hcf, ciTM.annotations());
        addExceptionHandlersComment(ciTM, hcf);
        CiRegister fp;
        int refMapToFPOffset;
        if (platform.isa == ISA.AMD64) {
            fp = AMD64.rsp;
            refMapToFPOffset = 0;
        } else {
            throw FatalError.unimplemented();
        }
        RefMapFormatter slotFormatter = new RefMapFormatter(target().arch, target().spillSlotSize, fp, refMapToFPOffset);
        for (Safepoint safepoint : ciTM.safepoints) {
            if (safepoint instanceof Call) {
                Call call = (Call) safepoint;
                if (call.debugInfo != null) {
                    hcf.addComment(Safepoints.safepointPosForCall(call.pcOffset, call.size), CiUtil.append(new StringBuilder(100), call.debugInfo, slotFormatter).toString());
                }
                addOperandComment(hcf, call.pcOffset, "{" + call.target + "}");
            } else {
                if (safepoint.debugInfo != null) {
                    hcf.addComment(safepoint.pcOffset, CiUtil.append(new StringBuilder(100), safepoint.debugInfo, slotFormatter).toString());
                }
                addOperandComment(hcf, safepoint.pcOffset, "{safepoint}");
            }
        }
        for (DataPatch site : ciTM.dataReferences) {
            hcf.addOperandComment(site.pcOffset, "{" + site.constant + "}");
        }

        return HexCodeFileTool.toText(hcf);
    }

    private static void addExceptionHandlersComment(CiTargetMethod tm, HexCodeFile hcf) {
        if (!tm.exceptionHandlers.isEmpty()) {
            String nl = HexCodeFile.NEW_LINE;
            StringBuilder buf = new StringBuilder("------ Exception Handlers ------").append(nl);
            for (CiTargetMethod.ExceptionHandler e : tm.exceptionHandlers) {
                buf.append("    ").
                    append(e.pcOffset).append(" -> ").
                    append(e.handlerPos).
                    append("  ").append(e.exceptionType == null ? "<any>" : e.exceptionType).
                    append(nl);
            }
            hcf.addComment(0, buf.toString());
        }
    }

    private static void addOperandComment(HexCodeFile hcf, int pos, String comment) {
        String oldValue = hcf.addOperandComment(pos, comment);
        assert oldValue == null : "multiple comments for operand of instruction at " + pos + ": " + comment + ", " + oldValue;
    }

    protected static class CachedInvocation {
        public CachedInvocation(Value[] args, CiConstant result) {
            this.args = args;
            this.result = result;
        }
        protected final Value[] args;
        protected final CiConstant result;
    }

    /**
     * Cache to speed up compile-time folding. This works as an invocation of a {@linkplain FOLD foldable}
     * method is guaranteed to be idempotent with respect its arguments.
     */
    private final ConcurrentHashMap<MethodActor, CachedInvocation> cache = new ConcurrentHashMap<MethodActor, CachedInvocation>();

    protected final boolean canonicalizeFoldableMethods() {
        return true;
    }

    public boolean isFoldable(RiResolvedMethod method) {
        if (canonicalizeFoldableMethods()) {
            MethodActor methodActor = (MethodActor) method;
            return Actor.isDeclaredFoldable(methodActor.flags());
        }
        return false;
    }

    @Override
    public CiConstant fold(RiResolvedMethod method, CiConstant[] args) {
        assert isFoldable(method);
        MethodActor methodActor = (MethodActor) method;
        Value[] values;
        int length = methodActor.descriptor().argumentCount(!methodActor.isStatic());
        assert length == args.length;
        if (length == 0) {
            values = Value.NONE;
        } else {
            values = new Value[length];
            for (int i = 0; i < length; ++i) {
                CiConstant arg = args[i];
                if (arg == null) {
                    return null;
                }
                Value value;
                Kind kind;
                if (!methodActor.isStatic() && i == 0) {
                    kind = methodActor.holder().kind;
                } else {
                    kind = methodActor.descriptor().parameterDescriptorAt(i - (methodActor.isStatic() ? 0 : 1)).toKind();
                }
                assert WordUtil.ciKind(kind, true) == arg.kind;
                // Checkstyle: stop
                switch (kind.asEnum) {
                    case BOOLEAN:   value = BooleanValue.from(arg.asBoolean()); break;
                    case BYTE:      value = ByteValue.from((byte) arg.asInt()); break;
                    case CHAR:      value = CharValue.from((char) arg.asInt()); break;
                    case DOUBLE:    value = DoubleValue.from(arg.asDouble()); break;
                    case FLOAT:     value = FloatValue.from(arg.asFloat()); break;
                    case INT:       value = IntValue.from(arg.asInt()); break;
                    case LONG:      value = LongValue.from(arg.asLong()); break;
                    case REFERENCE: value = ReferenceValue.from(arg.asObject()); break;
                    case SHORT:     value = ShortValue.from((short) arg.asInt()); break;
                    case WORD:      value = WordValue.from(Address.fromLong(arg.asLong())); break;
                    default: throw new IllegalArgumentException();
                }
                // Checkstyle: resume
                values[i] = value;
            }
        }

        if (!isHosted()) {
            CachedInvocation cachedInvocation = cache.get(methodActor);
            if (cachedInvocation != null && Arrays.equals(values, cachedInvocation.args)) {
                return cachedInvocation.result;
            }
        }

        try {
            // attempt to invoke the method
            CiConstant result = methodActor.invoke(values).asCiConstant();
            // set the result of this instruction to be the result of invocation
            notifyMethodFolded();

            if (!isHosted()) {
                cache.put(methodActor, new CachedInvocation(values, result));
            }

            return result;
            // note that for void, we will have a void constant with value null
        } catch (IllegalAccessException e) {
            // folding failed; too bad
        } catch (InvocationTargetException e) {
            // folding failed; too bad
        } catch (ExceptionInInitializerError e) {
            // folding failed; too bad
        }
        return null;
    }

    protected void notifyMethodFolded() {
    }

    public Object registerCompilerStub(CiTargetMethod ciTargetMethod, String name) {
        return new Stub(CompilerStub, name, ciTargetMethod);
    }

    public RiResolvedType getType(Class<?> javaClass) {
        return ClassActor.fromJava(javaClass);
    }

    public RiResolvedType asRiType(CiKind kind) {
        return getType(kind.toJavaClass());
    }

    public RiResolvedType getTypeOf(CiConstant constant) {
        if (constant.kind.isObject()) {
            Object o = constant.asObject();
            if (o != null) {
                return ClassActor.fromJava(o.getClass());
            }
        }
        return null;
    }

    public Object asJavaObject(CiConstant c) {
        return c.asObject();
    }

    public Class<?> asJavaClass(CiConstant c) {
        Object o = c.asObject();
        if (o instanceof Class) {
            return (Class) o;
        }
        return null;
    }

    @Override
    public Object asCallTarget(Object target) {
        if (target instanceof CiRuntimeCall) {
            target = MaxRuntimeCalls.getClassMethodActor((CiRuntimeCall) target);
        } else if (target == null) {
            target = CallTarget.TEMPLATE_CALL;
        }
        CallTarget.assertSupportedTarget(target);
        return target;
    }

    public boolean isExceptionType(RiResolvedType type) {
        return type.isSubtypeOf(getType(Throwable.class));
    }

    public boolean areConstantObjectsEqual(CiConstant x, CiConstant y) {
        assert x.kind.isObject() && y.kind.isObject();
        return x.asObject() == y.asObject();
    }

    public RiRegisterConfig getRegisterConfig(RiMethod method) {
        return vm().registerConfigs.getRegisterConfig((ClassMethodActor) method);
    }

    /**
     * Reserves a word at the bottom of the frame for saving an overwritten return address during the deoptimization process.
     */
    public int getCustomStackAreaSize() {
        return STACK_SLOT_SIZE;
    }

    public boolean supportsArrayIntrinsics() {
        return false;
    }

    public int getArrayLength(CiConstant array) {
        return Array.getLength(array.asObject());
    }

    public void lower(Node n, CiLoweringTool tool) {
        // TODO(tw): Implement lowering phase for Maxine.
    }

    public Graph<EntryPointNode> intrinsicGraph(RiResolvedMethod caller, int bci, RiResolvedMethod method, List< ? extends Node> parameters) {
        MethodActor maxMethod = (MethodActor) method;
        if (maxMethod.intrinsic() != null) {
            IntrinsicImpl impl = intrinsicRegistry.get(method);
            if (impl != null) {
                Graph<EntryPointNode> graph = new Graph<EntryPointNode>(new EntryPointNode(this));
                ValueNode[] args = new ValueNode[parameters.size()];
                for (int i = 0; i < args.length; i++) {
                    args[i] = graph.unique(new LocalNode(((ValueNode) parameters.get(i)).kind, 0, graph.start()));
                }
                ValueNode node = ((GraalIntrinsicImpl) impl).createHIR(this, graph, caller, method, args);
                if (node instanceof FixedNode) {
                    if (node instanceof FixedWithNextNode) {
                        graph.start().setNext((FixedNode) node);
                        ((FixedWithNextNode) node).setNext(graph.add(new ReturnNode(node)));
                    } else {
                        graph.start().setNext((FixedNode) node);
                    }
                } else {
                    graph.start().setNext(graph.add(new ReturnNode(node)));
                }
                return graph;
            } else {
                // TODO(ls) ignore these intrinsics for now...
                if (!IntrinsicIDs.UDIV.equals(method.intrinsic()) && !IntrinsicIDs.UREM.equals(method.intrinsic()) && !IntrinsicIDs.MEMBAR.equals(method.intrinsic())) {
                    throw new UnsupportedOperationException("intrinsic not implemented: " + maxMethod.intrinsic());
                }
            }
        }
        return null;
    }

    public long getMaxCallTargetOffset(CiRuntimeCall rtcall) {
        // TODO(tw): Implement for Maxine.
        return 0;
    }

    public RiResolvedMethod getRiMethod(Method reflectionMethod) {
        return MethodActor.fromJava(reflectionMethod);
    }

    public void installMethod(RiMethod method, CiTargetMethod code) {
        ClassMethodActor cma = (ClassMethodActor) method;
        synchronized (cma) {
            MaxTargetMethod tm = new MaxTargetMethod(cma, code, true);
            cma.compiledState = new Compilations(null, tm);
        }
    }
}
