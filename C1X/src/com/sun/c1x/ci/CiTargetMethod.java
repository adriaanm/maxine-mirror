/*
 * Copyright (c) 2009 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
package com.sun.c1x.ci;

/**
 * This interface represents the consumer of compiler output. When a client
 * of C1X requests a {@link com.sun.c1x.C1XCompilation compilation}, it must supply
 * an instance of this interface which consumes the output and produces
 * its own internal representation of compiled code.
 *
 * @author Thomas Wuerthinger
 * @author Ben L. Titzer
 */
public interface CiTargetMethod {

    /**
     * Sets the frame size in bytes. Does not include the return address pushed onto the
     * stack, if any.
     * @param size the size of the frame in bytes
     */
    void setFrameSize(int size);

    /**
     * Sets the machine that has been generated by the compiler.
     * @param code the machine code generated
     * @param size the size of the code within the array
     */
    void setMachineCode(byte[] code, int size);

    /**
     * Sets the data that has been generated by the compiler, which may
     * include binary representations of floating point and integer constants,
     * as well as object references.
     * @param data the data generated
     * @param size the size of the data within the array
     */
    void setData(byte[] data, int size);

    /**
     * Records the reference maps at a safepoint location in the code array.
     * @param codePosition the position in the code array
     * @param registerMap the bitmap that indicates which register
     * @param stackMap the bitmap that indicates which stack locations
     * are references
     */
    void recordReferenceMapAtSafepointInCode(int codePosition, boolean[] registerMap, boolean[] stackMap);

    /**
     * Records a reference map at a call location in the code array.
     * @param codePosition the position in the code array
     * @param stackMap the bitmap that indicates which stack locations
     * are references
     */
    void recordReferenceMapAtCallInCode(int codePosition, boolean[] stackMap);

    /**
     * Records a reference to the data section in the code section (e.g. to
     * load an integer or floating point constant).
     * @param codePosition the position in the code where the data reference occurs
     * @param dataPosition the position in the data which is referred to
     */
    void recordDataReferenceInCode(int codePosition, int dataPosition);

    /**
     * Records an object reference in the code section and the object that is
     * referred to.
     * @param codePosition the position in the code section
     * @param ref the object that is referenced
     */
    void recordObjectReferenceInCode(int codePosition, Object ref);

    /**
     * Records an external address in the code region (e.g. a call to a runtime
     * method or external method).
     * @param codePosition the position in the code array where the reference occurs
     */
    void recordExternalAddressInCode(int codePosition);

    /**
     * Records an exception handler for this method.
     * @param codePosStart the start position in the code that is covered by the handler (inclusive)
     * @param codePosEnd the end position covered by the handler (exclusive)
     * @param handlerPos the position of the handler
     * @param throwableType the type of exceptions handled by the handler
     */
    void recordExceptionHandler(int codePosStart, int codePosEnd, int handlerPos, CiType throwableType);

    /**
     * Attaches a {@link CiDeoptimizer deoptimizer} object to this method that will
     * handle deoptimization requests by the VM.
     * @param deoptimizer the deoptimizer object for this method
     */
    void attachDeoptimizer(CiDeoptimizer deoptimizer);

    /**
     * Finishes the compilation and installs the machine code into internal VM data structures.
     */
    void finish();
}
