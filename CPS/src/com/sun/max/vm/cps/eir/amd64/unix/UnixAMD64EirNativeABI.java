/*
 * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.vm.cps.eir.amd64.unix;

import static com.sun.max.vm.runtime.VMRegister.Role.*;

import com.sun.max.annotate.*;
import com.sun.max.asm.amd64.*;
import com.sun.max.collect.*;
import com.sun.max.vm.compiler.*;
import com.sun.max.vm.compiler.target.*;
import com.sun.max.vm.cps.eir.amd64.*;
import com.sun.max.vm.cps.target.*;
import com.sun.max.vm.jni.*;

/**
 * The native ABI used by the Solaris OS.
 *
 * @author Bernd Mathiske
 */
public class UnixAMD64EirNativeABI extends UnixAMD64EirCFunctionABI {

    @HOSTED_ONLY
    public UnixAMD64EirNativeABI() {
        super(false);
        final TargetABI<AMD64GeneralRegister64, AMD64XMMRegister> originalTargetABI = super.targetABI();
        final RegisterRoleAssignment<AMD64GeneralRegister64, AMD64XMMRegister> registerRoleAssignment =
            new RegisterRoleAssignment<AMD64GeneralRegister64, AMD64XMMRegister>(
                            originalTargetABI.registerRoleAssignment,
                            ABI_FRAME_POINTER,
                            originalTargetABI.registerRoleAssignment.integerRegisterActingAs(CPU_FRAME_POINTER));
        initTargetABI(new TargetABI<AMD64GeneralRegister64, AMD64XMMRegister>(originalTargetABI, registerRoleAssignment, CallEntryPoint.C_ENTRY_POINT));
    }

    /**
     * All the {@link #allocatableRegisters()} registers need to be saved across a call to a native function.
     * Even though the platform ABI may force a callee to save any non-caller saved registers, the
     * GC has no way of knowing where they were saved. As such, they need to be saved explicitly by the
     * {@linkplain NativeStubGenerator native stub} around the native function call. The reference map
     * generated by the compiler will inform the GC which of the saved registers contain references.
     */
    @Override
    public PoolSet<AMD64EirRegister> callerSavedRegisters() {
        return allocatableRegisters();
    }

}
