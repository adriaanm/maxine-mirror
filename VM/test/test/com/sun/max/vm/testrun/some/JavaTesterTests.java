/*
 * Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
/*
 * Copyright (c) 2007 Sun Microsystems, Inc. All rights reserved. Use is subject to license terms.
 */
package test.com.sun.max.vm.testrun.some;


/**
 * This class contains a collection of test methods that are generated by
 * the Java Tester. These test methods invoke the test classes' test methods
 * with the inputs specified in each test class's comment. These test methods
 * check for the correct output (or exception) for a given input.
 *
 * This class is separated from the JavaTesterRunScheme so that it can be compiled
 * with a different compiler than the JavaTesterRunScheme--typically, the JIT. Additionally,
 * the test classes themselves can be compiled with a different compiler, which allows
 * testing calls between code compiled by two different compilers.
 *
 * The code of each of these methods is generated by
 * {@link test.com.sun.max.vm.testrun.JavaTesterGenerator}.
 *
 * @author Ben L. Titzer
 */
public class JavaTesterTests {
// GENERATED TEST RUNS
    static void test_fail_BC_invokespecial01() {
        JavaTesterRunScheme.begin("test.fail.BC_invokespecial01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.fail.BC_invokespecial01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == !java.lang.NullPointerException
            try {
                runString = "test(1)";
                test.fail.BC_invokespecial01.test(1);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.NullPointerException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_fail_BC_invokevirtual02() {
        JavaTesterRunScheme.begin("test.fail.BC_invokevirtual02");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.fail.BC_invokevirtual02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == !java.lang.NullPointerException
            try {
                runString = "test(1)";
                test.fail.BC_invokevirtual02.test(1);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.NullPointerException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_fail_ClassLoader_loadClass01() {
        JavaTesterRunScheme.begin("test.fail.ClassLoader_loadClass01");
        String runString = null;
        try {
        // test(0) == class java.lang.String
            runString = "test(0)";
            if (!"class java.lang.String".equals(test.lang.ClassLoader_loadClass01.test(0))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == !java.lang.ClassNotFoundException
            try {
                runString = "test(1)";
                test.lang.ClassLoader_loadClass01.test(1);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.ClassNotFoundException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(2) == !java.lang.ClassNotFoundException
            try {
                runString = "test(2)";
                test.lang.ClassLoader_loadClass01.test(2);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.ClassNotFoundException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_fail_Class_forName03() {
        JavaTesterRunScheme.begin("test.fail.Class_forName03");
        String runString = null;
        try {
        // test(0) == !java.lang.ClassNotFoundException
            try {
                runString = "test(0)";
                test.lang.Class_forName03.test(0);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.ClassNotFoundException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(1) == class [Ljava.lang.String;
            runString = "test(1)";
            if (!"class [Ljava.lang.String;".equals(test.lang.Class_forName03.test(1))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == !java.lang.ClassNotFoundException
            try {
                runString = "test(2)";
                test.lang.Class_forName03.test(2);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.ClassNotFoundException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(3) == class [I
            runString = "test(3)";
            if (!"class [I".equals(test.lang.Class_forName03.test(3))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(4) == !java.lang.ClassNotFoundException
            try {
                runString = "test(4)";
                test.lang.Class_forName03.test(4);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.ClassNotFoundException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(5) == null
            runString = "test(5)";
            if (null != test.lang.Class_forName03.test(5)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_fail_Class_forName05() {
        JavaTesterRunScheme.begin("test.fail.Class_forName05");
        String runString = null;
        try {
        // test(0) == class java.lang.String
            runString = "test(0)";
            if (!"class java.lang.String".equals(test.lang.Class_forName05.test(0))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == class [Ljava.lang.String;
            runString = "test(1)";
            if (!"class [Ljava.lang.String;".equals(test.lang.Class_forName05.test(1))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(5) == null
            runString = "test(5)";
            if (null != test.lang.Class_forName05.test(5)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_fail_HP_StringFormat01() {
        JavaTesterRunScheme.begin("test.fail.HP_StringFormat01");
        String runString = null;
        try {
        // test("World") == Hello World
            runString = "test(\"World\")";
            if (!"Hello World".equals(test.fail.HP_StringFormat01.test("World"))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test("New World Order") == Hello New World Order
            runString = "test(\"New World Order\")";
            if (!"Hello New World Order".equals(test.fail.HP_StringFormat01.test("New World Order"))) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
// END GENERATED TEST RUNS

}
