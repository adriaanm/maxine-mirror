/*
 * Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
/*
 * Copyright (c) 2007 Sun Microsystems, Inc. All rights reserved. Use is subject to license terms.
 */
package test.com.sun.max.vm.testrun.some;

import com.sun.max.annotate.*;


/**
 * This class contains a collection of test methods that are generated by
 * the Java Tester. These test methods invoke the test classes' test methods
 * with the inputs specified in each test class's comment. These test methods
 * check for the correct output (or exception) for a given input.
 *
 * This class is separated from the JavaTesterRunScheme so that it can be compiled
 * with a different compiler than the JavaTesterRunScheme--typically, the JIT. Additionally,
 * the test classes themselves can be compiled with a different compiler, which allows
 * testing calls between code compiled by two different compilers.
 *
 * The code of each of these methods is generated by
 * {@link test.com.sun.max.vm.testrun.JavaTesterGenerator}.
 *
 * @author Ben L. Titzer
 */
@NO_INLINING
public class JavaTesterTests {
// GENERATED TEST RUNS
    static void test_threads_Monitor_contended01() {
        JavaTesterRunScheme.begin("test.threads.Monitor_contended01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Monitor_contended01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Monitor_notowner01() {
        JavaTesterRunScheme.begin("test.threads.Monitor_notowner01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Monitor_notowner01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Monitorenter01() {
        JavaTesterRunScheme.begin("test.threads.Monitorenter01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Monitorenter01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Monitorenter02() {
        JavaTesterRunScheme.begin("test.threads.Monitorenter02");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Monitorenter02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Object_wait01() {
        JavaTesterRunScheme.begin("test.threads.Object_wait01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Object_wait01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Object_wait01.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(3) == true
            runString = "test(3)";
            if (true != test.threads.Object_wait01.test(3)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(15) == true
            runString = "test(15)";
            if (true != test.threads.Object_wait01.test(15)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Object_wait02() {
        JavaTesterRunScheme.begin("test.threads.Object_wait02");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Object_wait02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Object_wait02.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == true
            runString = "test(2)";
            if (true != test.threads.Object_wait02.test(2)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Object_wait03() {
        JavaTesterRunScheme.begin("test.threads.Object_wait03");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Object_wait03.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Object_wait03.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == true
            runString = "test(2)";
            if (true != test.threads.Object_wait03.test(2)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Object_wait04() {
        JavaTesterRunScheme.begin("test.threads.Object_wait04");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Object_wait04.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Object_wait04.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == true
            runString = "test(2)";
            if (true != test.threads.Object_wait04.test(2)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(3) == true
            runString = "test(3)";
            if (true != test.threads.Object_wait04.test(3)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(4) == true
            runString = "test(4)";
            if (true != test.threads.Object_wait04.test(4)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(5) == true
            runString = "test(5)";
            if (true != test.threads.Object_wait04.test(5)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_currentThread01() {
        JavaTesterRunScheme.begin("test.threads.Thread_currentThread01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_currentThread01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_getState01() {
        JavaTesterRunScheme.begin("test.threads.Thread_getState01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_getState01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_getState02() {
        JavaTesterRunScheme.begin("test.threads.Thread_getState02");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_getState02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_holdsLock01() {
        JavaTesterRunScheme.begin("test.threads.Thread_holdsLock01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_holdsLock01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == false
            runString = "test(1)";
            if (false != test.threads.Thread_holdsLock01.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == !java.lang.NullPointerException
            try {
                runString = "test(2)";
                test.threads.Thread_holdsLock01.test(2);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.NullPointerException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(3) == false
            runString = "test(3)";
            if (false != test.threads.Thread_holdsLock01.test(3)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_isAlive01() {
        JavaTesterRunScheme.begin("test.threads.Thread_isAlive01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_isAlive01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_isInterrupted01() {
        JavaTesterRunScheme.begin("test.threads.Thread_isInterrupted01");
        String runString = null;
        try {
        // test(0) == false
            runString = "test(0)";
            if (false != test.threads.Thread_isInterrupted01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_isInterrupted02() {
        JavaTesterRunScheme.begin("test.threads.Thread_isInterrupted02");
        String runString = null;
        try {
        // test(0,0) == true
            runString = "test(0,0)";
            if (true != test.threads.Thread_isInterrupted02.test(0, 0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1,500) == true
            runString = "test(1,500)";
            if (true != test.threads.Thread_isInterrupted02.test(1, 500)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_isInterrupted03() {
        JavaTesterRunScheme.begin("test.threads.Thread_isInterrupted03");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_isInterrupted03.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_isInterrupted04() {
        JavaTesterRunScheme.begin("test.threads.Thread_isInterrupted04");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_isInterrupted04.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_join01() {
        JavaTesterRunScheme.begin("test.threads.Thread_join01");
        String runString = null;
        try {
        // test(0) == false
            runString = "test(0)";
            if (false != test.threads.Thread_join01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_join02() {
        JavaTesterRunScheme.begin("test.threads.Thread_join02");
        String runString = null;
        try {
        // test(0) == false
            runString = "test(0)";
            if (false != test.threads.Thread_join02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_join03() {
        JavaTesterRunScheme.begin("test.threads.Thread_join03");
        String runString = null;
        try {
        // test(0) == false
            runString = "test(0)";
            if (false != test.threads.Thread_join03.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_new01() {
        JavaTesterRunScheme.begin("test.threads.Thread_new01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_new01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Thread_new01.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == true
            runString = "test(2)";
            if (true != test.threads.Thread_new01.test(2)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(3) == true
            runString = "test(3)";
            if (true != test.threads.Thread_new01.test(3)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(4) == false
            runString = "test(4)";
            if (false != test.threads.Thread_new01.test(4)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_new02() {
        JavaTesterRunScheme.begin("test.threads.Thread_new02");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_new02.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Thread_new02.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(2) == true
            runString = "test(2)";
            if (true != test.threads.Thread_new02.test(2)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(3) == true
            runString = "test(3)";
            if (true != test.threads.Thread_new02.test(3)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(4) == false
            runString = "test(4)";
            if (false != test.threads.Thread_new02.test(4)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_setPriority01() {
        JavaTesterRunScheme.begin("test.threads.Thread_setPriority01");
        String runString = null;
        try {
        // test(0) == !java.lang.IllegalArgumentException
            try {
                runString = "test(0)";
                test.threads.Thread_setPriority01.test(0);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.IllegalArgumentException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        // test(1) == true
            runString = "test(1)";
            if (true != test.threads.Thread_setPriority01.test(1)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(5) == true
            runString = "test(5)";
            if (true != test.threads.Thread_setPriority01.test(5)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(10) == true
            runString = "test(10)";
            if (true != test.threads.Thread_setPriority01.test(10)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(11) == !java.lang.IllegalArgumentException
            try {
                runString = "test(11)";
                test.threads.Thread_setPriority01.test(11);
                JavaTesterRunScheme.end(runString, false);
                return;
            } catch (Throwable e) {
                if (e.getClass() != java.lang.IllegalArgumentException.class) {
                    JavaTesterRunScheme.end(runString, e);
                    return;
                }
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_sleep01() {
        JavaTesterRunScheme.begin("test.threads.Thread_sleep01");
        String runString = null;
        try {
        // test(10) == true
            runString = "test(10)";
            if (true != test.threads.Thread_sleep01.test(10)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(20) == true
            runString = "test(20)";
            if (true != test.threads.Thread_sleep01.test(20)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        // test(100) == true
            runString = "test(100)";
            if (true != test.threads.Thread_sleep01.test(100)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_start01() {
        JavaTesterRunScheme.begin("test.threads.Thread_start01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_start01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
    static void test_threads_Thread_yield01() {
        JavaTesterRunScheme.begin("test.threads.Thread_yield01");
        String runString = null;
        try {
        // test(0) == true
            runString = "test(0)";
            if (true != test.threads.Thread_yield01.test(0)) {
                JavaTesterRunScheme.end(runString, false);
                return;
            }
        } catch (Throwable t) {
            JavaTesterRunScheme.end(runString, t);
            return;
        }
        JavaTesterRunScheme.end(null, true);
    }
// END GENERATED TEST RUNS

}
