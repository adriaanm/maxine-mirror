/*
 * Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
package test.bench;

import java.io.*;
import java.util.*;

import com.sun.max.program.option.*;
import test.bench.util.*;
import test.bench.util.RunBench.RunType;
import test.bench.util.RunBench.SubArray;

/**
 * Simple main program that reads a file of data, assumed to be originally generated by {@link RunBench} with the
 * {@code test.bench.file} property, and reports the same analysed results as {@link RunBench}.
 *
 * @author Mick Jordan
 */

public class OfflineReport {

    private static final OptionSet options = new OptionSet(true);
    private static Option<String> fileOption = options.newStringOption("file", null, "file of data to be analyzed");
    private static Option<Boolean> outliersOption = options.newBooleanOption("outliers", false, "remove outlier values");


    public static void main(String[] args) {
        options.parseArguments(args).getArguments();
        String pathname = fileOption.getValue();
        if (pathname == null) {
            System.err.println("file argument must be present");
            System.exit(1);
        }
        System.setProperty(RunBench.WARMUP_COUNT_PROPERTY, "0");
        RunBench.getBenchProperties();
        try {
            final SubArray encapValues = readFile(pathname, RunType.ENCAP, 0, 0);
            final SubArray runValues = readFile(pathname, RunType.ACTUAL, 0, 0);
            RunBench.report(encapValues, runValues, "offline");
        } catch (IOException ex) {
            System.err.println(ex);
        }
    }

    private static SubArray readFile(String baseName, RunType runType, int threadId, int runId) throws IOException {
        BufferedReader r = null;
        ArrayList<Long> values = new ArrayList<Long>();
        try {
            r = new BufferedReader(new FileReader(RunBench.fileOutputName(baseName, runType, threadId, runId)));
            while (true) {
                final String line = r.readLine();
                if (line == null) {
                    break;
                }
                if (line.length() == 0 || line.charAt(0) == '#') {
                    continue;
                }
                values.add(Long.parseLong(line));
            }
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException ex) {

                }
            }
        }
        final long[] result = new long[values.size()];
        int i = 0;
        for (Long value : values) {
            result[i++] = value;
        }
        if (outliersOption.getValue()) {
            return RunBench.removeOutliers(result);
        }
        return new RunBench.SubArray(result, 0, result.length);
    }

}
