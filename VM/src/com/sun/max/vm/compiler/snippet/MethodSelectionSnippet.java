/*
 * Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.vm.compiler.snippet;

import com.sun.max.annotate.*;
import com.sun.max.unsafe.*;
import com.sun.max.vm.actor.holder.*;
import com.sun.max.vm.actor.member.*;
import com.sun.max.vm.compiler.*;
import com.sun.max.vm.object.*;
import com.sun.max.vm.reference.*;

/**
 * Snippets that implement fast receiver-dependent method selection at runtime.
 *
 * @author Bernd Mathiske
 */
public abstract class MethodSelectionSnippet extends Snippet {

    private MethodSelectionSnippet() {
        super();
    }

    public static final class SelectVirtualMethod extends Snippet {
        /**
         * Meta-evaluates only up to the dynamic method actor, not all the way to the target method's entry point.
         */
        public static VirtualMethodActor quasiFold(Object receiver, VirtualMethodActor declaredMethod) {
            if (receiver == null) {
                throw new NullPointerException();
            }
            if (declaredMethod.isPrivate()) {
                return declaredMethod;
            }
            final Class receiverClass = receiver.getClass();
            final ClassActor classActor = ClassActor.fromJava(receiverClass);
            return classActor.getVirtualMethodActorByVTableIndex(declaredMethod.vTableIndex());
        }

        @INLINE
        public static Word selectNonPrivateVirtualMethod(Object receiver, VirtualMethodActor declaredMethod) {
            final Hub hub = ObjectAccess.readHub(receiver);
            return hub.getWord(declaredMethod.vTableIndex());
        }

        @SNIPPET
        @INLINE(afterSnippetsAreCompiled = true)
        public static Word selectVirtualMethod(Object receiver, VirtualMethodActor declaredMethod) {
            if (declaredMethod.isPrivate()) {
                // private methods do not have a vtable index, so dynamically compile the receiver.
                // this typically does not occur with javac generated bytecodes
                return CompilationScheme.Static.compile(declaredMethod, CallEntryPoint.VTABLE_ENTRY_POINT);
            }
            return selectNonPrivateVirtualMethod(receiver, declaredMethod);
        }

        public static final SelectVirtualMethod SNIPPET = new SelectVirtualMethod();
    }

    public static final class SelectInterfaceMethod extends MethodSelectionSnippet {
        public static final SelectInterfaceMethod SNIPPET = new SelectInterfaceMethod();

        @SNIPPET
        @INLINE(afterSnippetsAreCompiled = true)
        public static Word selectInterfaceMethod(Object receiver, InterfaceMethodActor interfaceMethod) {
            final Hub hub = ObjectAccess.readHub(receiver);
            final InterfaceActor interfaceActor = UnsafeCast.asInterfaceActor(interfaceMethod.holder());
            final int interfaceIndex = hub.getITableIndex(interfaceActor.id);
            return hub.getWord(interfaceIndex + interfaceMethod.iIndexInInterface());
        }
    }

    public static final class ReadHub extends MethodSelectionSnippet {

        @SNIPPET
        @INLINE(afterSnippetsAreCompiled = true)
        public static Reference readHub(Object object) {
            return Reference.fromJava(ObjectAccess.readHub(object));
        }
        public static final ReadHub SNIPPET = new ReadHub();
    }
}
