/*
 * Copyright (c) 2009 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
package com.sun.max.vm.compiler.c1x;

import com.sun.max.vm.compiler.target.TargetMethod;
import com.sun.max.vm.compiler.target.amd64.AMD64TargetMethod;
import com.sun.max.vm.actor.member.ClassMethodActor;
import com.sun.max.vm.stack.JavaStackFrameLayout;
import com.sun.max.vm.stack.OptoStackFrameLayout;
import com.sun.max.asm.InstructionSet;
import com.sun.max.unsafe.Word;

/**
 * This class implements a {@link com.sun.max.vm.compiler.target.TargetMethod target method} for
 * the Maxine VM that represents a compiled method generated by C1X.
 *
 * @author Ben L. Titzer
 */
public class C1XTargetMethod extends TargetMethod {

    public C1XTargetMethod(ClassMethodActor classMethodActor) {
        super(classMethodActor);
    }

    @Override
    public JavaStackFrameLayout stackFrameLayout() {
        return new OptoStackFrameLayout(frameSize());
    }

    @Override
    public boolean areReferenceMapsFinalized() {
        return true;
    }

    @Override
    public InstructionSet instructionSet() {
        return InstructionSet.AMD64;
    }

    @Override
    public final int registerReferenceMapSize() {
        return AMD64TargetMethod.registerReferenceMapSize();
    }

    @Override
    public final void patchCallSite(int callOffset, Word callEntryPoint) {
        AMD64TargetMethod.patchCallSite(this, callOffset, callEntryPoint);
    }

    @Override
    public void forwardTo(TargetMethod newTargetMethod) {
        AMD64TargetMethod.forwardTo(this, newTargetMethod);
    }
}
