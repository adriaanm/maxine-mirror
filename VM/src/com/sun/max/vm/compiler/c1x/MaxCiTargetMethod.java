/*
 * Copyright (c) 2009 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
package com.sun.max.vm.compiler.c1x;

import com.sun.c1x.ci.CiTargetMethod;
import com.sun.c1x.ci.CiType;
import com.sun.c1x.ci.CiDeoptimizer;
import com.sun.max.vm.actor.member.ClassMethodActor;

import java.util.ArrayList;
import java.util.List;

/**
 * This class implements the consumer of C1X compiler's output that creates the appropriate
 * Maxine data structures and installs them into the code region.
 *
 * @author Ben L. Titzer
 */
public class MaxCiTargetMethod implements CiTargetMethod {

    static class SafepointRefMap {
        final int codePos;
        final boolean[] registerMap;
        final boolean[] stackMap;

        SafepointRefMap(int codePos, boolean[] registerMap, boolean[] stackMap) {
            this.codePos = codePos;
            this.registerMap = registerMap;
            this.stackMap = stackMap;
        }
    }

    static class CallRefMap {
        final int codePos;
        final boolean[] registerMap;

        CallRefMap(int codePos, boolean[] registerMap) {
            this.codePos = codePos;
            this.registerMap = registerMap;
        }
    }

    static class CallPatchSite {
        final int codePos;

        CallPatchSite(int codePos) {
            this.codePos = codePos;
        }
    }

    static class DataPatchSite {
        final int codePos;
        final int dataPos;

        DataPatchSite(int codePos, int dataPos) {
            this.codePos = codePos;
            this.dataPos = dataPos;
        }
    }

    static class RefPatchSite {
        final int codePos;
        final Object referrent;
        Object[] array;
        int index;

        RefPatchSite(int codePos, Object referrent) {
            this.codePos = codePos;
            this.referrent = referrent;
        }
    }

    public final ClassMethodActor classMethodActor;

    int frameSize;
    int registerSize;
    byte[] machineCode;
    int machineCodeSize;
    byte[] data;
    int dataSize;
    int stops;

    final List<SafepointRefMap> safepointRefMaps = new ArrayList<SafepointRefMap>();
    final List<CallRefMap> callRefMaps = new ArrayList<CallRefMap>();
    final List<CallPatchSite> callPatchSites = new ArrayList<CallPatchSite>();
    final List<DataPatchSite> dataPatchSites = new ArrayList<DataPatchSite>();
    final List<RefPatchSite> refPatchSites = new ArrayList<RefPatchSite>();

    /**
     * Creates a new compiler interface target method for the specified class method actor.
     *
     * @param classMethodActor the class method actor
     */
    public MaxCiTargetMethod(ClassMethodActor classMethodActor) {
        this.classMethodActor = classMethodActor;
    }


    /**
     * Sets the frame size in bytes. Does not include the return address pushed onto the
     * stack, if any.
     *
     * @param size the size of the frame in bytes
     */
    public void setFrameSize(int size) {
        frameSize = size;
    }

    /**
     * Sets the machine that has been generated by the compiler.
     *
     * @param code the machine code generated
     * @param size the size of the code within the array
     */
    public void setMachineCode(byte[] code, int size) {
        machineCode = code;
        machineCodeSize = size;
    }

    /**
     * Sets the data that has been generated by the compiler, which may
     * include binary representations of floating point and integer constants,
     * as well as object references.
     *
     * @param data the data generated
     * @param size the size of the data within the array
     */
    public void setData(byte[] data, int size) {
        this.data = data;
        this.dataSize = size;
    }

    /**
     * Records the reference maps at a safepoint location in the code array.
     *
     * @param codePosition the position in the code array
     * @param registerMap  the bitmap that indicates which registers are references
     * @param stackMap     the bitmap that indicates which stack locations
     *                     are references
     */
    public void recordReferenceMapAtSafepointInCode(int codePosition, boolean[] registerMap, boolean[] stackMap) {
        safepointRefMaps.add(new SafepointRefMap(codePosition, registerMap, stackMap));
        stops++;
        if (registerSize == 0) {
            registerSize = registerMap.length;
        } else {
            assert registerSize == registerMap.length;
        }
        assert stackMap.length == frameSize;
    }

    /**
     * Records a reference map at a call location in the code array.
     *
     * @param codePosition the position in the code array
     * @param stackMap     the bitmap that indicates which stack locations
     *                     are references
     */
    public void recordReferenceMapAtCallInCode(int codePosition, boolean[] stackMap) {
        callRefMaps.add(new CallRefMap(codePosition, stackMap));
        stops++;
        assert stackMap.length == frameSize;
    }

    /**
     * Records a reference to the data section in the code section (e.g. to
     * load an integer or floating point constant).
     *
     * @param codePosition the position in the code where the data reference occurs
     * @param dataPosition the position in the data which is referred to
     */
    public void recordDataReferenceInCode(int codePosition, int dataPosition) {
        dataPatchSites.add(new DataPatchSite(codePosition, dataPosition));
    }

    /**
     * Records an object reference in the code section and the object that is
     * referred to.
     *
     * @param codePosition the position in the code section
     * @param ref          the object that is referenced
     */
    public void recordObjectReferenceInCode(int codePosition, Object ref) {
        refPatchSites.add(new RefPatchSite(codePosition, ref));
    }

    /**
     * Records an external address in the code region (e.g. a call to a runtime
     * method or external method).
     *
     * @param codePosition the position in the code array where the reference occurs
     */
    public void recordExternalAddressInCode(int codePosition) {
        callPatchSites.add(new CallPatchSite(codePosition));
    }

    /**
     * Records an exception handler for this method.
     *
     * @param codePosStart  the start position in the code that is covered by the handler (inclusive)
     * @param codePosEnd    the end position covered by the handler (exclusive)
     * @param handlerPos    the position of the handler
     * @param throwableType the type of exceptions handled by the handler
     */
    public void recordExceptionHandler(int codePosStart, int codePosEnd, int handlerPos, CiType throwableType) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    /**
     * Attaches a {@link com.sun.c1x.ci.CiDeoptimizer deoptimizer} object to this method that will
     * handle deoptimization requests by the VM.
     *
     * @param deoptimizer the deoptimizer object for this method
     */
    public void attachDeoptimizer(CiDeoptimizer deoptimizer) {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    /**
     * Finishes the compilation and installs the machine code into internal VM data structures.
     */
    public void finish() {
        for (SafepointRefMap refMap : safepointRefMaps) {
            // TODO
        }
        for (CallPatchSite callPatch : callPatchSites) {
            // TODO
        }
        for (CallRefMap refMap : callRefMaps) {
            // TODO
        }
        for (DataPatchSite dataPatch : dataPatchSites) {
            // TODO
        }
        for (RefPatchSite refPatch : refPatchSites) {
            // TODO
        }
    }
}
