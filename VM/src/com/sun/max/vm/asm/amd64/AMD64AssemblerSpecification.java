/*
 * Copyright (c) 2007 Sun Microsystems, Inc.  All rights reserved.
 *
 * Sun Microsystems, Inc. has intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation, these intellectual property
 * rights may include one or more of the U.S. patents listed at http://www.sun.com/patents and one or
 * more additional patents or pending patent applications in the U.S. and in other countries.
 *
 * U.S. Government Rights - Commercial software. Government users are subject to the Sun
 * Microsystems, Inc. standard license agreement and applicable provisions of the FAR and its
 * supplements.
 *
 * Use is subject to license terms. Sun, Sun Microsystems, the Sun logo, Java and Solaris are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All SPARC trademarks
 * are used under license and are trademarks or registered trademarks of SPARC International, Inc. in the
 * U.S. and other countries.
 *
 * UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open
 * Company, Ltd.
 */
/*VCSID=32a5f903-bdab-4508-bff7-8a2661c83c33*/
package com.sun.max.vm.asm.amd64;

import com.sun.max.annotate.*;
import com.sun.max.asm.*;
import com.sun.max.asm.amd64.*;
import com.sun.max.asm.x86.*;
import com.sun.max.ide.*;

/**
 * Specifies the AMD64 assembler functionality used by the VM. This interface exists solely for the purpose of trimming
 * the generated methods in {@link AMD64AssemblerMethods} to include only those required by the VM. To do the trimming, perform
 * the following steps:
 * <ol>
 * <li>Make sure that all the required methods are declared above the declaration of {@link Generator}.</li>
 * <li>Comment out all the methods declared below {@link Generator}.</li>
 * <li>Run {@link Generator}.</li>
 * <li>Refresh/recompile the MaxineVM sources.</li>
 * </ol>
 * 
 * @author Doug Simon
 */
@PROTOTYPE_ONLY
interface AMD64AssemblerSpecification {

    void add(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void add(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void add(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void add(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void add(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void add(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void add_EAX(int imm32);
    void add_RAX(int imm32);
    void addl(AMD64GeneralRegister32 destination, byte imm8);
    void addl(AMD64GeneralRegister32 destination, int imm32);
    void addl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void addl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void addl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void addl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void addq(AMD64GeneralRegister64 destination, byte imm8);
    void addq(AMD64GeneralRegister64 destination, int imm32);
    void addq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void addq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void addq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void addq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void addsd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void addsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void addsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void addss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void addss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void addss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void and(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void and(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void and(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void and(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void and(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void and(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void and_EAX(int imm32);
    void and_RAX(int imm32);
    void andl(AMD64GeneralRegister32 destination, byte imm8);
    void andl(AMD64GeneralRegister32 destination, int imm32);
    void andl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void andl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void andl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void andl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void andq(AMD64GeneralRegister64 destination, byte imm8);
    void andq(AMD64GeneralRegister64 destination, int imm32);
    void andq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void andq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void andq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void andq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void call(AMD64GeneralRegister64 destination);
    void call(byte disp8, AMD64IndirectRegister64 destination);
    void call(final Label label);
    void call(int disp32, AMD64IndirectRegister64 destination);
    void call(int rel32);
    void cdq();
    void cmova(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmova(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmova(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovb(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmovb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmovb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmove(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmove(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmove(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmovg(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmovg(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovge(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmovge(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmovge(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovl(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmovl(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmovl(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovle(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    // void cmovle(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    // void cmovle(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmovp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmovp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmovp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void cmp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void cmp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cmp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void cmp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void cmp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void cmp_EAX(int imm32);
    void cmp_RAX(int imm32);
    void cmpl(AMD64GeneralRegister32 destination, byte imm8);
    void cmpl(AMD64GeneralRegister32 destination, int imm32);
    void cmpl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void cmpl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void cmpl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void cmpl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void cmpq(AMD64GeneralRegister64 destination, byte imm8);
    void cmpq(AMD64GeneralRegister64 destination, int imm32);
    void cmpq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void cmpq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void cmpq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void cmpq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void cmpsd(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison);
    void cmpsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
    void cmpsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
    void cmpss(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison);
    void cmpss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
    void cmpss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
    void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
    void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
    void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void comisd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void comisd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void comisd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void comiss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void comiss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void comiss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cqo();
    void cvtsd2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
    void cvtsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsd2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source);
    void cvtsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsd2ss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void cvtsd2ss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsd2ss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsi2sdl(AMD64XMMRegister destination, AMD64GeneralRegister32 source);
    void cvtsi2sdl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsi2sdl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsi2sdq(AMD64XMMRegister destination, AMD64GeneralRegister64 source);
    void cvtsi2sdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsi2sdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsi2ssl(AMD64XMMRegister destination, AMD64GeneralRegister32 source);
    void cvtsi2ssl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsi2ssl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtsi2ssq(AMD64XMMRegister destination, AMD64GeneralRegister64 source);
    void cvtsi2ssq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtsi2ssq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtss2sd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void cvtss2sd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtss2sd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void cvtss2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
    void cvtss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtss2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cvtss2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source);
    void cvtss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvtss2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void cvttsd2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
    void cvttsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cvttsd2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source);
    void cvttsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvttsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void cvttss2si(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
    void cvttss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvttss2si(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void cvttss2si(AMD64GeneralRegister64 destination, AMD64XMMRegister source);
    void cvttss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void cvttss2si(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void divq(AMD64GeneralRegister64 destination);
    void divq(byte disp8, AMD64IndirectRegister64 destination);
    void divq(int disp32, AMD64IndirectRegister64 destination);
    void divsd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void divsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void divsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void divss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void divss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void divss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void enter(short imm16, byte imm8);
    void idivl(AMD64GeneralRegister32 destination);
    void idivl(byte disp8, AMD64IndirectRegister64 destination);
    void idivl(int disp32, AMD64IndirectRegister64 destination);
    void idivq(AMD64GeneralRegister64 destination);
    void idivq(byte disp8, AMD64IndirectRegister64 destination);
    void idivq(int disp32, AMD64IndirectRegister64 destination);
    void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8);
    void imul(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, int imm32);
    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
    void imul(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, int imm32);
    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void imull(AMD64GeneralRegister32 destination);
    void imulq(AMD64GeneralRegister64 destination);
    void int_3();
    void jb(final Label label);
    void jb(int rel32);
    void jbe(final Label label);
    void jbe(int rel32);
    void jl(byte rel8);
    void jl(final Label label);
    void jl(int rel32);
    void jle(byte rel8);
    void jle(final Label label);
    void jle(int rel32);
    void jmp(AMD64GeneralRegister64 destination);
    void jmp(byte disp8, AMD64IndirectRegister64 destination);
    void jmp(byte rel8);
    void jmp(final Label label);
    void jmp(int disp32, AMD64IndirectRegister64 destination);
    void jmp(int rel32);
    void jnb(final Label label);
    void jnb(int rel32);
    void jnbe(final Label label);
    void jnbe(int rel32);
    void jnl(byte rel8);
    void jnl(final Label label);
    void jnl(int rel32);
    void jnle(byte rel8);
    void jnle(final Label label);
    void jnle(int rel32);
    void jnz(byte rel8);
    void jnz(final Label label);
    void jnz(int rel32);
    void jz(byte rel8);
    void jz(final Label label);
    void jz(int rel32);
    void lea(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void lea(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void lea(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void leave();
    void lfence();
    void lock();
    void mfence();
    void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
    void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
    void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
    void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
    void mov(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void mov(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void mov(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void mov(AMD64GeneralRegister32 register, int imm32);
    void mov(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void mov(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void mov(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void mov(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void mov(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void mov(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void mov(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void mov(AMD64GeneralRegister64 register, long imm64);
    void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
    void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void mov(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
    void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
    void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
    void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
    void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
    void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
    void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void mov(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
    void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
    void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
    void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
    void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
    void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
    void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void mov(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
    void movb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
    void movb(AMD64IndirectRegister64 destination, byte imm8);
    void movb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
    void movb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void movb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
    void movb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void movdl(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
    void movdl(AMD64XMMRegister register, AMD64GeneralRegister32 scratch);
    void movdl(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movdl(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movdq(AMD64GeneralRegister64 destination, AMD64XMMRegister source);
    void movdq(AMD64XMMRegister register, AMD64GeneralRegister64 scratchRegister);
    void movdq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movdq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
    void movl(AMD64GeneralRegister32 scratch, int floatToInt);
    void movl(AMD64IndirectRegister64 destination, int imm32);
    void movl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
    void movl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void movl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
    void movl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void movq(AMD64GeneralRegister64 destination, int imm32);
    void movsd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movsd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
    void movsd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void movsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void movsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void movsd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movsd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movsd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movsd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movss(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movss(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
    void movss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void movss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void movss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void movss(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movss(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movss(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
    void movss(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
    void movsxb(AMD64GeneralRegister32 destination, AMD64GeneralRegister8 source);
    void movsxb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void movsxb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void movsxb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movsxb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movsxb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void movsxd(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxd(AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source);
    void movsxd(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movsxd(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void movsxw(AMD64GeneralRegister32 destination, AMD64GeneralRegister16 source);
    void movsxw(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void movsxw(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void movsxw(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxw(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movsxw(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxw(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movsxw(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxw(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void movw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
    void movw(AMD64IndirectRegister64 destination, short imm16);
    void movw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
    void movw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
    void movw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
    void movw(int disp32, AMD64IndirectRegister64 destination, short imm16);
    void movzxb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movzxb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movzxb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void movzxd(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxd(AMD64GeneralRegister64 destination, AMD64GeneralRegister32 source);
    void movzxd(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movzxd(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxd(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movzxd(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxd(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void movzxw(AMD64GeneralRegister32 destination, AMD64GeneralRegister16 source);
    void movzxw(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void movzxw(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void movzxw(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxw(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movzxw(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxw(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void movzxw(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movzxw(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void mulsd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void mulsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void mulsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void mulss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void mulss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void mulss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void negq(AMD64GeneralRegister64 destination);
    void negq(byte disp8, AMD64IndirectRegister64 destination);
    void negq(int disp32, AMD64IndirectRegister64 destination);
    void nop();
    void notq(AMD64GeneralRegister64 destination);
    void notq(byte disp8, AMD64IndirectRegister64 destination);
    void notq(int disp32, AMD64IndirectRegister64 destination);
    void or(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void or(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void or(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void or(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void or(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void or(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void or_EAX(int imm32);
    void or_RAX(int imm32);
    void orl(AMD64GeneralRegister32 destination, byte imm8);
    void orl(AMD64GeneralRegister32 destination, int imm32);
    void orl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void orl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void orl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void orl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void orq(AMD64GeneralRegister64 destination, byte imm8);
    void orq(AMD64GeneralRegister64 destination, int imm32);
    void orq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void orq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void orq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void orq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void pop(AMD64GeneralRegister64 register);
    void push(AMD64GeneralRegister64 register);
    void ret();
    void ret(short imm16);
    void rip_add(AMD64GeneralRegister32 destination, int rel32);
    void rip_add(AMD64GeneralRegister64 destination, int rel32);
    void rip_add(final AMD64GeneralRegister32 destination, final Label label);
    void rip_add(final AMD64GeneralRegister64 destination, final Label label);
    void rip_addsd(AMD64XMMRegister destination, int rel32);
    void rip_addsd(final AMD64XMMRegister destination, final Label label);
    void rip_addss(AMD64XMMRegister destination, int rel32);
    void rip_addss(final AMD64XMMRegister destination, final Label label);
    void rip_and(AMD64GeneralRegister32 destination, int rel32);
    void rip_and(AMD64GeneralRegister64 destination, int rel32);
    void rip_and(final AMD64GeneralRegister32 destination, final Label label);
    void rip_and(final AMD64GeneralRegister64 destination, final Label label);
    void rip_call(final Label label);
    void rip_call(int rel32);
    void rip_cmova(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmova(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovb(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovb(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmove(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmove(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovg(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovg(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovge(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovge(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovl(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovl(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovle(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovle(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmovp(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmovp(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmp(AMD64GeneralRegister32 destination, int rel32);
    void rip_cmp(AMD64GeneralRegister64 destination, int rel32);
    void rip_cmp(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cmp(final AMD64GeneralRegister64 destination, final Label label);
    void rip_cmpsd(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison);
    void rip_cmpsd(final AMD64XMMRegister destination, final Label label, final AMD64XMMComparison amd64xmmcomparison);
    void rip_cmpss(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison);
    void rip_cmpss(final AMD64XMMRegister destination, final Label label, final AMD64XMMComparison amd64xmmcomparison);
    void rip_comisd(AMD64XMMRegister destination, int rel32);
    void rip_comisd(final AMD64XMMRegister destination, final Label label);
    void rip_comiss(AMD64XMMRegister destination, int rel32);
    void rip_comiss(final AMD64XMMRegister destination, final Label label);
    void rip_cvtsd2si(AMD64GeneralRegister32 destination, int rel32);
    void rip_cvtsd2si(AMD64GeneralRegister64 destination, int rel32);
    void rip_cvtsd2si(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cvtsd2si(final AMD64GeneralRegister64 destination, final Label label);
    void rip_cvtsd2ss(AMD64XMMRegister destination, int rel32);
    void rip_cvtsd2ss(final AMD64XMMRegister destination, final Label label);
    void rip_cvtsi2sdl(AMD64XMMRegister destination, int rel32);
    void rip_cvtsi2sdl(final AMD64XMMRegister destination, final Label label);
    void rip_cvtsi2sdq(AMD64XMMRegister destination, int rel32);
    void rip_cvtsi2sdq(final AMD64XMMRegister destination, final Label label);
    void rip_cvtsi2ssl(AMD64XMMRegister destination, int rel32);
    void rip_cvtsi2ssl(final AMD64XMMRegister destination, final Label label);
    void rip_cvtsi2ssq(AMD64XMMRegister destination, int rel32);
    void rip_cvtsi2ssq(final AMD64XMMRegister destination, final Label label);
    void rip_cvtss2sd(AMD64XMMRegister destination, int rel32);
    void rip_cvtss2sd(final AMD64XMMRegister destination, final Label label);
    void rip_cvtss2si(AMD64GeneralRegister32 destination, int rel32);
    void rip_cvtss2si(AMD64GeneralRegister64 destination, int rel32);
    void rip_cvtss2si(final AMD64GeneralRegister32 destination, final Label label);
    void rip_cvtss2si(final AMD64GeneralRegister64 destination, final Label label);
    void rip_cvttsd2si(AMD64GeneralRegister32 destination, Label source);
    void rip_cvttsd2si(AMD64GeneralRegister64 destination, Label sourceLiteralLabel);
    void rip_cvttss2si(AMD64GeneralRegister32 destination, Label sourceLiteralLabel);
    void rip_cvttss2si(AMD64GeneralRegister64 destination, Label sourceLiteralLabel);
    void rip_divq(final Label label);
    void rip_divq(int rel32);
    void rip_divsd(AMD64XMMRegister destination, int rel32);
    void rip_divsd(final AMD64XMMRegister destination, final Label label);
    void rip_divss(AMD64XMMRegister destination, int rel32);
    void rip_divss(final AMD64XMMRegister destination, final Label label);
    void rip_idivl(final Label label);
    void rip_idivl(int rel32);
    void rip_idivq(final Label label);
    void rip_idivq(int rel32);
    void rip_imul(AMD64GeneralRegister32 destination, int rel32);
    void rip_imul(AMD64GeneralRegister64 destination, int rel32);
    void rip_imul(final AMD64GeneralRegister32 destination, final Label label);
    void rip_imul(final AMD64GeneralRegister64 destination, final Label label);
    void rip_jmp(final Label label);
    void rip_jmp(int rel32);
    void rip_lea(AMD64GeneralRegister64 destination, int rel32);
    void rip_lea(final AMD64GeneralRegister64 destination, final Label label);
    void rip_mov(AMD64GeneralRegister64 destination, int rel32);
    void rip_mov(final AMD64GeneralRegister64 destination, final Label label);
    void rip_movsd(AMD64XMMRegister destination, int rel32);
    void rip_movsd(final AMD64XMMRegister destination, final Label label);
    void rip_movss(AMD64XMMRegister destination, int rel32);
    void rip_movss(final AMD64XMMRegister destination, final Label label);
    void rip_movsxb(AMD64GeneralRegister32 destination, int rel32);
    void rip_movsxb(final AMD64GeneralRegister32 destination, final Label label);
    void rip_movsxd(AMD64GeneralRegister64 destination, int rel32);
    void rip_movsxd(final AMD64GeneralRegister64 destination, final Label label);
    void rip_movsxw(AMD64GeneralRegister32 destination, int rel32);
    void rip_movsxw(final AMD64GeneralRegister32 destination, final Label label);
    void rip_movzxd(AMD64GeneralRegister64 destination, int rel32);
    void rip_movzxd(final AMD64GeneralRegister64 destination, final Label label);
    void rip_movzxw(AMD64GeneralRegister32 destination, int rel32);
    void rip_movzxw(final AMD64GeneralRegister32 destination, final Label label);
    void rip_mulsd(AMD64XMMRegister destination, int rel32);
    void rip_mulsd(final AMD64XMMRegister destination, final Label label);
    void rip_mulss(AMD64XMMRegister destination, int rel32);
    void rip_mulss(final AMD64XMMRegister destination, final Label label);
    void rip_or(AMD64GeneralRegister32 destination, int rel32);
    void rip_or(AMD64GeneralRegister64 destination, int rel32);
    void rip_or(final AMD64GeneralRegister32 destination, final Label label);
    void rip_or(final AMD64GeneralRegister64 destination, final Label label);
    void rip_sub(AMD64GeneralRegister32 destination, int rel32);
    void rip_sub(AMD64GeneralRegister64 destination, int rel32);
    void rip_sub(final AMD64GeneralRegister32 destination, final Label label);
    void rip_sub(final AMD64GeneralRegister64 destination, final Label label);
    void rip_subsd(AMD64XMMRegister destination, int rel32);
    void rip_subsd(final AMD64XMMRegister destination, final Label label);
    void rip_subss(AMD64XMMRegister destination, int rel32);
    void rip_subss(final AMD64XMMRegister destination, final Label label);
    void rip_xor(AMD64GeneralRegister32 destination, int rel32);
    void rip_xor(AMD64GeneralRegister64 destination, int rel32);
    void rip_xor(final AMD64GeneralRegister32 destination, final Label label);
    void rip_xor(final AMD64GeneralRegister64 destination, final Label label);
    void sarl(AMD64GeneralRegister32 destination, byte imm8);
    void sarl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void sarl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void sarl___1(AMD64GeneralRegister32 destination);
    void sarl___1(byte disp8, AMD64IndirectRegister64 destination);
    void sarl___1(int disp32, AMD64IndirectRegister64 destination);
    void sarl___CL(AMD64GeneralRegister32 destination);
    void sarl___CL(byte disp8, AMD64IndirectRegister64 destination);
    void sarl___CL(int disp32, AMD64IndirectRegister64 destination);
    void sarq(AMD64GeneralRegister64 destination, byte imm8);
    void sarq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void sarq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void sarq___1(AMD64GeneralRegister64 destination);
    void sarq___1(byte disp8, AMD64IndirectRegister64 destination);
    void sarq___1(int disp32, AMD64IndirectRegister64 destination);
    void sarq___CL(AMD64GeneralRegister64 destination);
    void sarq___CL(byte disp8, AMD64IndirectRegister64 destination);
    void sarq___CL(int disp32, AMD64IndirectRegister64 destination);
    void setl(AMD64GeneralRegister8 destination);
    void sfence();
    void shll(AMD64GeneralRegister32 destination, byte imm8);
    void shll(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void shll(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void shll___1(AMD64GeneralRegister32 destination);
    void shll___1(byte disp8, AMD64IndirectRegister64 destination);
    void shll___1(int disp32, AMD64IndirectRegister64 destination);
    void shll___CL(AMD64GeneralRegister32 destination);
    void shll___CL(byte disp8, AMD64IndirectRegister64 destination);
    void shll___CL(int disp32, AMD64IndirectRegister64 destination);
    void shlq(AMD64GeneralRegister64 destination, byte imm8);
    void shlq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void shlq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void shlq___1(AMD64GeneralRegister64 destination);
    void shlq___1(byte disp8, AMD64IndirectRegister64 destination);
    void shlq___1(int disp32, AMD64IndirectRegister64 destination);
    void shlq___CL(AMD64GeneralRegister64 destination);
    void shlq___CL(byte disp8, AMD64IndirectRegister64 destination);
    void shlq___CL(int disp32, AMD64IndirectRegister64 destination);
    void shrl(AMD64GeneralRegister32 destination, byte imm8);
    void shrl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void shrl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void shrl___1(AMD64GeneralRegister32 destination);
    void shrl___1(byte disp8, AMD64IndirectRegister64 destination);
    void shrl___1(int disp32, AMD64IndirectRegister64 destination);
    void shrl___CL(AMD64GeneralRegister32 destination);
    void shrl___CL(byte disp8, AMD64IndirectRegister64 destination);
    void shrl___CL(int disp32, AMD64IndirectRegister64 destination);
    void shrq(AMD64GeneralRegister64 destination, byte imm8);
    void shrq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void shrq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void shrq___1(AMD64GeneralRegister64 destination);
    void shrq___1(byte disp8, AMD64IndirectRegister64 destination);
    void shrq___1(int disp32, AMD64IndirectRegister64 destination);
    void shrq___CL(AMD64GeneralRegister64 destination);
    void shrq___CL(byte disp8, AMD64IndirectRegister64 destination);
    void shrq___CL(int disp32, AMD64IndirectRegister64 destination);
    void sub(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void sub(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void sub(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void sub(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void sub(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void sub(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void sub_EAX(int imm32);
    void sub_RAX(int imm32);
    void subl(AMD64GeneralRegister32 destination, byte imm8);
    void subl(AMD64GeneralRegister32 destination, int imm32);
    void subl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void subl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void subl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void subl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void subq(AMD64GeneralRegister64 destination, byte imm8);
    void subq(AMD64GeneralRegister64 destination, int imm32);
    void subq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void subq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void subq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void subq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void subsd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void subsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void subsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void subss(AMD64XMMRegister destination, AMD64XMMRegister source);
    void subss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void subss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void xchg(AMD64GeneralRegister64 r1, AMD64GeneralRegister64 r2);
    void xor(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
    void xor(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
    void xor(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
    void xor(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
    void xor(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
    void xor(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
    void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
    void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
    void xor_EAX(int imm32);
    void xor_RAX(int imm32);
    void xorl(AMD64GeneralRegister32 destination, byte imm8);
    void xorl(AMD64GeneralRegister32 destination, int imm32);
    void xorl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void xorl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void xorl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void xorl(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void xorpd(AMD64XMMRegister destination, AMD64XMMRegister source);
    void xorps(AMD64XMMRegister destination, AMD64XMMRegister source);
    void xorq(AMD64GeneralRegister64 destination, byte imm8);
    void xorq(AMD64GeneralRegister64 destination, int imm32);
    void xorq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
    void xorq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
    void xorq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
    void xorq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void decq(AMD64GeneralRegister64 destination);
    void push(int imm32);
    void rip_push(Label label);
    void setb(AMD64GeneralRegister8 destination);
    void setnbe(AMD64GeneralRegister8 destination);
    void setbe(AMD64GeneralRegister8 destination);
    void setnb(AMD64GeneralRegister8 destination);
    void setnl(AMD64GeneralRegister8 destination);
    void setnle(AMD64GeneralRegister8 destination);
    void setnp(AMD64GeneralRegister8 destination);
    void setp(AMD64GeneralRegister8 destination);
    void cmove(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void cmovg(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void cmovge(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void cmovl(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void cmovle(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void cmovne(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movdl(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
    void movdl(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
    void movq(int disp32, AMD64IndirectRegister64 destination, int imm32);
    void movsxd(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
    void movsxd(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void movsxd(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);

    /**
     * A program for generating the assembler methods in {@link AMD64AssemblerMethods} based on the methods
     * declared in {@link AMD64AssemblerSpecification}.
     *
     * @author Doug Simon
     */
    @PROTOTYPE_ONLY
    static class Generator {
        public static void main(String[] args) {
            final String[] programArguments = {
                "-i=" + AMD64AssemblerSpecification.class.getName(),
                "-r=" + AMD64AssemblerMethods.class.getName(),
                "-l=" + AMD64AssemblerMethods.class.getName(),
                "-d=" + JavaProject.findSourceDirectory().getAbsolutePath()
            };
            com.sun.max.asm.gen.cisc.amd64.AMD64AssemblerGenerator.main(programArguments);
        }
    }

//    void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void adc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void adc(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void adc(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void adc(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void adc(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void adc(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void adc(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void adc(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void adc(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void adc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void adc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void adc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void adc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void adc_AL(byte imm8);
//    void adc_AX(short imm16);
//    void adc_EAX(int imm32);
//    void adc_RAX(int imm32);
//    void adcb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcb(AMD64GeneralRegister8 destination, byte imm8);
//    void adcb(AMD64IndirectRegister64 destination, byte imm8);
//    void adcb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void adcb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void adcl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcl(AMD64GeneralRegister32 destination, byte imm8);
//    void adcl(AMD64GeneralRegister32 destination, int imm32);
//    void adcl(AMD64IndirectRegister64 destination, byte imm8);
//    void adcl(AMD64IndirectRegister64 destination, int imm32);
//    void adcl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void adcl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void adcl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void adcl(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void adcq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcq(AMD64GeneralRegister64 destination, byte imm8);
//    void adcq(AMD64GeneralRegister64 destination, int imm32);
//    void adcq(AMD64IndirectRegister64 destination, byte imm8);
//    void adcq(AMD64IndirectRegister64 destination, int imm32);
//    void adcq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void adcq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void adcq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void adcq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void adcq(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void adcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void adcw(AMD64GeneralRegister16 destination, byte imm8);
//    void adcw(AMD64GeneralRegister16 destination, short imm16);
//    void adcw(AMD64IndirectRegister64 destination, byte imm8);
//    void adcw(AMD64IndirectRegister64 destination, short imm16);
//    void adcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void adcw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void adcw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void adcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void adcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void adcw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void adcw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void add(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void add(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void add(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void add(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void add(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void add(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void add(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void add(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void add(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void add(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void add(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void add_AL(byte imm8);
//    void add_AX(short imm16);
//    void addb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addb(AMD64GeneralRegister8 destination, byte imm8);
//    void addb(AMD64IndirectRegister64 destination, byte imm8);
//    void addb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void addb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void addl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void addl(AMD64IndirectRegister64 destination, byte imm8);
//    void addl(AMD64IndirectRegister64 destination, int imm32);
//    void addl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void addl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void addpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void addpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void addpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void addpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void addps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void addps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void addps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void addps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void addq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void addq(AMD64IndirectRegister64 destination, byte imm8);
//    void addq(AMD64IndirectRegister64 destination, int imm32);
//    void addq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void addq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void address_size();
//    void addsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void addsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void addss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsubpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsubpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void addsubpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void addsubpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsubpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void addsubpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void addsubpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void addw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void addw(AMD64GeneralRegister16 destination, byte imm8);
//    void addw(AMD64GeneralRegister16 destination, short imm16);
//    void addw(AMD64IndirectRegister64 destination, byte imm8);
//    void addw(AMD64IndirectRegister64 destination, short imm16);
//    void addw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void addw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void addw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void addw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void addw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void addw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void addw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void and(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void and(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void and(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void and(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void and(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void and(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void and(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void and(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void and(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void and(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void and(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void and_AL(byte imm8);
//    void and_AX(short imm16);
//    void andb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andb(AMD64GeneralRegister8 destination, byte imm8);
//    void andb(AMD64IndirectRegister64 destination, byte imm8);
//    void andb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void andb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void andl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andl(AMD64IndirectRegister64 destination, byte imm8);
//    void andl(AMD64IndirectRegister64 destination, int imm32);
//    void andl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andnpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void andnpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void andnpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void andnpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void andnps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void andnps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void andnps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void andnps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andnps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void andpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void andpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void andpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void andpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void andps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void andps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void andps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void andps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void andps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void andq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andq(AMD64IndirectRegister64 destination, byte imm8);
//    void andq(AMD64IndirectRegister64 destination, int imm32);
//    void andq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void andw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void andw(AMD64GeneralRegister16 destination, byte imm8);
//    void andw(AMD64GeneralRegister16 destination, short imm16);
//    void andw(AMD64IndirectRegister64 destination, byte imm8);
//    void andw(AMD64IndirectRegister64 destination, short imm16);
//    void andw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void andw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void andw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void andw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void andw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void andw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void andw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void bsf(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void bsf(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void bsf(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void bsf(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsf(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsf(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void bsr(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void bsr(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void bsr(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void bsr(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void bsr(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void bswap(AMD64GeneralRegister32 register);
//    void bswap(AMD64GeneralRegister64 register);
//    void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bt(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void bt(AMD64GeneralRegister16 destination, byte imm8);
//    void bt(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void bt(AMD64GeneralRegister32 destination, byte imm8);
//    void bt(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void bt(AMD64GeneralRegister64 destination, byte imm8);
//    void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bt(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bt(AMD64IndirectRegister64 destination, byte imm8);
//    void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bt(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bt(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bt(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bt(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btc(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btc(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void btc(AMD64GeneralRegister16 destination, byte imm8);
//    void btc(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void btc(AMD64GeneralRegister32 destination, byte imm8);
//    void btc(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void btc(AMD64GeneralRegister64 destination, byte imm8);
//    void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btc(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btc(AMD64IndirectRegister64 destination, byte imm8);
//    void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btc(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btc(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btc(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btc(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btc(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btc(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btr(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void btr(AMD64GeneralRegister16 destination, byte imm8);
//    void btr(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void btr(AMD64GeneralRegister32 destination, byte imm8);
//    void btr(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void btr(AMD64GeneralRegister64 destination, byte imm8);
//    void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btr(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btr(AMD64IndirectRegister64 destination, byte imm8);
//    void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btr(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btr(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void btr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void btr(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void btr(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bts(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void bts(AMD64GeneralRegister16 destination, byte imm8);
//    void bts(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void bts(AMD64GeneralRegister32 destination, byte imm8);
//    void bts(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void bts(AMD64GeneralRegister64 destination, byte imm8);
//    void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bts(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bts(AMD64IndirectRegister64 destination, byte imm8);
//    void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bts(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bts(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void bts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void bts(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void bts(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void call(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void call(AMD64GeneralRegister16 destination);
//    void call(AMD64IndirectRegister64 destination);
//    void call(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void call(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cdqe();
//    void clc();
//    void cld();
//    void clflush(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void clflush(AMD64IndirectRegister64 destination);
//    void clflush(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void clflush(byte disp8, AMD64IndirectRegister64 destination);
//    void clflush(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void clflush(int disp32, AMD64IndirectRegister64 destination);
//    void cli();
//    void clts();
//    void cmc();
//    void cmova(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmova(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmova(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmova(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmova(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovae(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovae(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovae(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovae(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovae(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovbe(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void cmovbe(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovbe(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void cmovbe(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
    void cmovbe(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovbe(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovbe(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovbe(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmove(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmove(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmove(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmove(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovg(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovg(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovg(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovg(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovge(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovge(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovge(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovge(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovl(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovl(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovl(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovl(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovle(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovle(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovle(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovle(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovne(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovne(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovne(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovne(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovne(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovno(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovno(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovno(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovno(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovno(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovnp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovnp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovnp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovnp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovnp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovns(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovns(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovns(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovns(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovns(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovo(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovo(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovo(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovo(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovo(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovp(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmovs(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmovs(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmovs(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmovs(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmovs(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void cmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmp(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmp(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void cmp(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cmp(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmp(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void cmp(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void cmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmp(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void cmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmp(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmp_AL(byte imm8);
//    void cmp_AX(short imm16);
//    void cmpb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpb(AMD64GeneralRegister8 destination, byte imm8);
//    void cmpb(AMD64IndirectRegister64 destination, byte imm8);
//    void cmpb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void cmpb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void cmpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmpl(AMD64IndirectRegister64 destination, byte imm8);
//    void cmpl(AMD64IndirectRegister64 destination, int imm32);
//    void cmpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmppd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmppd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, AMD64XMMRegister source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmpq(AMD64IndirectRegister64 destination, byte imm8);
//    void cmpq(AMD64IndirectRegister64 destination, int imm32);
//    void cmpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void cmpsb();
//    void cmpsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpsl();
//    void cmpsq();
//    void cmpss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpss(AMD64XMMRegister destination, AMD64IndirectRegister64 source, AMD64XMMComparison amd64xmmcomparison);
//    void cmpss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void cmpsw();
//    void cmpw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void cmpw(AMD64GeneralRegister16 destination, byte imm8);
//    void cmpw(AMD64GeneralRegister16 destination, short imm16);
//    void cmpw(AMD64IndirectRegister64 destination, byte imm8);
//    void cmpw(AMD64IndirectRegister64 destination, short imm16);
//    void cmpw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void cmpw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void cmpw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void cmpw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void cmpw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void cmpw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void cmpw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmpxchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmpxchg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void cmpxchg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void cmpxchg(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void cmpxchg(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void cmpxchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void cmpxchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void cmpxchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void cmpxchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void cmpxchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void cmpxchg16b(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmpxchg16b(AMD64IndirectRegister64 destination);
//    void cmpxchg16b(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmpxchg16b(byte disp8, AMD64IndirectRegister64 destination);
//    void cmpxchg16b(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cmpxchg16b(int disp32, AMD64IndirectRegister64 destination);
//    void comisd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void comisd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void comisd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void comisd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void comiss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void comiss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void comiss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void comiss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cpuid();
//    void cvtdq2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtdq2pd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtdq2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtdq2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtdq2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtdq2ps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtdq2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtdq2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtdq2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtpd2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtpd2dq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtpd2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtpd2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtpd2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2pi(MMXRegister destination, AMD64IndirectRegister64 source);
//    void cvtpd2pi(MMXRegister destination, AMD64XMMRegister source);
//    void cvtpd2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtpd2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtpd2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtpd2ps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtpd2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtpd2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpd2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtpi2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtpi2pd(AMD64XMMRegister destination, MMXRegister source);
//    void cvtpi2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtpi2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtpi2ps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2ps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtpi2ps(AMD64XMMRegister destination, MMXRegister source);
//    void cvtpi2ps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2ps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtpi2ps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtpi2ps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtps2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtps2dq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtps2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtps2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtps2pd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtps2pd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvtps2pd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtps2pd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtps2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pi(MMXRegister destination, AMD64IndirectRegister64 source);
//    void cvtps2pi(MMXRegister destination, AMD64XMMRegister source);
//    void cvtps2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvtps2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtps2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvtsd2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cvtsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cvtsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2ss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2ss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtsd2ss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsd2ss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdl(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtsi2sdl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtsi2sdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2sdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssl(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtsi2ssl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtsi2ssq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtsi2ssq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2sd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2sd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvtss2sd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2sd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cvtss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cvtss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvtss2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvttpd2dq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvttpd2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvttpd2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvttpd2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2pi(MMXRegister destination, AMD64IndirectRegister64 source);
//    void cvttpd2pi(MMXRegister destination, AMD64XMMRegister source);
//    void cvttpd2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvttpd2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttpd2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvttps2dq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2dq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void cvttps2dq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void cvttps2dq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2dq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvttps2dq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2dq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvttps2pi(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2pi(MMXRegister destination, AMD64IndirectRegister64 source);
//    void cvttps2pi(MMXRegister destination, AMD64XMMRegister source);
//    void cvttps2pi(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2pi(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvttps2pi(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttps2pi(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void cvttsd2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttsd2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cvttsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttsd2si(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void cvttsd2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttsd2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttsd2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cvttsd2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttsd2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void cvttss2si(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void cvttss2si(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cvttss2si(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void cwde();
//    void das();
//    void decb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decb(AMD64GeneralRegister8 destination);
//    void decb(AMD64IndirectRegister64 destination);
//    void decb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decb(byte disp8, AMD64IndirectRegister64 destination);
//    void decb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decb(int disp32, AMD64IndirectRegister64 destination);
//    void decl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decl(AMD64GeneralRegister32 destination);
//    void decl(AMD64IndirectRegister64 destination);
//    void decl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decl(byte disp8, AMD64IndirectRegister64 destination);
//    void decl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decl(int disp32, AMD64IndirectRegister64 destination);
//    void decq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decq(AMD64IndirectRegister64 destination);
//    void decq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decq(byte disp8, AMD64IndirectRegister64 destination);
//    void decq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decq(int disp32, AMD64IndirectRegister64 destination);
//    void decw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decw(AMD64GeneralRegister16 destination);
//    void decw(AMD64IndirectRegister64 destination);
//    void decw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decw(byte disp8, AMD64IndirectRegister64 destination);
//    void decw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void decw(int disp32, AMD64IndirectRegister64 destination);
//    void divb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divb___AL(AMD64GeneralRegister8 destination);
//    void divb___AL(AMD64IndirectRegister64 destination);
//    void divb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divb___AL(byte disp8, AMD64IndirectRegister64 destination);
//    void divb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divb___AL(int disp32, AMD64IndirectRegister64 destination);
//    void divl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divl(AMD64GeneralRegister32 destination);
//    void divl(AMD64IndirectRegister64 destination);
//    void divl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divl(byte disp8, AMD64IndirectRegister64 destination);
//    void divl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divl(int disp32, AMD64IndirectRegister64 destination);
//    void divpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void divpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void divpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void divpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void divps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void divps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void divps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void divps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void divq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divq(AMD64IndirectRegister64 destination);
//    void divq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void divsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void divss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divw(AMD64GeneralRegister16 destination);
//    void divw(AMD64IndirectRegister64 destination);
//    void divw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divw(byte disp8, AMD64IndirectRegister64 destination);
//    void divw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void divw(int disp32, AMD64IndirectRegister64 destination);
//    void emms();
//    void f2xm1();
//    void fabs();
//    void fadd_ST(FPStackRegister st);
//    void fadd___ST(FPStackRegister st);
//    void faddl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void faddl(AMD64IndirectRegister64 destination);
//    void faddl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void faddl(byte disp8, AMD64IndirectRegister64 destination);
//    void faddl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void faddl(int disp32, AMD64IndirectRegister64 destination);
//    void faddp___ST(FPStackRegister st);
//    void fadds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fadds(AMD64IndirectRegister64 destination);
//    void fadds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fadds(byte disp8, AMD64IndirectRegister64 destination);
//    void fadds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fadds(int disp32, AMD64IndirectRegister64 destination);
//    void fbld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbld(AMD64IndirectRegister64 destination);
//    void fbld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbld(byte disp8, AMD64IndirectRegister64 destination);
//    void fbld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbld(int disp32, AMD64IndirectRegister64 destination);
//    void fbstp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbstp(AMD64IndirectRegister64 destination);
//    void fbstp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbstp(byte disp8, AMD64IndirectRegister64 destination);
//    void fbstp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fbstp(int disp32, AMD64IndirectRegister64 destination);
//    void fchs();
//    void fclex();
//    void fcmovb_ST(FPStackRegister st);
//    void fcmovbe_ST(FPStackRegister st);
//    void fcmove_ST(FPStackRegister st);
//    void fcmovnb_ST(FPStackRegister st);
//    void fcmovnbe_ST(FPStackRegister st);
//    void fcmovne_ST(FPStackRegister st);
//    void fcmovnu_ST(FPStackRegister st);
//    void fcmovu_ST(FPStackRegister st);
//    void fcom(FPStackRegister st);
//    void fcom2(FPStackRegister st);
//    void fcomi_ST(FPStackRegister st);
//    void fcomip_ST(FPStackRegister st);
//    void fcoml(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoml(AMD64IndirectRegister64 destination);
//    void fcoml(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoml(byte disp8, AMD64IndirectRegister64 destination);
//    void fcoml(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoml(int disp32, AMD64IndirectRegister64 destination);
//    void fcomp(FPStackRegister st);
//    void fcomp3(FPStackRegister st);
//    void fcomp5___ST(FPStackRegister st);
//    void fcompl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcompl(AMD64IndirectRegister64 destination);
//    void fcompl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcompl(byte disp8, AMD64IndirectRegister64 destination);
//    void fcompl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcompl(int disp32, AMD64IndirectRegister64 destination);
//    void fcompp();
//    void fcomps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcomps(AMD64IndirectRegister64 destination);
//    void fcomps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcomps(byte disp8, AMD64IndirectRegister64 destination);
//    void fcomps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcomps(int disp32, AMD64IndirectRegister64 destination);
//    void fcoms(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoms(AMD64IndirectRegister64 destination);
//    void fcoms(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoms(byte disp8, AMD64IndirectRegister64 destination);
//    void fcoms(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fcoms(int disp32, AMD64IndirectRegister64 destination);
//    void fcos();
//    void fdecstp();
//    void fdiv_ST(FPStackRegister st);
//    void fdiv___ST(FPStackRegister st);
//    void fdivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivl(AMD64IndirectRegister64 destination);
//    void fdivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivl(byte disp8, AMD64IndirectRegister64 destination);
//    void fdivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivl(int disp32, AMD64IndirectRegister64 destination);
//    void fdivp___ST(FPStackRegister st);
//    void fdivr_ST(FPStackRegister st);
//    void fdivr___ST(FPStackRegister st);
//    void fdivrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrl(AMD64IndirectRegister64 destination);
//    void fdivrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrl(byte disp8, AMD64IndirectRegister64 destination);
//    void fdivrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrl(int disp32, AMD64IndirectRegister64 destination);
//    void fdivrp___ST(FPStackRegister st);
//    void fdivrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrs(AMD64IndirectRegister64 destination);
//    void fdivrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrs(byte disp8, AMD64IndirectRegister64 destination);
//    void fdivrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivrs(int disp32, AMD64IndirectRegister64 destination);
//    void fdivs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivs(AMD64IndirectRegister64 destination);
//    void fdivs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivs(byte disp8, AMD64IndirectRegister64 destination);
//    void fdivs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fdivs(int disp32, AMD64IndirectRegister64 destination);
//    void femms();
//    void ffree(FPStackRegister st);
//    void ffreep(FPStackRegister st);
//    void fiaddl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiaddl(AMD64IndirectRegister64 destination);
//    void fiaddl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiaddl(byte disp8, AMD64IndirectRegister64 destination);
//    void fiaddl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiaddl(int disp32, AMD64IndirectRegister64 destination);
//    void fiadds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiadds(AMD64IndirectRegister64 destination);
//    void fiadds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiadds(byte disp8, AMD64IndirectRegister64 destination);
//    void fiadds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fiadds(int disp32, AMD64IndirectRegister64 destination);
//    void ficoml(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoml(AMD64IndirectRegister64 destination);
//    void ficoml(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoml(byte disp8, AMD64IndirectRegister64 destination);
//    void ficoml(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoml(int disp32, AMD64IndirectRegister64 destination);
//    void ficompl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficompl(AMD64IndirectRegister64 destination);
//    void ficompl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficompl(byte disp8, AMD64IndirectRegister64 destination);
//    void ficompl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficompl(int disp32, AMD64IndirectRegister64 destination);
//    void ficomps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficomps(AMD64IndirectRegister64 destination);
//    void ficomps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficomps(byte disp8, AMD64IndirectRegister64 destination);
//    void ficomps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficomps(int disp32, AMD64IndirectRegister64 destination);
//    void ficoms(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoms(AMD64IndirectRegister64 destination);
//    void ficoms(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoms(byte disp8, AMD64IndirectRegister64 destination);
//    void ficoms(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ficoms(int disp32, AMD64IndirectRegister64 destination);
//    void fidivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivl(AMD64IndirectRegister64 destination);
//    void fidivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivl(byte disp8, AMD64IndirectRegister64 destination);
//    void fidivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivl(int disp32, AMD64IndirectRegister64 destination);
//    void fidivrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrl(AMD64IndirectRegister64 destination);
//    void fidivrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrl(byte disp8, AMD64IndirectRegister64 destination);
//    void fidivrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrl(int disp32, AMD64IndirectRegister64 destination);
//    void fidivrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrs(AMD64IndirectRegister64 destination);
//    void fidivrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrs(byte disp8, AMD64IndirectRegister64 destination);
//    void fidivrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivrs(int disp32, AMD64IndirectRegister64 destination);
//    void fidivs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivs(AMD64IndirectRegister64 destination);
//    void fidivs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivs(byte disp8, AMD64IndirectRegister64 destination);
//    void fidivs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fidivs(int disp32, AMD64IndirectRegister64 destination);
//    void fildl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildl(AMD64IndirectRegister64 destination);
//    void fildl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildl(byte disp8, AMD64IndirectRegister64 destination);
//    void fildl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildl(int disp32, AMD64IndirectRegister64 destination);
//    void fildq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildq(AMD64IndirectRegister64 destination);
//    void fildq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildq(byte disp8, AMD64IndirectRegister64 destination);
//    void fildq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fildq(int disp32, AMD64IndirectRegister64 destination);
//    void filds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void filds(AMD64IndirectRegister64 destination);
//    void filds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void filds(byte disp8, AMD64IndirectRegister64 destination);
//    void filds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void filds(int disp32, AMD64IndirectRegister64 destination);
//    void fimull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimull(AMD64IndirectRegister64 destination);
//    void fimull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimull(byte disp8, AMD64IndirectRegister64 destination);
//    void fimull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimull(int disp32, AMD64IndirectRegister64 destination);
//    void fimuls(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimuls(AMD64IndirectRegister64 destination);
//    void fimuls(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimuls(byte disp8, AMD64IndirectRegister64 destination);
//    void fimuls(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fimuls(int disp32, AMD64IndirectRegister64 destination);
//    void fincstp();
//    void finit();
//    void fistl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistl(AMD64IndirectRegister64 destination);
//    void fistl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistl(byte disp8, AMD64IndirectRegister64 destination);
//    void fistl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistl(int disp32, AMD64IndirectRegister64 destination);
//    void fistpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpl(AMD64IndirectRegister64 destination);
//    void fistpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpl(byte disp8, AMD64IndirectRegister64 destination);
//    void fistpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpl(int disp32, AMD64IndirectRegister64 destination);
//    void fistpq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpq(AMD64IndirectRegister64 destination);
//    void fistpq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpq(byte disp8, AMD64IndirectRegister64 destination);
//    void fistpq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistpq(int disp32, AMD64IndirectRegister64 destination);
//    void fistps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistps(AMD64IndirectRegister64 destination);
//    void fistps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistps(byte disp8, AMD64IndirectRegister64 destination);
//    void fistps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fistps(int disp32, AMD64IndirectRegister64 destination);
//    void fists(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fists(AMD64IndirectRegister64 destination);
//    void fists(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fists(byte disp8, AMD64IndirectRegister64 destination);
//    void fists(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fists(int disp32, AMD64IndirectRegister64 destination);
//    void fisubl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubl(AMD64IndirectRegister64 destination);
//    void fisubl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubl(byte disp8, AMD64IndirectRegister64 destination);
//    void fisubl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubl(int disp32, AMD64IndirectRegister64 destination);
//    void fisubrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrl(AMD64IndirectRegister64 destination);
//    void fisubrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrl(byte disp8, AMD64IndirectRegister64 destination);
//    void fisubrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrl(int disp32, AMD64IndirectRegister64 destination);
//    void fisubrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrs(AMD64IndirectRegister64 destination);
//    void fisubrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrs(byte disp8, AMD64IndirectRegister64 destination);
//    void fisubrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubrs(int disp32, AMD64IndirectRegister64 destination);
//    void fisubs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubs(AMD64IndirectRegister64 destination);
//    void fisubs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubs(byte disp8, AMD64IndirectRegister64 destination);
//    void fisubs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fisubs(int disp32, AMD64IndirectRegister64 destination);
//    void fld(FPStackRegister st);
//    void fld1();
//    void fldcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldcw(AMD64IndirectRegister64 destination);
//    void fldcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldcw(byte disp8, AMD64IndirectRegister64 destination);
//    void fldcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldcw(int disp32, AMD64IndirectRegister64 destination);
//    void fldenv(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldenv(AMD64IndirectRegister64 destination);
//    void fldenv(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldenv(byte disp8, AMD64IndirectRegister64 destination);
//    void fldenv(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldenv(int disp32, AMD64IndirectRegister64 destination);
//    void fldl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldl(AMD64IndirectRegister64 destination);
//    void fldl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldl(byte disp8, AMD64IndirectRegister64 destination);
//    void fldl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldl(int disp32, AMD64IndirectRegister64 destination);
//    void fldl2e();
//    void fldl2t();
//    void fldlg2();
//    void fldln2();
//    void fldpi();
//    void flds(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void flds(AMD64IndirectRegister64 destination);
//    void flds(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void flds(byte disp8, AMD64IndirectRegister64 destination);
//    void flds(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void flds(int disp32, AMD64IndirectRegister64 destination);
//    void fldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldt(AMD64IndirectRegister64 destination);
//    void fldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldt(byte disp8, AMD64IndirectRegister64 destination);
//    void fldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fldt(int disp32, AMD64IndirectRegister64 destination);
//    void fldz();
//    void fmul_ST(FPStackRegister st);
//    void fmul___ST(FPStackRegister st);
//    void fmull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmull(AMD64IndirectRegister64 destination);
//    void fmull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmull(byte disp8, AMD64IndirectRegister64 destination);
//    void fmull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmull(int disp32, AMD64IndirectRegister64 destination);
//    void fmulp___ST(FPStackRegister st);
//    void fmuls(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmuls(AMD64IndirectRegister64 destination);
//    void fmuls(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmuls(byte disp8, AMD64IndirectRegister64 destination);
//    void fmuls(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fmuls(int disp32, AMD64IndirectRegister64 destination);
//    void fnop();
//    void fpatan();
//    void fprem();
//    void fprem1();
//    void fptan();
//    void frndint();
//    void frstor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void frstor(AMD64IndirectRegister64 destination);
//    void frstor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void frstor(byte disp8, AMD64IndirectRegister64 destination);
//    void frstor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void frstor(int disp32, AMD64IndirectRegister64 destination);
//    void fsave(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsave(AMD64IndirectRegister64 destination);
//    void fsave(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsave(byte disp8, AMD64IndirectRegister64 destination);
//    void fsave(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsave(int disp32, AMD64IndirectRegister64 destination);
//    void fscale();
//    void fsin();
//    void fsincos();
//    void fsqrt();
//    void fst(FPStackRegister st);
//    void fstcw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstcw(AMD64IndirectRegister64 destination);
//    void fstcw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstcw(byte disp8, AMD64IndirectRegister64 destination);
//    void fstcw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstcw(int disp32, AMD64IndirectRegister64 destination);
//    void fstenv(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstenv(AMD64IndirectRegister64 destination);
//    void fstenv(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstenv(byte disp8, AMD64IndirectRegister64 destination);
//    void fstenv(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstenv(int disp32, AMD64IndirectRegister64 destination);
//    void fstl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstl(AMD64IndirectRegister64 destination);
//    void fstl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstl(byte disp8, AMD64IndirectRegister64 destination);
//    void fstl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstl(int disp32, AMD64IndirectRegister64 destination);
//    void fstp(FPStackRegister st);
//    void fstp1(FPStackRegister st);
//    void fstp8(FPStackRegister st);
//    void fstp9(FPStackRegister st);
//    void fstpl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpl(AMD64IndirectRegister64 destination);
//    void fstpl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpl(byte disp8, AMD64IndirectRegister64 destination);
//    void fstpl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpl(int disp32, AMD64IndirectRegister64 destination);
//    void fstps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstps(AMD64IndirectRegister64 destination);
//    void fstps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstps(byte disp8, AMD64IndirectRegister64 destination);
//    void fstps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstps(int disp32, AMD64IndirectRegister64 destination);
//    void fstpt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpt(AMD64IndirectRegister64 destination);
//    void fstpt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpt(byte disp8, AMD64IndirectRegister64 destination);
//    void fstpt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstpt(int disp32, AMD64IndirectRegister64 destination);
//    void fsts(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsts(AMD64IndirectRegister64 destination);
//    void fsts(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsts(byte disp8, AMD64IndirectRegister64 destination);
//    void fsts(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsts(int disp32, AMD64IndirectRegister64 destination);
//    void fstsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstsw(AMD64IndirectRegister64 destination);
//    void fstsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstsw(byte disp8, AMD64IndirectRegister64 destination);
//    void fstsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fstsw(int disp32, AMD64IndirectRegister64 destination);
//    void fstsw_AX();
//    void fsub_ST(FPStackRegister st);
//    void fsub___ST(FPStackRegister st);
//    void fsubl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubl(AMD64IndirectRegister64 destination);
//    void fsubl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubl(byte disp8, AMD64IndirectRegister64 destination);
//    void fsubl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubl(int disp32, AMD64IndirectRegister64 destination);
//    void fsubp___ST(FPStackRegister st);
//    void fsubr_ST(FPStackRegister st);
//    void fsubr___ST(FPStackRegister st);
//    void fsubrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrl(AMD64IndirectRegister64 destination);
//    void fsubrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrl(byte disp8, AMD64IndirectRegister64 destination);
//    void fsubrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrl(int disp32, AMD64IndirectRegister64 destination);
//    void fsubrp___ST(FPStackRegister st);
//    void fsubrs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrs(AMD64IndirectRegister64 destination);
//    void fsubrs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrs(byte disp8, AMD64IndirectRegister64 destination);
//    void fsubrs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubrs(int disp32, AMD64IndirectRegister64 destination);
//    void fsubs(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubs(AMD64IndirectRegister64 destination);
//    void fsubs(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubs(byte disp8, AMD64IndirectRegister64 destination);
//    void fsubs(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fsubs(int disp32, AMD64IndirectRegister64 destination);
//    void ftst();
//    void fucom(FPStackRegister st);
//    void fucomi_ST(FPStackRegister st);
//    void fucomip_ST(FPStackRegister st);
//    void fucomp(FPStackRegister st);
//    void fucompp();
//    void fwait();
//    void fxam();
//    void fxch(FPStackRegister st);
//    void fxch4(FPStackRegister st);
//    void fxch7(FPStackRegister st);
//    void fxrstor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxrstor(AMD64IndirectRegister64 destination);
//    void fxrstor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxrstor(byte disp8, AMD64IndirectRegister64 destination);
//    void fxrstor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxrstor(int disp32, AMD64IndirectRegister64 destination);
//    void fxsave(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxsave(AMD64IndirectRegister64 destination);
//    void fxsave(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxsave(byte disp8, AMD64IndirectRegister64 destination);
//    void fxsave(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void fxsave(int disp32, AMD64IndirectRegister64 destination);
//    void fxtract();
//    void fyl2x();
//    void fyl2xp1();
//    void haddpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void haddpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void haddpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void haddpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void haddps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void haddps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void haddps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void haddps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void haddps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void hlt();
//    void hsubpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void hsubpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void hsubpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void hsubpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void hsubps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void hsubps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void hsubps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void hsubps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void hsubps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void idivb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivb___AL(AMD64GeneralRegister8 destination);
//    void idivb___AL(AMD64IndirectRegister64 destination);
//    void idivb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivb___AL(byte disp8, AMD64IndirectRegister64 destination);
//    void idivb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivb___AL(int disp32, AMD64IndirectRegister64 destination);
//    void idivl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivl(AMD64IndirectRegister64 destination);
//    void idivl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivq(AMD64IndirectRegister64 destination);
//    void idivq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivw(AMD64GeneralRegister16 destination);
//    void idivw(AMD64IndirectRegister64 destination);
//    void idivw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivw(byte disp8, AMD64IndirectRegister64 destination);
//    void idivw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void idivw(int disp32, AMD64IndirectRegister64 destination);
//    void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, short imm16);
//    void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source, short imm16);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source, short imm16);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source, short imm16);
//    void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source, int imm32);
//    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source, int imm32);
//    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source, int imm32);
//    void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source, int imm32);
//    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source, int imm32);
//    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void imul(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source, int imm32);
//    void imulb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulb___AL(AMD64GeneralRegister8 destination);
//    void imulb___AL(AMD64IndirectRegister64 destination);
//    void imulb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulb___AL(byte disp8, AMD64IndirectRegister64 destination);
//    void imulb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulb___AL(int disp32, AMD64IndirectRegister64 destination);
//    void imull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imull(AMD64IndirectRegister64 destination);
//    void imull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imull(byte disp8, AMD64IndirectRegister64 destination);
//    void imull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imull(int disp32, AMD64IndirectRegister64 destination);
//    void imulq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulq(AMD64IndirectRegister64 destination);
//    void imulq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulq(byte disp8, AMD64IndirectRegister64 destination);
//    void imulq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulq(int disp32, AMD64IndirectRegister64 destination);
//    void imulw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulw(AMD64GeneralRegister16 destination);
//    void imulw(AMD64IndirectRegister64 destination);
//    void imulw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulw(byte disp8, AMD64IndirectRegister64 destination);
//    void imulw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void imulw(int disp32, AMD64IndirectRegister64 destination);
//    void in_AL(byte imm8);
//    void in_AL_DX();
//    void in_AX(byte imm8);
//    void in_AX_DX();
//    void in_EAX(byte imm8);
//    void in_EAX_DX();
//    void in_RAX(byte imm8);
//    void in_RAX_DX();
//    void incb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incb(AMD64GeneralRegister8 destination);
//    void incb(AMD64IndirectRegister64 destination);
//    void incb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incb(byte disp8, AMD64IndirectRegister64 destination);
//    void incb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incb(int disp32, AMD64IndirectRegister64 destination);
//    void incl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incl(AMD64GeneralRegister32 destination);
//    void incl(AMD64IndirectRegister64 destination);
//    void incl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incl(byte disp8, AMD64IndirectRegister64 destination);
//    void incl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incl(int disp32, AMD64IndirectRegister64 destination);
//    void incq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incq(AMD64GeneralRegister64 destination);
//    void incq(AMD64IndirectRegister64 destination);
//    void incq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incq(byte disp8, AMD64IndirectRegister64 destination);
//    void incq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incq(int disp32, AMD64IndirectRegister64 destination);
//    void incw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incw(AMD64GeneralRegister16 destination);
//    void incw(AMD64IndirectRegister64 destination);
//    void incw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incw(byte disp8, AMD64IndirectRegister64 destination);
//    void incw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void incw(int disp32, AMD64IndirectRegister64 destination);
//    void insb();
//    void insl();
//    void insw();
//    void int_1();
//    void intb(byte imm8);
//    void invd();
//    void invlpg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void invlpg(AMD64IndirectRegister64 destination);
//    void invlpg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void invlpg(byte disp8, AMD64IndirectRegister64 destination);
//    void invlpg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void invlpg(int disp32, AMD64IndirectRegister64 destination);
//    void iret();
//    void jb(byte rel8);
//    void jbe(byte rel8);
//    void jmp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void jmp(AMD64GeneralRegister16 destination);
//    void jmp(AMD64IndirectRegister64 destination);
//    void jmp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void jmp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void jnb(byte rel8);
//    void jnbe(byte rel8);
//    void jno(byte rel8);
//    void jno(final Label label);
//    void jno(int rel32);
//    void jnp(byte rel8);
//    void jnp(final Label label);
//    void jnp(int rel32);
//    void jns(byte rel8);
//    void jns(final Label label);
//    void jns(int rel32);
//    void jo(byte rel8);
//    void jo(final Label label);
//    void jo(int rel32);
//    void jp(byte rel8);
//    void jp(final Label label);
//    void jp(int rel32);
//    void jrcxz(byte rel8);
//    void jrcxz(final Label label);
//    void js(byte rel8);
//    void js(final Label label);
//    void js(int rel32);
//    void lahf();
//    void lar(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void lar(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void lar(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void lar(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lar(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lar(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void lddqu(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lddqu(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void lddqu(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lddqu(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void lddqu(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lddqu(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void ldmxcsr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ldmxcsr(AMD64IndirectRegister64 destination);
//    void ldmxcsr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ldmxcsr(byte disp8, AMD64IndirectRegister64 destination);
//    void ldmxcsr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ldmxcsr(int disp32, AMD64IndirectRegister64 destination);
//    void lea(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void lea(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lea(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lgdt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lgdt(AMD64IndirectRegister64 destination);
//    void lgdt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lgdt(byte disp8, AMD64IndirectRegister64 destination);
//    void lgdt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lgdt(int disp32, AMD64IndirectRegister64 destination);
//    void lidt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lidt(AMD64IndirectRegister64 destination);
//    void lidt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lidt(byte disp8, AMD64IndirectRegister64 destination);
//    void lidt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lidt(int disp32, AMD64IndirectRegister64 destination);
//    void lldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lldt(AMD64GeneralRegister16 destination);
//    void lldt(AMD64IndirectRegister64 destination);
//    void lldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lldt(byte disp8, AMD64IndirectRegister64 destination);
//    void lldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lldt(int disp32, AMD64IndirectRegister64 destination);
//    void lmsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lmsw(AMD64GeneralRegister16 destination);
//    void lmsw(AMD64IndirectRegister64 destination);
//    void lmsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lmsw(byte disp8, AMD64IndirectRegister64 destination);
//    void lmsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lmsw(int disp32, AMD64IndirectRegister64 destination);
//    void lodsb();
//    void lodsl();
//    void lodsq();
//    void lodsw();
//    void loop(byte rel8);
//    void loop(final Label label);
//    void loope(byte rel8);
//    void loope(final Label label);
//    void loopne(byte rel8);
//    void loopne(final Label label);
//    void lsl(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void lsl(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void lsl(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void lsl(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void lsl(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void lsl(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void ltr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ltr(AMD64GeneralRegister16 destination);
//    void ltr(AMD64IndirectRegister64 destination);
//    void ltr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ltr(byte disp8, AMD64IndirectRegister64 destination);
//    void ltr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ltr(int disp32, AMD64IndirectRegister64 destination);
//    void m_adc(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_adc(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_adc(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_adc(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_adc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_adcb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_adcl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_adcl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_adcq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_adcq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_adcw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_adcw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_add(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_add(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_add(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_add(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_add(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_addb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_addl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_addl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_addpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_addps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_addq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_addq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_addsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_addss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_addsubpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_addw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_addw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_and(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_and(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_and(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_and(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_and(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_andb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_andl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_andl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_andnpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_andnps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_andpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_andps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_andq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_andq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_andw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_andw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_bsf(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bsf(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bsf(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bsr(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bsr(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bsr(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_bt(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_btc(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_btr(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_bts(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_call(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_clflush(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmova(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmova(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmova(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovae(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovae(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovae(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovbe(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovbe(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovbe(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmove(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmove(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmove(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovg(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovg(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovg(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovge(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovge(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovge(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovl(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovl(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovl(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovle(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovle(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovle(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovne(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovne(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovne(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovno(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovno(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovno(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovnp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovnp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovnp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovns(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovns(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovns(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovo(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovo(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovo(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovs(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovs(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmovs(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmp(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmp(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmp(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmp(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_cmp(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_cmpb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_cmpl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_cmpl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_cmppd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void m_cmpps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void m_cmpq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_cmpq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_cmpsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void m_cmpss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMComparison amd64xmmcomparison);
//    void m_cmpw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_cmpw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_cmpxchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_cmpxchg16b(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_comisd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_comiss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtdq2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtdq2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtpd2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtpd2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtpd2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtpi2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtpi2ps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtps2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtps2pd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtps2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsd2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsd2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsd2ss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsi2sdl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsi2sdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsi2ssl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtsi2ssq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtss2sd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtss2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvtss2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttpd2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttpd2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttps2dq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttps2pi(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttsd2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttsd2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttss2si(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_cvttss2si(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_decb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_decl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_decq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_decw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divb___AL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_divw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_faddl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fadds(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fbld(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fbstp(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fcoml(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fcompl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fcomps(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fcoms(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fdivl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fdivrl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fdivrs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fdivs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fiaddl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fiadds(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ficoml(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ficompl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ficomps(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ficoms(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fidivl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fidivrl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fidivrs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fidivs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fildl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fildq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_filds(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fimull(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fimuls(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fistl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fistpl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fistpq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fistps(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fists(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fisubl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fisubrl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fisubrs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fisubs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fldcw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fldenv(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fldl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_flds(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fldt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fmull(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fmuls(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_frstor(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsave(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstcw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstenv(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstpl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstps(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstpt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsts(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fstsw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsubl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsubrl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsubrs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fsubs(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fxrstor(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_fxsave(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_haddpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_haddps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_hsubpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_hsubps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_idivb___AL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_idivl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_idivq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_idivw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_imul(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_imul(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_imul(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_imulb___AL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imull(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imulq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_imulw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_incb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_incl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_incq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_incw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_invlpg(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_jmp(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lar(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lar(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lar(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lddqu(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ldmxcsr(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lea(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lea(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lea(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lgdt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lidt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lldt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lmsw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lsl(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lsl(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_lsl(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ltr(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_maxpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_maxps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_maxsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_maxss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_minpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_minps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_minsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_minss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(SegmentRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_mov(int m32, AMD64IndexRegister64 index, Scale scale, SegmentRegister source);
//    void m_mov_AL(final Label label);
//    void m_mov_AL(long m64);
//    void m_mov_AX(final Label label);
//    void m_mov_AX(long m64);
//    void m_mov_EAX(final Label label);
//    void m_mov_EAX(long m64);
//    void m_mov_RAX(final Label label);
//    void m_mov_RAX(long m64);
//    void m_mov___AL(final Label label);
//    void m_mov___AL(long m64);
//    void m_mov___AX(final Label label);
//    void m_mov___AX(long m64);
//    void m_mov___EAX(final Label label);
//    void m_mov___EAX(long m64);
//    void m_mov___RAX(final Label label);
//    void m_mov___RAX(long m64);
//    void m_movapd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movapd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movaps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movaps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_movddup(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdl(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdl(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdl(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movdl(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void m_movdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movdq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void m_movdqa(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdqa(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movdqu(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movdqu(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movhpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movhpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movhps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_movlpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movlpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movlps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movnti(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_movnti(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_movntpd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movntps(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movntq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void m_movq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void m_movq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_movsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movshdup(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsldup(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movss(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movsxb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsxb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsxb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsxd(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsxw(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movsxw(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movupd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movupd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movups(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movups(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_movw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_movzxb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movzxb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movzxb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movzxd(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movzxw(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_movzxw(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulb___AL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mull(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mulw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_mvntdq(int m32, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void m_negb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_negl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_negq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_negw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_notb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_notl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_notq(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_notw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_or(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_or(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_or(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_or(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_or(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_orb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_orl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_orl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_orpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_orps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_orq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_orq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_orw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_orw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_packssdw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_packssdw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_packsswb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_packsswb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_packuswb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_packuswb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddsb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddsb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddusb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddusb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddusw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddusw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_paddw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pand(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pand(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pandn(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pandn(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pavgb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pavgb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pavgw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pavgw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpeqw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pcmpgtw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pinsrw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pinsrw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pmaddwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmaddwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmaxsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmaxsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmaxub(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmaxub(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pminsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pminsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pminub(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pminub(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmulhuw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmulhuw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmulhw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmulhw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmullw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmullw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmuludq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pmuludq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pop(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_por(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_por(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetch(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetchnta(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetcht0(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetcht1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetcht2(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_prefetchw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psadbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psadbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pshufd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pshufhw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pshuflw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pshufw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_pslld(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pslld(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psllq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psllq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psllw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psllw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrad(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrad(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psraw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psraw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrld(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrld(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrlq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrlq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrlw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psrlw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubsb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubsb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubsw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubsw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubusb(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubusb(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubusw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubusw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_psubw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhdq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhqdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckhwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpcklbw(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpcklbw(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckldq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpckldq(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpcklqdq(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpcklwd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_punpcklwd(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_push(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pxor(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_pxor(MMXRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rclb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rcll___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcll___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rclq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rclw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rclw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcpps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcpss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rcrb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rcrl___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrl___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rcrq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rcrw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rcrw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rolb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_roll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_roll___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_roll___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rolq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rolw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rolw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rorb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rorl___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorl___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rorq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_rorw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rorw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rsqrtps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_rsqrtss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sarb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sarl___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarl___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sarq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sarw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sarw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sbb(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sbb(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sbb(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sbb(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_sbb(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_sbbb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sbbl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sbbl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_sbbq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sbbq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_sbbw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sbbw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_setb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setbe(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setle(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnb(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnbe(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnl(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnle(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setno(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnp(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setns(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setnz(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_seto(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setp(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sets(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_setz(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sgdt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shlb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void m_shld(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_shld_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_shll(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shll___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shll___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shlq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shlw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shlw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shrb___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrb___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void m_shrd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_shrd_CL(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_shrl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shrl___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrl___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shrq___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrq___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shrw___1(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shrw___CL(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_shufpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_shufps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_sidt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sldt(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_smsw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sqrtpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sqrtps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sqrtsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sqrtss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_stmxcsr(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_str(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sub(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sub(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sub(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sub(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_sub(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_subb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_subl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_subl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_subpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_subps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_subq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_subq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_subsd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_subss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_subw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_subw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_test(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_testb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_testl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_testq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_testw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void m_ucomisd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_ucomiss(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_unpckhpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_unpckhps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_unpcklpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_unpcklps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_verr(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_verw(int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_xadd(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_xchg(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_xor(AMD64GeneralRegister16 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xor(AMD64GeneralRegister32 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xor(AMD64GeneralRegister64 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xor(AMD64GeneralRegister8 destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void m_xor(int m32, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void m_xorb(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_xorl(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_xorl(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_xorpd(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xorps(AMD64XMMRegister destination, int m32, AMD64IndexRegister64 index, Scale scale);
//    void m_xorq(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_xorq(int m32, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void m_xorw(int m32, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void m_xorw(int m32, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void maskmovdqu(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void maskmovq(MMXRegister destination, MMXRegister source);
//    void maxpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void maxpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void maxpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void maxpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void maxps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void maxps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void maxps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void maxps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void maxsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void maxsd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void maxsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void maxsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void maxss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void maxss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void maxss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void maxss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void maxss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void minpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void minpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void minpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void minpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void minps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void minps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void minps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void minps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void minsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void minsd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void minsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void minsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void minss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void minss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void minss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void minss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void minss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void mov(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source);
//    void mov(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void mov(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister16 destination, SegmentRegister source);
//    void mov(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister16 register, short imm16);
//    void mov(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void mov(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister64 destination, ControlRegister source);
//    void mov(AMD64GeneralRegister64 destination, DebugRegister source);
//    void mov(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void mov(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void mov(AMD64GeneralRegister8 register, byte imm8);
//    void mov(AMD64IndirectRegister64 destination, SegmentRegister source);
//    void mov(ControlRegister destination, AMD64GeneralRegister64 source);
//    void mov(DebugRegister destination, AMD64GeneralRegister64 source);
//    void mov(SegmentRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(SegmentRegister destination, AMD64GeneralRegister16 source);
//    void mov(SegmentRegister destination, AMD64IndirectRegister64 source);
//    void mov(SegmentRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(SegmentRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void mov(SegmentRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mov(SegmentRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void mov(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source);
//    void mov(byte disp8, AMD64IndirectRegister64 destination, SegmentRegister source);
//    void mov(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, SegmentRegister source);
//    void mov(int disp32, AMD64IndirectRegister64 destination, SegmentRegister source);
//    void movapd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movapd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movapd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movapd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movapd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movapd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movapd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movapd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movapd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movapd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movapd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movapd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movapd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movaps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movaps(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movaps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movaps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movaps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movaps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movaps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movaps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movaps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movaps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movaps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movaps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movaps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movb(AMD64GeneralRegister8 destination, byte imm8);
//    void movddup(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movddup(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movddup(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movddup(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movddup(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movddup(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movddup(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdl(AMD64GeneralRegister32 destination, MMXRegister source);
//    void movdl(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdl(AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdl(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movdl(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(MMXRegister destination, AMD64GeneralRegister32 source);
//    void movdl(MMXRegister destination, AMD64IndirectRegister64 source);
//    void movdl(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movdl(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdl(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdl(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdl(int disp32, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdq(AMD64GeneralRegister64 destination, MMXRegister source);
//    void movdq(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdq(AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(MMXRegister destination, AMD64GeneralRegister64 source);
//    void movdq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void movdq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movdq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movdq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movdq2q(MMXRegister destination, AMD64XMMRegister source);
//    void movdqa(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqa(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdqa(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqa(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movdqa(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movdqa(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqa(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movdqa(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqa(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdqa(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqa(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdqa(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqa(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdqu(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqu(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdqu(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqu(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movdqu(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movdqu(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqu(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movdqu(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movdqu(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movdqu(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqu(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movdqu(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movdqu(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhlps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movhpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movhpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movhpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movhpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movhpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movhpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movhpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhps(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movhps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movhps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlhps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movlpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movlpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movlpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movlpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movlpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movlpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movlpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlps(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movlps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movlps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movmskpd(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
//    void movmskps(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
//    void movnti(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void movnti(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void movnti(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void movnti(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void movnti(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void movnti(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void movnti(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void movnti(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void movnti(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void movnti(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void movnti(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void movnti(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void movntpd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntpd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntpd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntpd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntpd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntpd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntps(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntps(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntps(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntps(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntps(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movntps(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movntq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movntq(AMD64IndirectRegister64 destination, MMXRegister source);
//    void movntq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movntq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movntq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movntq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void movq(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movq(AMD64IndirectRegister64 destination, MMXRegister source);
//    void movq(AMD64IndirectRegister64 destination, int imm32);
//    void movq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void movq(MMXRegister destination, MMXRegister source);
//    void movq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void movq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movq(byte disp8, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, MMXRegister source);
//    void movq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void movq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movq(int disp32, AMD64IndirectRegister64 destination, MMXRegister source);
//    void movq2dq(AMD64XMMRegister destination, MMXRegister source);
//    void movsb();
//    void movshdup(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movshdup(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movshdup(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movshdup(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movshdup(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movshdup(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movshdup(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movsl();
//    void movsldup(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsldup(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movsldup(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movsldup(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsldup(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movsldup(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsldup(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movsq();
//    void movsw();
//    void movsxb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister16 destination, AMD64GeneralRegister8 source);
//    void movsxb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void movsxb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void movsxb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void movsxb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void movsxb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxb(AMD64GeneralRegister64 destination, AMD64GeneralRegister8 source);
//    void movsxw(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxw(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void movsxw(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxw(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movsxw(AMD64GeneralRegister64 destination, AMD64GeneralRegister16 source);
//    void movupd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movupd(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movupd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movupd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movupd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movupd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movupd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movupd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movupd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movupd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movupd(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movupd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movupd(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movups(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movups(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movups(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movups(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void movups(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void movups(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movups(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void movups(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movups(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void movups(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movups(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movups(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void movups(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void movw(AMD64GeneralRegister16 destination, short imm16);
//    void movzxb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister16 destination, AMD64GeneralRegister8 source);
//    void movzxb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister32 destination, AMD64GeneralRegister8 source);
//    void movzxb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void movzxb(AMD64GeneralRegister64 destination, AMD64GeneralRegister8 source);
//    void movzxw(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxw(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void movzxw(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxw(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void movzxw(AMD64GeneralRegister64 destination, AMD64GeneralRegister16 source);
//    void mulb___AL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulb___AL(AMD64GeneralRegister8 destination);
//    void mulb___AL(AMD64IndirectRegister64 destination);
//    void mulb___AL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulb___AL(byte disp8, AMD64IndirectRegister64 destination);
//    void mulb___AL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulb___AL(int disp32, AMD64IndirectRegister64 destination);
//    void mull(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mull(AMD64GeneralRegister32 destination);
//    void mull(AMD64IndirectRegister64 destination);
//    void mull(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mull(byte disp8, AMD64IndirectRegister64 destination);
//    void mull(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mull(int disp32, AMD64IndirectRegister64 destination);
//    void mulpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void mulpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void mulpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void mulpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void mulps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void mulps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void mulps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void mulps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void mulq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulq(AMD64GeneralRegister64 destination);
//    void mulq(AMD64IndirectRegister64 destination);
//    void mulq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulq(byte disp8, AMD64IndirectRegister64 destination);
//    void mulq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulq(int disp32, AMD64IndirectRegister64 destination);
//    void mulsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void mulsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void mulss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulw(AMD64GeneralRegister16 destination);
//    void mulw(AMD64IndirectRegister64 destination);
//    void mulw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulw(byte disp8, AMD64IndirectRegister64 destination);
//    void mulw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void mulw(int disp32, AMD64IndirectRegister64 destination);
//    void mvntdq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void mvntdq(AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void mvntdq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void mvntdq(byte disp8, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void mvntdq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64XMMRegister source);
//    void mvntdq(int disp32, AMD64IndirectRegister64 destination, AMD64XMMRegister source);
//    void negb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negb(AMD64GeneralRegister8 destination);
//    void negb(AMD64IndirectRegister64 destination);
//    void negb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negb(byte disp8, AMD64IndirectRegister64 destination);
//    void negb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negb(int disp32, AMD64IndirectRegister64 destination);
//    void negl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negl(AMD64GeneralRegister32 destination);
//    void negl(AMD64IndirectRegister64 destination);
//    void negl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negl(byte disp8, AMD64IndirectRegister64 destination);
//    void negl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negl(int disp32, AMD64IndirectRegister64 destination);
//    void negq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negq(AMD64IndirectRegister64 destination);
//    void negq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negw(AMD64GeneralRegister16 destination);
//    void negw(AMD64IndirectRegister64 destination);
//    void negw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negw(byte disp8, AMD64IndirectRegister64 destination);
//    void negw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void negw(int disp32, AMD64IndirectRegister64 destination);
//    void notb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notb(AMD64GeneralRegister8 destination);
//    void notb(AMD64IndirectRegister64 destination);
//    void notb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notb(byte disp8, AMD64IndirectRegister64 destination);
//    void notb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notb(int disp32, AMD64IndirectRegister64 destination);
//    void notl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notl(AMD64GeneralRegister32 destination);
//    void notl(AMD64IndirectRegister64 destination);
//    void notl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notl(byte disp8, AMD64IndirectRegister64 destination);
//    void notl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notl(int disp32, AMD64IndirectRegister64 destination);
//    void notq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notq(AMD64IndirectRegister64 destination);
//    void notq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notw(AMD64GeneralRegister16 destination);
//    void notw(AMD64IndirectRegister64 destination);
//    void notw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notw(byte disp8, AMD64IndirectRegister64 destination);
//    void notw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void notw(int disp32, AMD64IndirectRegister64 destination);
//    void operand_size();
//    void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void or(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void or(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void or(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void or(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void or(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void or(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void or(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void or(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void or(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void or(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void or(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void or_AL(byte imm8);
//    void or_AX(short imm16);
//    void orb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orb(AMD64GeneralRegister8 destination, byte imm8);
//    void orb(AMD64IndirectRegister64 destination, byte imm8);
//    void orb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void orb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void orl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orl(AMD64IndirectRegister64 destination, byte imm8);
//    void orl(AMD64IndirectRegister64 destination, int imm32);
//    void orl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void orpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void orpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void orpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void orps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void orps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void orps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void orps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void orps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void orq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orq(AMD64IndirectRegister64 destination, byte imm8);
//    void orq(AMD64IndirectRegister64 destination, int imm32);
//    void orq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void orw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void orw(AMD64GeneralRegister16 destination, byte imm8);
//    void orw(AMD64GeneralRegister16 destination, short imm16);
//    void orw(AMD64IndirectRegister64 destination, byte imm8);
//    void orw(AMD64IndirectRegister64 destination, short imm16);
//    void orw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void orw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void orw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void orw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void orw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void orw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void orw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void out_DX_AL();
//    void out_DX_AX();
//    void out_DX_EAX();
//    void out_DX_RAX();
//    void out___AL(byte imm8);
//    void out___AX(byte imm8);
//    void out___EAX(byte imm8);
//    void out___RAX(byte imm8);
//    void outsb();
//    void outsl();
//    void outsw();
//    void packssdw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void packssdw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void packssdw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packssdw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void packssdw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void packssdw(MMXRegister destination, MMXRegister source);
//    void packssdw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packssdw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packssdw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void packsswb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void packsswb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void packsswb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packsswb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void packsswb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void packsswb(MMXRegister destination, MMXRegister source);
//    void packsswb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packsswb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packsswb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void packuswb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void packuswb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void packuswb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packuswb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void packuswb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void packuswb(MMXRegister destination, MMXRegister source);
//    void packuswb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void packuswb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void packuswb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddb(MMXRegister destination, MMXRegister source);
//    void paddb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddd(MMXRegister destination, MMXRegister source);
//    void paddd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddq(MMXRegister destination, MMXRegister source);
//    void paddq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddsb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddsb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddsb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddsb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddsb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddsb(MMXRegister destination, MMXRegister source);
//    void paddsb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddsb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddsw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddsw(MMXRegister destination, MMXRegister source);
//    void paddsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddusb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddusb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddusb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddusb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddusb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddusb(MMXRegister destination, MMXRegister source);
//    void paddusb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddusb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddusw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddusw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddusw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddusw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddusw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddusw(MMXRegister destination, MMXRegister source);
//    void paddusw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddusw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddusw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void paddw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void paddw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void paddw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void paddw(MMXRegister destination, MMXRegister source);
//    void paddw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void paddw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void paddw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pand(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pand(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pand(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pand(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pand(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pand(MMXRegister destination, MMXRegister source);
//    void pand(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pand(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pand(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pandn(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pandn(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pandn(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pandn(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pandn(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pandn(MMXRegister destination, MMXRegister source);
//    void pandn(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pandn(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pandn(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pavgb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pavgb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pavgb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pavgb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pavgb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pavgb(MMXRegister destination, MMXRegister source);
//    void pavgb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pavgb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pavgw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pavgw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pavgw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pavgw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pavgw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pavgw(MMXRegister destination, MMXRegister source);
//    void pavgw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pavgw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pavgw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpeqb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqb(MMXRegister destination, MMXRegister source);
//    void pcmpeqb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpeqd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqd(MMXRegister destination, MMXRegister source);
//    void pcmpeqd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpeqw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpeqw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpeqw(MMXRegister destination, MMXRegister source);
//    void pcmpeqw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpeqw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpeqw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpgtb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtb(MMXRegister destination, MMXRegister source);
//    void pcmpgtb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpgtd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtd(MMXRegister destination, MMXRegister source);
//    void pcmpgtd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pcmpgtw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pcmpgtw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pcmpgtw(MMXRegister destination, MMXRegister source);
//    void pcmpgtw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pcmpgtw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pcmpgtw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pextrw(AMD64GeneralRegister32 destination, AMD64XMMRegister source, byte imm8);
//    void pextrw(AMD64GeneralRegister32 destination, MMXRegister source, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, AMD64GeneralRegister32 source, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pinsrw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(MMXRegister destination, AMD64GeneralRegister32 source, byte imm8);
//    void pinsrw(MMXRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pinsrw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pinsrw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pinsrw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pmaddwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmaddwd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmaddwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaddwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmaddwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmaddwd(MMXRegister destination, MMXRegister source);
//    void pmaddwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaddwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaddwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmaxsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmaxsw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmaxsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaxsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmaxsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmaxsw(MMXRegister destination, MMXRegister source);
//    void pmaxsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaxsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmaxub(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmaxub(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmaxub(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaxub(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmaxub(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmaxub(MMXRegister destination, MMXRegister source);
//    void pmaxub(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmaxub(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmaxub(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pminsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pminsw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pminsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pminsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pminsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pminsw(MMXRegister destination, MMXRegister source);
//    void pminsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pminsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pminub(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pminub(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pminub(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pminub(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pminub(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pminub(MMXRegister destination, MMXRegister source);
//    void pminub(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pminub(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pminub(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmovmskb(AMD64GeneralRegister32 destination, AMD64XMMRegister source);
//    void pmovmskb(AMD64GeneralRegister32 destination, MMXRegister source);
//    void pmulhuw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmulhuw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmulhuw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmulhuw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmulhuw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmulhuw(MMXRegister destination, MMXRegister source);
//    void pmulhuw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmulhuw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhuw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmulhw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmulhw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmulhw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmulhw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmulhw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmulhw(MMXRegister destination, MMXRegister source);
//    void pmulhw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmulhw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmulhw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmullw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmullw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmullw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmullw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmullw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmullw(MMXRegister destination, MMXRegister source);
//    void pmullw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmullw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmullw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmuludq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pmuludq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pmuludq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmuludq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pmuludq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pmuludq(MMXRegister destination, MMXRegister source);
//    void pmuludq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pmuludq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pmuludq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pop(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pop(AMD64GeneralRegister16 register);
//    void pop(AMD64IndirectRegister64 destination);
//    void pop(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pop(byte disp8, AMD64IndirectRegister64 destination);
//    void pop(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pop(int disp32, AMD64IndirectRegister64 destination);
//    void pop_FS();
//    void pop_GS();
//    void popfq();
//    void popfw();
//    void por(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void por(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void por(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void por(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void por(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(MMXRegister destination, AMD64IndirectRegister64 source);
//    void por(MMXRegister destination, MMXRegister source);
//    void por(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void por(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void por(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void prefetch(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetch(AMD64IndirectRegister64 destination);
//    void prefetch(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetch(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetch(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetch(int disp32, AMD64IndirectRegister64 destination);
//    void prefetchnta(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchnta(AMD64IndirectRegister64 destination);
//    void prefetchnta(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchnta(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetchnta(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchnta(int disp32, AMD64IndirectRegister64 destination);
//    void prefetcht0(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht0(AMD64IndirectRegister64 destination);
//    void prefetcht0(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht0(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetcht0(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht0(int disp32, AMD64IndirectRegister64 destination);
//    void prefetcht1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht1(AMD64IndirectRegister64 destination);
//    void prefetcht1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht1(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetcht1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht1(int disp32, AMD64IndirectRegister64 destination);
//    void prefetcht2(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht2(AMD64IndirectRegister64 destination);
//    void prefetcht2(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht2(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetcht2(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetcht2(int disp32, AMD64IndirectRegister64 destination);
//    void prefetchw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchw(AMD64IndirectRegister64 destination);
//    void prefetchw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchw(byte disp8, AMD64IndirectRegister64 destination);
//    void prefetchw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void prefetchw(int disp32, AMD64IndirectRegister64 destination);
//    void psadbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psadbw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psadbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psadbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psadbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psadbw(MMXRegister destination, MMXRegister source);
//    void psadbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psadbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psadbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pshufd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pshufd(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8);
//    void pshufd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pshufd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufhw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshuflw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pshufw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufw(MMXRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void pshufw(MMXRegister destination, MMXRegister source, byte imm8);
//    void pshufw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void pshufw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void pshufw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void pslld(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pslld(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pslld(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pslld(AMD64XMMRegister destination, byte imm8);
//    void pslld(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pslld(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pslld(MMXRegister destination, MMXRegister source);
//    void pslld(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pslld(MMXRegister destination, byte imm8);
//    void pslld(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pslld(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pslldq(AMD64XMMRegister destination, byte imm8);
//    void psllq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psllq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psllq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psllq(AMD64XMMRegister destination, byte imm8);
//    void psllq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psllq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psllq(MMXRegister destination, MMXRegister source);
//    void psllq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psllq(MMXRegister destination, byte imm8);
//    void psllq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psllw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psllw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psllw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psllw(AMD64XMMRegister destination, byte imm8);
//    void psllw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psllw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psllw(MMXRegister destination, MMXRegister source);
//    void psllw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psllw(MMXRegister destination, byte imm8);
//    void psllw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psllw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrad(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psrad(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psrad(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrad(AMD64XMMRegister destination, byte imm8);
//    void psrad(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrad(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psrad(MMXRegister destination, MMXRegister source);
//    void psrad(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrad(MMXRegister destination, byte imm8);
//    void psrad(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrad(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psraw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psraw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psraw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psraw(AMD64XMMRegister destination, byte imm8);
//    void psraw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psraw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psraw(MMXRegister destination, MMXRegister source);
//    void psraw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psraw(MMXRegister destination, byte imm8);
//    void psraw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psraw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrld(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psrld(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psrld(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrld(AMD64XMMRegister destination, byte imm8);
//    void psrld(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrld(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psrld(MMXRegister destination, MMXRegister source);
//    void psrld(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrld(MMXRegister destination, byte imm8);
//    void psrld(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrld(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrldq(AMD64XMMRegister destination, byte imm8);
//    void psrlq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psrlq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psrlq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrlq(AMD64XMMRegister destination, byte imm8);
//    void psrlq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrlq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psrlq(MMXRegister destination, MMXRegister source);
//    void psrlq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrlq(MMXRegister destination, byte imm8);
//    void psrlq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrlw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psrlw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psrlw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrlw(AMD64XMMRegister destination, byte imm8);
//    void psrlw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psrlw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psrlw(MMXRegister destination, MMXRegister source);
//    void psrlw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psrlw(MMXRegister destination, byte imm8);
//    void psrlw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psrlw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubb(MMXRegister destination, MMXRegister source);
//    void psubb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubd(MMXRegister destination, MMXRegister source);
//    void psubd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubq(MMXRegister destination, MMXRegister source);
//    void psubq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubsb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubsb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubsb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubsb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubsb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubsb(MMXRegister destination, MMXRegister source);
//    void psubsb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubsb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubsw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubsw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubsw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubsw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubsw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubsw(MMXRegister destination, MMXRegister source);
//    void psubsw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubsw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubsw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubusb(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubusb(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubusb(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubusb(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubusb(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubusb(MMXRegister destination, MMXRegister source);
//    void psubusb(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubusb(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusb(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubusw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubusw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubusw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubusw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubusw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubusw(MMXRegister destination, MMXRegister source);
//    void psubusw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubusw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubusw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void psubw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void psubw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void psubw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void psubw(MMXRegister destination, MMXRegister source);
//    void psubw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void psubw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void psubw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpckhbw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpckhbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpckhbw(MMXRegister destination, MMXRegister source);
//    void punpckhbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpckhdq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpckhdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhdq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpckhdq(MMXRegister destination, MMXRegister source);
//    void punpckhdq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhdq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhdq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhqdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhqdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpckhqdq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpckhqdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhqdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhqdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhqdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpckhwd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpckhwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckhwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpckhwd(MMXRegister destination, MMXRegister source);
//    void punpckhwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckhwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckhwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpcklbw(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpcklbw(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpcklbw(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpcklbw(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpcklbw(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpcklbw(MMXRegister destination, MMXRegister source);
//    void punpcklbw(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpcklbw(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklbw(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckldq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpckldq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpckldq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckldq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpckldq(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpckldq(MMXRegister destination, MMXRegister source);
//    void punpckldq(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpckldq(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpckldq(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpcklqdq(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklqdq(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpcklqdq(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpcklqdq(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklqdq(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpcklqdq(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklqdq(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpcklwd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void punpcklwd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void punpcklwd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpcklwd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void punpcklwd(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(MMXRegister destination, AMD64IndirectRegister64 source);
//    void punpcklwd(MMXRegister destination, MMXRegister source);
//    void punpcklwd(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void punpcklwd(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void punpcklwd(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void push(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void push(AMD64GeneralRegister16 register);
//    void push(AMD64IndirectRegister64 destination);
//    void push(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void push(byte disp8, AMD64IndirectRegister64 destination);
//    void push(byte imm8);
//    void push(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void push(int disp32, AMD64IndirectRegister64 destination);
//    void push(short imm16);
//    void push_FS();
//    void push_GS();
//    void pushfq();
//    void pushfw();
//    void pxor(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void pxor(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void pxor(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pxor(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void pxor(MMXRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(MMXRegister destination, AMD64IndirectRegister64 source);
//    void pxor(MMXRegister destination, MMXRegister source);
//    void pxor(MMXRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(MMXRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void pxor(MMXRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void pxor(MMXRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void rclb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclb(AMD64GeneralRegister8 destination, byte imm8);
//    void rclb(AMD64IndirectRegister64 destination, byte imm8);
//    void rclb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rclb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rclb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___1(AMD64GeneralRegister8 destination);
//    void rclb___1(AMD64IndirectRegister64 destination);
//    void rclb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rclb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___1(int disp32, AMD64IndirectRegister64 destination);
//    void rclb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___CL(AMD64GeneralRegister8 destination);
//    void rclb___CL(AMD64IndirectRegister64 destination);
//    void rclb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rclb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rcll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcll(AMD64GeneralRegister32 destination, byte imm8);
//    void rcll(AMD64IndirectRegister64 destination, byte imm8);
//    void rcll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcll(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rcll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcll(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rcll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___1(AMD64GeneralRegister32 destination);
//    void rcll___1(AMD64IndirectRegister64 destination);
//    void rcll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rcll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___1(int disp32, AMD64IndirectRegister64 destination);
//    void rcll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___CL(AMD64GeneralRegister32 destination);
//    void rcll___CL(AMD64IndirectRegister64 destination);
//    void rcll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rcll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcll___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rclq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclq(AMD64GeneralRegister64 destination, byte imm8);
//    void rclq(AMD64IndirectRegister64 destination, byte imm8);
//    void rclq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rclq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rclq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___1(AMD64GeneralRegister64 destination);
//    void rclq___1(AMD64IndirectRegister64 destination);
//    void rclq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rclq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___1(int disp32, AMD64IndirectRegister64 destination);
//    void rclq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___CL(AMD64GeneralRegister64 destination);
//    void rclq___CL(AMD64IndirectRegister64 destination);
//    void rclq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rclq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclq___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rclw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclw(AMD64GeneralRegister16 destination, byte imm8);
//    void rclw(AMD64IndirectRegister64 destination, byte imm8);
//    void rclw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rclw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rclw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rclw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___1(AMD64GeneralRegister16 destination);
//    void rclw___1(AMD64IndirectRegister64 destination);
//    void rclw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rclw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___1(int disp32, AMD64IndirectRegister64 destination);
//    void rclw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___CL(AMD64GeneralRegister16 destination);
//    void rclw___CL(AMD64IndirectRegister64 destination);
//    void rclw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rclw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rclw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rcpps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void rcpps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void rcpps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void rcpps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void rcpss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void rcpss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void rcpss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void rcpss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcpss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void rcrb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrb(AMD64GeneralRegister8 destination, byte imm8);
//    void rcrb(AMD64IndirectRegister64 destination, byte imm8);
//    void rcrb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___1(AMD64GeneralRegister8 destination);
//    void rcrb___1(AMD64IndirectRegister64 destination);
//    void rcrb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___1(int disp32, AMD64IndirectRegister64 destination);
//    void rcrb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___CL(AMD64GeneralRegister8 destination);
//    void rcrb___CL(AMD64IndirectRegister64 destination);
//    void rcrb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rcrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrl(AMD64GeneralRegister32 destination, byte imm8);
//    void rcrl(AMD64IndirectRegister64 destination, byte imm8);
//    void rcrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___1(AMD64GeneralRegister32 destination);
//    void rcrl___1(AMD64IndirectRegister64 destination);
//    void rcrl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___1(int disp32, AMD64IndirectRegister64 destination);
//    void rcrl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___CL(AMD64GeneralRegister32 destination);
//    void rcrl___CL(AMD64IndirectRegister64 destination);
//    void rcrl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrl___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rcrq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrq(AMD64GeneralRegister64 destination, byte imm8);
//    void rcrq(AMD64IndirectRegister64 destination, byte imm8);
//    void rcrq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___1(AMD64GeneralRegister64 destination);
//    void rcrq___1(AMD64IndirectRegister64 destination);
//    void rcrq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___1(int disp32, AMD64IndirectRegister64 destination);
//    void rcrq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___CL(AMD64GeneralRegister64 destination);
//    void rcrq___CL(AMD64IndirectRegister64 destination);
//    void rcrq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrq___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rcrw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrw(AMD64GeneralRegister16 destination, byte imm8);
//    void rcrw(AMD64IndirectRegister64 destination, byte imm8);
//    void rcrw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rcrw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rcrw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___1(AMD64GeneralRegister16 destination);
//    void rcrw___1(AMD64IndirectRegister64 destination);
//    void rcrw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___1(int disp32, AMD64IndirectRegister64 destination);
//    void rcrw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___CL(AMD64GeneralRegister16 destination);
//    void rcrw___CL(AMD64IndirectRegister64 destination);
//    void rcrw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rcrw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rcrw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rdmsr();
//    void rdpmc();
//    void rdtsc();
//    void repe();
//    void repne();
//    void retf();
//    void retf(short imm16);
//    void rip_adc(AMD64GeneralRegister16 destination, int rel32);
//    void rip_adc(AMD64GeneralRegister32 destination, int rel32);
//    void rip_adc(AMD64GeneralRegister64 destination, int rel32);
//    void rip_adc(AMD64GeneralRegister8 destination, int rel32);
//    void rip_adc(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_adc(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_adc(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_adc(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_adc(final Label label, final AMD64GeneralRegister16 source);
//    void rip_adc(final Label label, final AMD64GeneralRegister32 source);
//    void rip_adc(final Label label, final AMD64GeneralRegister64 source);
//    void rip_adc(final Label label, final AMD64GeneralRegister8 source);
//    void rip_adc(int rel32, AMD64GeneralRegister16 source);
//    void rip_adc(int rel32, AMD64GeneralRegister32 source);
//    void rip_adc(int rel32, AMD64GeneralRegister64 source);
//    void rip_adc(int rel32, AMD64GeneralRegister8 source);
//    void rip_adcb(final Label label, final byte imm8);
//    void rip_adcb(int rel32, byte imm8);
//    void rip_adcl(final Label label, final byte imm8);
//    void rip_adcl(final Label label, final int imm32);
//    void rip_adcl(int rel32, byte imm8);
//    void rip_adcl(int rel32, int imm32);
//    void rip_adcq(final Label label, final byte imm8);
//    void rip_adcq(final Label label, final int imm32);
//    void rip_adcq(int rel32, byte imm8);
//    void rip_adcq(int rel32, int imm32);
//    void rip_adcw(final Label label, final byte imm8);
//    void rip_adcw(final Label label, final short imm16);
//    void rip_adcw(int rel32, byte imm8);
//    void rip_adcw(int rel32, short imm16);
//    void rip_add(AMD64GeneralRegister16 destination, int rel32);
//    void rip_add(AMD64GeneralRegister8 destination, int rel32);
//    void rip_add(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_add(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_add(final Label label, final AMD64GeneralRegister16 source);
//    void rip_add(final Label label, final AMD64GeneralRegister32 source);
//    void rip_add(final Label label, final AMD64GeneralRegister64 source);
//    void rip_add(final Label label, final AMD64GeneralRegister8 source);
//    void rip_add(int rel32, AMD64GeneralRegister16 source);
//    void rip_add(int rel32, AMD64GeneralRegister32 source);
//    void rip_add(int rel32, AMD64GeneralRegister64 source);
//    void rip_add(int rel32, AMD64GeneralRegister8 source);
//    void rip_addb(final Label label, final byte imm8);
//    void rip_addb(int rel32, byte imm8);
//    void rip_addl(final Label label, final byte imm8);
//    void rip_addl(final Label label, final int imm32);
//    void rip_addl(int rel32, byte imm8);
//    void rip_addl(int rel32, int imm32);
//    void rip_addpd(AMD64XMMRegister destination, int rel32);
//    void rip_addpd(final AMD64XMMRegister destination, final Label label);
//    void rip_addps(AMD64XMMRegister destination, int rel32);
//    void rip_addps(final AMD64XMMRegister destination, final Label label);
//    void rip_addq(final Label label, final byte imm8);
//    void rip_addq(final Label label, final int imm32);
//    void rip_addq(int rel32, byte imm8);
//    void rip_addq(int rel32, int imm32);
//    void rip_addsubpd(AMD64XMMRegister destination, int rel32);
//    void rip_addsubpd(final AMD64XMMRegister destination, final Label label);
//    void rip_addw(final Label label, final byte imm8);
//    void rip_addw(final Label label, final short imm16);
//    void rip_addw(int rel32, byte imm8);
//    void rip_addw(int rel32, short imm16);
//    void rip_and(AMD64GeneralRegister16 destination, int rel32);
//    void rip_and(AMD64GeneralRegister8 destination, int rel32);
//    void rip_and(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_and(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_and(final Label label, final AMD64GeneralRegister16 source);
//    void rip_and(final Label label, final AMD64GeneralRegister32 source);
//    void rip_and(final Label label, final AMD64GeneralRegister64 source);
//    void rip_and(final Label label, final AMD64GeneralRegister8 source);
//    void rip_and(int rel32, AMD64GeneralRegister16 source);
//    void rip_and(int rel32, AMD64GeneralRegister32 source);
//    void rip_and(int rel32, AMD64GeneralRegister64 source);
//    void rip_and(int rel32, AMD64GeneralRegister8 source);
//    void rip_andb(final Label label, final byte imm8);
//    void rip_andb(int rel32, byte imm8);
//    void rip_andl(final Label label, final byte imm8);
//    void rip_andl(final Label label, final int imm32);
//    void rip_andl(int rel32, byte imm8);
//    void rip_andl(int rel32, int imm32);
//    void rip_andnpd(AMD64XMMRegister destination, int rel32);
//    void rip_andnpd(final AMD64XMMRegister destination, final Label label);
//    void rip_andnps(AMD64XMMRegister destination, int rel32);
//    void rip_andnps(final AMD64XMMRegister destination, final Label label);
//    void rip_andpd(AMD64XMMRegister destination, int rel32);
//    void rip_andpd(final AMD64XMMRegister destination, final Label label);
//    void rip_andps(AMD64XMMRegister destination, int rel32);
//    void rip_andps(final AMD64XMMRegister destination, final Label label);
//    void rip_andq(final Label label, final byte imm8);
//    void rip_andq(final Label label, final int imm32);
//    void rip_andq(int rel32, byte imm8);
//    void rip_andq(int rel32, int imm32);
//    void rip_andw(final Label label, final byte imm8);
//    void rip_andw(final Label label, final short imm16);
//    void rip_andw(int rel32, byte imm8);
//    void rip_andw(int rel32, short imm16);
//    void rip_bsf(AMD64GeneralRegister16 destination, int rel32);
//    void rip_bsf(AMD64GeneralRegister32 destination, int rel32);
//    void rip_bsf(AMD64GeneralRegister64 destination, int rel32);
//    void rip_bsf(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_bsf(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_bsf(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_bsr(AMD64GeneralRegister16 destination, int rel32);
//    void rip_bsr(AMD64GeneralRegister32 destination, int rel32);
//    void rip_bsr(AMD64GeneralRegister64 destination, int rel32);
//    void rip_bsr(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_bsr(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_bsr(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_bt(final Label label, final AMD64GeneralRegister16 source);
//    void rip_bt(final Label label, final AMD64GeneralRegister32 source);
//    void rip_bt(final Label label, final AMD64GeneralRegister64 source);
//    void rip_bt(final Label label, final byte imm8);
//    void rip_bt(int rel32, AMD64GeneralRegister16 source);
//    void rip_bt(int rel32, AMD64GeneralRegister32 source);
//    void rip_bt(int rel32, AMD64GeneralRegister64 source);
//    void rip_bt(int rel32, byte imm8);
//    void rip_btc(final Label label, final AMD64GeneralRegister16 source);
//    void rip_btc(final Label label, final AMD64GeneralRegister32 source);
//    void rip_btc(final Label label, final AMD64GeneralRegister64 source);
//    void rip_btc(final Label label, final byte imm8);
//    void rip_btc(int rel32, AMD64GeneralRegister16 source);
//    void rip_btc(int rel32, AMD64GeneralRegister32 source);
//    void rip_btc(int rel32, AMD64GeneralRegister64 source);
//    void rip_btc(int rel32, byte imm8);
//    void rip_btr(final Label label, final AMD64GeneralRegister16 source);
//    void rip_btr(final Label label, final AMD64GeneralRegister32 source);
//    void rip_btr(final Label label, final AMD64GeneralRegister64 source);
//    void rip_btr(final Label label, final byte imm8);
//    void rip_btr(int rel32, AMD64GeneralRegister16 source);
//    void rip_btr(int rel32, AMD64GeneralRegister32 source);
//    void rip_btr(int rel32, AMD64GeneralRegister64 source);
//    void rip_btr(int rel32, byte imm8);
//    void rip_bts(final Label label, final AMD64GeneralRegister16 source);
//    void rip_bts(final Label label, final AMD64GeneralRegister32 source);
//    void rip_bts(final Label label, final AMD64GeneralRegister64 source);
//    void rip_bts(final Label label, final byte imm8);
//    void rip_bts(int rel32, AMD64GeneralRegister16 source);
//    void rip_bts(int rel32, AMD64GeneralRegister32 source);
//    void rip_bts(int rel32, AMD64GeneralRegister64 source);
//    void rip_bts(int rel32, byte imm8);
//    void rip_clflush(final Label label);
//    void rip_clflush(int rel32);
//    void rip_cmova(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmova(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmova(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmova(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovae(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovae(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovae(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovae(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovae(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovae(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovb(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovb(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovb(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovb(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovbe(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovbe(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovbe(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovbe(final AMD64GeneralRegister16 destination, final Label label);
    void rip_cmovbe(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovbe(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmove(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmove(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmove(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmove(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovg(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovg(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovg(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovg(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovge(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovge(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovge(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovge(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovl(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovl(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovl(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovl(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovle(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovle(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovle(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovle(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovne(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovne(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovne(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovne(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovne(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovne(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovno(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovno(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovno(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovno(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovno(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovno(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovnp(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovnp(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovnp(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovnp(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovnp(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovnp(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovns(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovns(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovns(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovns(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovns(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovns(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovo(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovo(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovo(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovo(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovo(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovo(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovp(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovp(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovp(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovp(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmovs(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmovs(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cmovs(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cmovs(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmovs(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_cmovs(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_cmp(AMD64GeneralRegister16 destination, int rel32);
//    void rip_cmp(AMD64GeneralRegister8 destination, int rel32);
//    void rip_cmp(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_cmp(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_cmp(final Label label, final AMD64GeneralRegister16 source);
//    void rip_cmp(final Label label, final AMD64GeneralRegister32 source);
//    void rip_cmp(final Label label, final AMD64GeneralRegister64 source);
//    void rip_cmp(final Label label, final AMD64GeneralRegister8 source);
//    void rip_cmp(int rel32, AMD64GeneralRegister16 source);
//    void rip_cmp(int rel32, AMD64GeneralRegister32 source);
//    void rip_cmp(int rel32, AMD64GeneralRegister64 source);
//    void rip_cmp(int rel32, AMD64GeneralRegister8 source);
//    void rip_cmpb(final Label label, final byte imm8);
//    void rip_cmpb(int rel32, byte imm8);
//    void rip_cmpl(final Label label, final byte imm8);
//    void rip_cmpl(final Label label, final int imm32);
//    void rip_cmpl(int rel32, byte imm8);
//    void rip_cmpl(int rel32, int imm32);
//    void rip_cmppd(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison);
//    void rip_cmppd(final AMD64XMMRegister destination, final Label label, final AMD64XMMComparison amd64xmmcomparison);
//    void rip_cmpps(AMD64XMMRegister destination, int rel32, AMD64XMMComparison amd64xmmcomparison);
//    void rip_cmpps(final AMD64XMMRegister destination, final Label label, final AMD64XMMComparison amd64xmmcomparison);
//    void rip_cmpq(final Label label, final byte imm8);
//    void rip_cmpq(final Label label, final int imm32);
//    void rip_cmpq(int rel32, byte imm8);
//    void rip_cmpq(int rel32, int imm32);
//    void rip_cmpw(final Label label, final byte imm8);
//    void rip_cmpw(final Label label, final short imm16);
//    void rip_cmpw(int rel32, byte imm8);
//    void rip_cmpw(int rel32, short imm16);
//    void rip_cmpxchg(final Label label, final AMD64GeneralRegister16 source);
//    void rip_cmpxchg(final Label label, final AMD64GeneralRegister32 source);
//    void rip_cmpxchg(final Label label, final AMD64GeneralRegister64 source);
//    void rip_cmpxchg(final Label label, final AMD64GeneralRegister8 source);
//    void rip_cmpxchg(int rel32, AMD64GeneralRegister16 source);
//    void rip_cmpxchg(int rel32, AMD64GeneralRegister32 source);
//    void rip_cmpxchg(int rel32, AMD64GeneralRegister64 source);
//    void rip_cmpxchg(int rel32, AMD64GeneralRegister8 source);
//    void rip_cmpxchg16b(final Label label);
//    void rip_cmpxchg16b(int rel32);
//    void rip_cvtdq2pd(AMD64XMMRegister destination, int rel32);
//    void rip_cvtdq2pd(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtdq2ps(AMD64XMMRegister destination, int rel32);
//    void rip_cvtdq2ps(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtpd2dq(AMD64XMMRegister destination, int rel32);
//    void rip_cvtpd2dq(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtpd2pi(MMXRegister destination, int rel32);
//    void rip_cvtpd2pi(final MMXRegister destination, final Label label);
//    void rip_cvtpd2ps(AMD64XMMRegister destination, int rel32);
//    void rip_cvtpd2ps(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtpi2pd(AMD64XMMRegister destination, int rel32);
//    void rip_cvtpi2pd(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtpi2ps(AMD64XMMRegister destination, int rel32);
//    void rip_cvtpi2ps(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtps2dq(AMD64XMMRegister destination, int rel32);
//    void rip_cvtps2dq(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtps2pd(AMD64XMMRegister destination, int rel32);
//    void rip_cvtps2pd(final AMD64XMMRegister destination, final Label label);
//    void rip_cvtps2pi(MMXRegister destination, int rel32);
//    void rip_cvtps2pi(final MMXRegister destination, final Label label);
//    void rip_cvttpd2dq(AMD64XMMRegister destination, int rel32);
//    void rip_cvttpd2dq(final AMD64XMMRegister destination, final Label label);
//    void rip_cvttpd2pi(MMXRegister destination, int rel32);
//    void rip_cvttpd2pi(final MMXRegister destination, final Label label);
//    void rip_cvttps2dq(AMD64XMMRegister destination, int rel32);
//    void rip_cvttps2dq(final AMD64XMMRegister destination, final Label label);
//    void rip_cvttps2pi(MMXRegister destination, int rel32);
//    void rip_cvttps2pi(final MMXRegister destination, final Label label);
//    void rip_cvttsd2si(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cvttsd2si(AMD64GeneralRegister64 destination, int rel32);
//    void rip_cvttss2si(AMD64GeneralRegister32 destination, int rel32);
//    void rip_cvttss2si(AMD64GeneralRegister64 destination, int rel32);
//    void rip_decb(final Label label);
//    void rip_decb(int rel32);
//    void rip_decl(final Label label);
//    void rip_decl(int rel32);
//    void rip_decq(final Label label);
//    void rip_decq(int rel32);
//    void rip_decw(final Label label);
//    void rip_decw(int rel32);
//    void rip_divb___AL(final Label label);
//    void rip_divb___AL(int rel32);
//    void rip_divl(final Label label);
//    void rip_divl(int rel32);
//    void rip_divpd(AMD64XMMRegister destination, int rel32);
//    void rip_divpd(final AMD64XMMRegister destination, final Label label);
//    void rip_divps(AMD64XMMRegister destination, int rel32);
//    void rip_divps(final AMD64XMMRegister destination, final Label label);
//    void rip_divw(final Label label);
//    void rip_divw(int rel32);
//    void rip_faddl(final Label label);
//    void rip_faddl(int rel32);
//    void rip_fadds(final Label label);
//    void rip_fadds(int rel32);
//    void rip_fbld(final Label label);
//    void rip_fbld(int rel32);
//    void rip_fbstp(final Label label);
//    void rip_fbstp(int rel32);
//    void rip_fcoml(final Label label);
//    void rip_fcoml(int rel32);
//    void rip_fcompl(final Label label);
//    void rip_fcompl(int rel32);
//    void rip_fcomps(final Label label);
//    void rip_fcomps(int rel32);
//    void rip_fcoms(final Label label);
//    void rip_fcoms(int rel32);
//    void rip_fdivl(final Label label);
//    void rip_fdivl(int rel32);
//    void rip_fdivrl(final Label label);
//    void rip_fdivrl(int rel32);
//    void rip_fdivrs(final Label label);
//    void rip_fdivrs(int rel32);
//    void rip_fdivs(final Label label);
//    void rip_fdivs(int rel32);
//    void rip_fiaddl(final Label label);
//    void rip_fiaddl(int rel32);
//    void rip_fiadds(final Label label);
//    void rip_fiadds(int rel32);
//    void rip_ficoml(final Label label);
//    void rip_ficoml(int rel32);
//    void rip_ficompl(final Label label);
//    void rip_ficompl(int rel32);
//    void rip_ficomps(final Label label);
//    void rip_ficomps(int rel32);
//    void rip_ficoms(final Label label);
//    void rip_ficoms(int rel32);
//    void rip_fidivl(final Label label);
//    void rip_fidivl(int rel32);
//    void rip_fidivrl(final Label label);
//    void rip_fidivrl(int rel32);
//    void rip_fidivrs(final Label label);
//    void rip_fidivrs(int rel32);
//    void rip_fidivs(final Label label);
//    void rip_fidivs(int rel32);
//    void rip_fildl(final Label label);
//    void rip_fildl(int rel32);
//    void rip_fildq(final Label label);
//    void rip_fildq(int rel32);
//    void rip_filds(final Label label);
//    void rip_filds(int rel32);
//    void rip_fimull(final Label label);
//    void rip_fimull(int rel32);
//    void rip_fimuls(final Label label);
//    void rip_fimuls(int rel32);
//    void rip_fistl(final Label label);
//    void rip_fistl(int rel32);
//    void rip_fistpl(final Label label);
//    void rip_fistpl(int rel32);
//    void rip_fistpq(final Label label);
//    void rip_fistpq(int rel32);
//    void rip_fistps(final Label label);
//    void rip_fistps(int rel32);
//    void rip_fists(final Label label);
//    void rip_fists(int rel32);
//    void rip_fisubl(final Label label);
//    void rip_fisubl(int rel32);
//    void rip_fisubrl(final Label label);
//    void rip_fisubrl(int rel32);
//    void rip_fisubrs(final Label label);
//    void rip_fisubrs(int rel32);
//    void rip_fisubs(final Label label);
//    void rip_fisubs(int rel32);
//    void rip_fldcw(final Label label);
//    void rip_fldcw(int rel32);
//    void rip_fldenv(final Label label);
//    void rip_fldenv(int rel32);
//    void rip_fldl(final Label label);
//    void rip_fldl(int rel32);
//    void rip_flds(final Label label);
//    void rip_flds(int rel32);
//    void rip_fldt(final Label label);
//    void rip_fldt(int rel32);
//    void rip_fmull(final Label label);
//    void rip_fmull(int rel32);
//    void rip_fmuls(final Label label);
//    void rip_fmuls(int rel32);
//    void rip_frstor(final Label label);
//    void rip_frstor(int rel32);
//    void rip_fsave(final Label label);
//    void rip_fsave(int rel32);
//    void rip_fstcw(final Label label);
//    void rip_fstcw(int rel32);
//    void rip_fstenv(final Label label);
//    void rip_fstenv(int rel32);
//    void rip_fstl(final Label label);
//    void rip_fstl(int rel32);
//    void rip_fstpl(final Label label);
//    void rip_fstpl(int rel32);
//    void rip_fstps(final Label label);
//    void rip_fstps(int rel32);
//    void rip_fstpt(final Label label);
//    void rip_fstpt(int rel32);
//    void rip_fsts(final Label label);
//    void rip_fsts(int rel32);
//    void rip_fstsw(final Label label);
//    void rip_fstsw(int rel32);
//    void rip_fsubl(final Label label);
//    void rip_fsubl(int rel32);
//    void rip_fsubrl(final Label label);
//    void rip_fsubrl(int rel32);
//    void rip_fsubrs(final Label label);
//    void rip_fsubrs(int rel32);
//    void rip_fsubs(final Label label);
//    void rip_fsubs(int rel32);
//    void rip_fxrstor(final Label label);
//    void rip_fxrstor(int rel32);
//    void rip_fxsave(final Label label);
//    void rip_fxsave(int rel32);
//    void rip_haddpd(AMD64XMMRegister destination, int rel32);
//    void rip_haddpd(final AMD64XMMRegister destination, final Label label);
//    void rip_haddps(AMD64XMMRegister destination, int rel32);
//    void rip_haddps(final AMD64XMMRegister destination, final Label label);
//    void rip_hsubpd(AMD64XMMRegister destination, int rel32);
//    void rip_hsubpd(final AMD64XMMRegister destination, final Label label);
//    void rip_hsubps(AMD64XMMRegister destination, int rel32);
//    void rip_hsubps(final AMD64XMMRegister destination, final Label label);
//    void rip_idivb___AL(final Label label);
//    void rip_idivb___AL(int rel32);
//    void rip_idivw(final Label label);
//    void rip_idivw(int rel32);
//    void rip_imul(AMD64GeneralRegister16 destination, int rel32);
//    void rip_imul(AMD64GeneralRegister16 destination, int rel32, byte imm8);
//    void rip_imul(AMD64GeneralRegister16 destination, int rel32, short imm16);
//    void rip_imul(AMD64GeneralRegister32 destination, int rel32, byte imm8);
//    void rip_imul(AMD64GeneralRegister32 destination, int rel32, int imm32);
//    void rip_imul(AMD64GeneralRegister64 destination, int rel32, byte imm8);
//    void rip_imul(AMD64GeneralRegister64 destination, int rel32, int imm32);
//    void rip_imul(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_imul(final AMD64GeneralRegister16 destination, final Label label, final byte imm8);
//    void rip_imul(final AMD64GeneralRegister16 destination, final Label label, final short imm16);
//    void rip_imul(final AMD64GeneralRegister32 destination, final Label label, final byte imm8);
//    void rip_imul(final AMD64GeneralRegister32 destination, final Label label, final int imm32);
//    void rip_imul(final AMD64GeneralRegister64 destination, final Label label, final byte imm8);
//    void rip_imul(final AMD64GeneralRegister64 destination, final Label label, final int imm32);
//    void rip_imulb___AL(final Label label);
//    void rip_imulb___AL(int rel32);
//    void rip_imull(final Label label);
//    void rip_imull(int rel32);
//    void rip_imulq(final Label label);
//    void rip_imulq(int rel32);
//    void rip_imulw(final Label label);
//    void rip_imulw(int rel32);
//    void rip_incb(final Label label);
//    void rip_incb(int rel32);
//    void rip_incl(final Label label);
//    void rip_incl(int rel32);
//    void rip_incq(final Label label);
//    void rip_incq(int rel32);
//    void rip_incw(final Label label);
//    void rip_incw(int rel32);
//    void rip_invlpg(final Label label);
//    void rip_invlpg(int rel32);
//    void rip_lar(AMD64GeneralRegister16 destination, int rel32);
//    void rip_lar(AMD64GeneralRegister32 destination, int rel32);
//    void rip_lar(AMD64GeneralRegister64 destination, int rel32);
//    void rip_lar(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_lar(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_lar(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_lddqu(AMD64XMMRegister destination, int rel32);
//    void rip_lddqu(final AMD64XMMRegister destination, final Label label);
//    void rip_ldmxcsr(final Label label);
//    void rip_ldmxcsr(int rel32);
//    void rip_lea(AMD64GeneralRegister16 destination, int rel32);
//    void rip_lea(AMD64GeneralRegister32 destination, int rel32);
//    void rip_lea(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_lea(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_lgdt(final Label label);
//    void rip_lgdt(int rel32);
//    void rip_lidt(final Label label);
//    void rip_lidt(int rel32);
//    void rip_lldt(final Label label);
//    void rip_lldt(int rel32);
//    void rip_lmsw(final Label label);
//    void rip_lmsw(int rel32);
//    void rip_lsl(AMD64GeneralRegister16 destination, int rel32);
//    void rip_lsl(AMD64GeneralRegister32 destination, int rel32);
//    void rip_lsl(AMD64GeneralRegister64 destination, int rel32);
//    void rip_lsl(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_lsl(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_lsl(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_ltr(final Label label);
//    void rip_ltr(int rel32);
//    void rip_maxpd(AMD64XMMRegister destination, int rel32);
//    void rip_maxpd(final AMD64XMMRegister destination, final Label label);
//    void rip_maxps(AMD64XMMRegister destination, int rel32);
//    void rip_maxps(final AMD64XMMRegister destination, final Label label);
//    void rip_maxsd(AMD64XMMRegister destination, int rel32);
//    void rip_maxsd(final AMD64XMMRegister destination, final Label label);
//    void rip_maxss(AMD64XMMRegister destination, int rel32);
//    void rip_maxss(final AMD64XMMRegister destination, final Label label);
//    void rip_minpd(AMD64XMMRegister destination, int rel32);
//    void rip_minpd(final AMD64XMMRegister destination, final Label label);
//    void rip_minps(AMD64XMMRegister destination, int rel32);
//    void rip_minps(final AMD64XMMRegister destination, final Label label);
//    void rip_minsd(AMD64XMMRegister destination, int rel32);
//    void rip_minsd(final AMD64XMMRegister destination, final Label label);
//    void rip_minss(AMD64XMMRegister destination, int rel32);
//    void rip_minss(final AMD64XMMRegister destination, final Label label);
//    void rip_mov(AMD64GeneralRegister16 destination, int rel32);
//    void rip_mov(AMD64GeneralRegister32 destination, int rel32);
//    void rip_mov(AMD64GeneralRegister8 destination, int rel32);
//    void rip_mov(SegmentRegister destination, int rel32);
//    void rip_mov(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_mov(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_mov(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_mov(final Label label, final AMD64GeneralRegister16 source);
//    void rip_mov(final Label label, final AMD64GeneralRegister32 source);
//    void rip_mov(final Label label, final AMD64GeneralRegister64 source);
//    void rip_mov(final Label label, final AMD64GeneralRegister8 source);
//    void rip_mov(final Label label, final SegmentRegister source);
//    void rip_mov(final SegmentRegister destination, final Label label);
//    void rip_mov(int rel32, AMD64GeneralRegister16 source);
//    void rip_mov(int rel32, AMD64GeneralRegister32 source);
//    void rip_mov(int rel32, AMD64GeneralRegister64 source);
//    void rip_mov(int rel32, AMD64GeneralRegister8 source);
//    void rip_mov(int rel32, SegmentRegister source);
//    void rip_movapd(AMD64XMMRegister destination, int rel32);
//    void rip_movapd(final AMD64XMMRegister destination, final Label label);
//    void rip_movapd(final Label label, final AMD64XMMRegister source);
//    void rip_movapd(int rel32, AMD64XMMRegister source);
//    void rip_movaps(AMD64XMMRegister destination, int rel32);
//    void rip_movaps(final AMD64XMMRegister destination, final Label label);
//    void rip_movaps(final Label label, final AMD64XMMRegister source);
//    void rip_movaps(int rel32, AMD64XMMRegister source);
//    void rip_movb(final Label label, final byte imm8);
//    void rip_movb(int rel32, byte imm8);
//    void rip_movddup(AMD64XMMRegister destination, int rel32);
//    void rip_movddup(final AMD64XMMRegister destination, final Label label);
//    void rip_movdl(AMD64XMMRegister destination, int rel32);
//    void rip_movdl(MMXRegister destination, int rel32);
//    void rip_movdl(final AMD64XMMRegister destination, final Label label);
//    void rip_movdl(final Label label, final AMD64XMMRegister source);
//    void rip_movdl(final Label label, final MMXRegister source);
//    void rip_movdl(final MMXRegister destination, final Label label);
//    void rip_movdl(int rel32, AMD64XMMRegister source);
//    void rip_movdl(int rel32, MMXRegister source);
//    void rip_movdq(AMD64XMMRegister destination, int rel32);
//    void rip_movdq(MMXRegister destination, int rel32);
//    void rip_movdq(final AMD64XMMRegister destination, final Label label);
//    void rip_movdq(final Label label, final AMD64XMMRegister source);
//    void rip_movdq(final Label label, final MMXRegister source);
//    void rip_movdq(final MMXRegister destination, final Label label);
//    void rip_movdq(int rel32, AMD64XMMRegister source);
//    void rip_movdq(int rel32, MMXRegister source);
//    void rip_movdqa(AMD64XMMRegister destination, int rel32);
//    void rip_movdqa(final AMD64XMMRegister destination, final Label label);
//    void rip_movdqa(final Label label, final AMD64XMMRegister source);
//    void rip_movdqa(int rel32, AMD64XMMRegister source);
//    void rip_movdqu(AMD64XMMRegister destination, int rel32);
//    void rip_movdqu(final AMD64XMMRegister destination, final Label label);
//    void rip_movdqu(final Label label, final AMD64XMMRegister source);
//    void rip_movdqu(int rel32, AMD64XMMRegister source);
//    void rip_movhpd(AMD64XMMRegister destination, int rel32);
//    void rip_movhpd(final AMD64XMMRegister destination, final Label label);
//    void rip_movhpd(final Label label, final AMD64XMMRegister source);
//    void rip_movhpd(int rel32, AMD64XMMRegister source);
//    void rip_movhps(final Label label, final AMD64XMMRegister source);
//    void rip_movhps(int rel32, AMD64XMMRegister source);
//    void rip_movl(final Label label, final int imm32);
//    void rip_movl(int rel32, int imm32);
//    void rip_movlpd(AMD64XMMRegister destination, int rel32);
//    void rip_movlpd(final AMD64XMMRegister destination, final Label label);
//    void rip_movlpd(final Label label, final AMD64XMMRegister source);
//    void rip_movlpd(int rel32, AMD64XMMRegister source);
//    void rip_movlps(final Label label, final AMD64XMMRegister source);
//    void rip_movlps(int rel32, AMD64XMMRegister source);
//    void rip_movnti(final Label label, final AMD64GeneralRegister32 source);
//    void rip_movnti(final Label label, final AMD64GeneralRegister64 source);
//    void rip_movnti(int rel32, AMD64GeneralRegister32 source);
//    void rip_movnti(int rel32, AMD64GeneralRegister64 source);
//    void rip_movntpd(final Label label, final AMD64XMMRegister source);
//    void rip_movntpd(int rel32, AMD64XMMRegister source);
//    void rip_movntps(final Label label, final AMD64XMMRegister source);
//    void rip_movntps(int rel32, AMD64XMMRegister source);
//    void rip_movntq(final Label label, final MMXRegister source);
//    void rip_movntq(int rel32, MMXRegister source);
//    void rip_movq(AMD64XMMRegister destination, int rel32);
//    void rip_movq(MMXRegister destination, int rel32);
//    void rip_movq(final AMD64XMMRegister destination, final Label label);
//    void rip_movq(final Label label, final AMD64XMMRegister source);
//    void rip_movq(final Label label, final MMXRegister source);
//    void rip_movq(final Label label, final int imm32);
//    void rip_movq(final MMXRegister destination, final Label label);
//    void rip_movq(int rel32, AMD64XMMRegister source);
//    void rip_movq(int rel32, MMXRegister source);
//    void rip_movq(int rel32, int imm32);
//    void rip_movsd(final Label label, final AMD64XMMRegister source);
//    void rip_movsd(int rel32, AMD64XMMRegister source);
//    void rip_movshdup(AMD64XMMRegister destination, int rel32);
//    void rip_movshdup(final AMD64XMMRegister destination, final Label label);
//    void rip_movsldup(AMD64XMMRegister destination, int rel32);
//    void rip_movsldup(final AMD64XMMRegister destination, final Label label);
//    void rip_movss(final Label label, final AMD64XMMRegister source);
//    void rip_movss(int rel32, AMD64XMMRegister source);
//    void rip_movsxb(AMD64GeneralRegister16 destination, int rel32);
//    void rip_movsxb(AMD64GeneralRegister64 destination, int rel32);
//    void rip_movsxb(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_movsxb(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_movsxw(AMD64GeneralRegister64 destination, int rel32);
//    void rip_movsxw(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_movupd(AMD64XMMRegister destination, int rel32);
//    void rip_movupd(final AMD64XMMRegister destination, final Label label);
//    void rip_movupd(final Label label, final AMD64XMMRegister source);
//    void rip_movupd(int rel32, AMD64XMMRegister source);
//    void rip_movups(AMD64XMMRegister destination, int rel32);
//    void rip_movups(final AMD64XMMRegister destination, final Label label);
//    void rip_movups(final Label label, final AMD64XMMRegister source);
//    void rip_movups(int rel32, AMD64XMMRegister source);
//    void rip_movw(final Label label, final short imm16);
//    void rip_movw(int rel32, short imm16);
//    void rip_movzxb(AMD64GeneralRegister16 destination, int rel32);
//    void rip_movzxb(AMD64GeneralRegister32 destination, int rel32);
//    void rip_movzxb(AMD64GeneralRegister64 destination, int rel32);
//    void rip_movzxb(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_movzxb(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_movzxb(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_movzxw(AMD64GeneralRegister64 destination, int rel32);
//    void rip_movzxw(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_mulb___AL(final Label label);
//    void rip_mulb___AL(int rel32);
//    void rip_mull(final Label label);
//    void rip_mull(int rel32);
//    void rip_mulpd(AMD64XMMRegister destination, int rel32);
//    void rip_mulpd(final AMD64XMMRegister destination, final Label label);
//    void rip_mulps(AMD64XMMRegister destination, int rel32);
//    void rip_mulps(final AMD64XMMRegister destination, final Label label);
//    void rip_mulq(final Label label);
//    void rip_mulq(int rel32);
//    void rip_mulw(final Label label);
//    void rip_mulw(int rel32);
//    void rip_mvntdq(final Label label, final AMD64XMMRegister source);
//    void rip_mvntdq(int rel32, AMD64XMMRegister source);
//    void rip_negb(final Label label);
//    void rip_negb(int rel32);
//    void rip_negl(final Label label);
//    void rip_negl(int rel32);
//    void rip_negq(final Label label);
//    void rip_negq(int rel32);
//    void rip_negw(final Label label);
//    void rip_negw(int rel32);
//    void rip_notb(final Label label);
//    void rip_notb(int rel32);
//    void rip_notl(final Label label);
//    void rip_notl(int rel32);
//    void rip_notq(final Label label);
//    void rip_notq(int rel32);
//    void rip_notw(final Label label);
//    void rip_notw(int rel32);
//    void rip_or(AMD64GeneralRegister16 destination, int rel32);
//    void rip_or(AMD64GeneralRegister8 destination, int rel32);
//    void rip_or(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_or(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_or(final Label label, final AMD64GeneralRegister16 source);
//    void rip_or(final Label label, final AMD64GeneralRegister32 source);
//    void rip_or(final Label label, final AMD64GeneralRegister64 source);
//    void rip_or(final Label label, final AMD64GeneralRegister8 source);
//    void rip_or(int rel32, AMD64GeneralRegister16 source);
//    void rip_or(int rel32, AMD64GeneralRegister32 source);
//    void rip_or(int rel32, AMD64GeneralRegister64 source);
//    void rip_or(int rel32, AMD64GeneralRegister8 source);
//    void rip_orb(final Label label, final byte imm8);
//    void rip_orb(int rel32, byte imm8);
//    void rip_orl(final Label label, final byte imm8);
//    void rip_orl(final Label label, final int imm32);
//    void rip_orl(int rel32, byte imm8);
//    void rip_orl(int rel32, int imm32);
//    void rip_orpd(AMD64XMMRegister destination, int rel32);
//    void rip_orpd(final AMD64XMMRegister destination, final Label label);
//    void rip_orps(AMD64XMMRegister destination, int rel32);
//    void rip_orps(final AMD64XMMRegister destination, final Label label);
//    void rip_orq(final Label label, final byte imm8);
//    void rip_orq(final Label label, final int imm32);
//    void rip_orq(int rel32, byte imm8);
//    void rip_orq(int rel32, int imm32);
//    void rip_orw(final Label label, final byte imm8);
//    void rip_orw(final Label label, final short imm16);
//    void rip_orw(int rel32, byte imm8);
//    void rip_orw(int rel32, short imm16);
//    void rip_packssdw(AMD64XMMRegister destination, int rel32);
//    void rip_packssdw(MMXRegister destination, int rel32);
//    void rip_packssdw(final AMD64XMMRegister destination, final Label label);
//    void rip_packssdw(final MMXRegister destination, final Label label);
//    void rip_packsswb(AMD64XMMRegister destination, int rel32);
//    void rip_packsswb(MMXRegister destination, int rel32);
//    void rip_packsswb(final AMD64XMMRegister destination, final Label label);
//    void rip_packsswb(final MMXRegister destination, final Label label);
//    void rip_packuswb(AMD64XMMRegister destination, int rel32);
//    void rip_packuswb(MMXRegister destination, int rel32);
//    void rip_packuswb(final AMD64XMMRegister destination, final Label label);
//    void rip_packuswb(final MMXRegister destination, final Label label);
//    void rip_paddb(AMD64XMMRegister destination, int rel32);
//    void rip_paddb(MMXRegister destination, int rel32);
//    void rip_paddb(final AMD64XMMRegister destination, final Label label);
//    void rip_paddb(final MMXRegister destination, final Label label);
//    void rip_paddd(AMD64XMMRegister destination, int rel32);
//    void rip_paddd(MMXRegister destination, int rel32);
//    void rip_paddd(final AMD64XMMRegister destination, final Label label);
//    void rip_paddd(final MMXRegister destination, final Label label);
//    void rip_paddq(AMD64XMMRegister destination, int rel32);
//    void rip_paddq(MMXRegister destination, int rel32);
//    void rip_paddq(final AMD64XMMRegister destination, final Label label);
//    void rip_paddq(final MMXRegister destination, final Label label);
//    void rip_paddsb(AMD64XMMRegister destination, int rel32);
//    void rip_paddsb(MMXRegister destination, int rel32);
//    void rip_paddsb(final AMD64XMMRegister destination, final Label label);
//    void rip_paddsb(final MMXRegister destination, final Label label);
//    void rip_paddsw(AMD64XMMRegister destination, int rel32);
//    void rip_paddsw(MMXRegister destination, int rel32);
//    void rip_paddsw(final AMD64XMMRegister destination, final Label label);
//    void rip_paddsw(final MMXRegister destination, final Label label);
//    void rip_paddusb(AMD64XMMRegister destination, int rel32);
//    void rip_paddusb(MMXRegister destination, int rel32);
//    void rip_paddusb(final AMD64XMMRegister destination, final Label label);
//    void rip_paddusb(final MMXRegister destination, final Label label);
//    void rip_paddusw(AMD64XMMRegister destination, int rel32);
//    void rip_paddusw(MMXRegister destination, int rel32);
//    void rip_paddusw(final AMD64XMMRegister destination, final Label label);
//    void rip_paddusw(final MMXRegister destination, final Label label);
//    void rip_paddw(AMD64XMMRegister destination, int rel32);
//    void rip_paddw(MMXRegister destination, int rel32);
//    void rip_paddw(final AMD64XMMRegister destination, final Label label);
//    void rip_paddw(final MMXRegister destination, final Label label);
//    void rip_pand(AMD64XMMRegister destination, int rel32);
//    void rip_pand(MMXRegister destination, int rel32);
//    void rip_pand(final AMD64XMMRegister destination, final Label label);
//    void rip_pand(final MMXRegister destination, final Label label);
//    void rip_pandn(AMD64XMMRegister destination, int rel32);
//    void rip_pandn(MMXRegister destination, int rel32);
//    void rip_pandn(final AMD64XMMRegister destination, final Label label);
//    void rip_pandn(final MMXRegister destination, final Label label);
//    void rip_pavgb(AMD64XMMRegister destination, int rel32);
//    void rip_pavgb(MMXRegister destination, int rel32);
//    void rip_pavgb(final AMD64XMMRegister destination, final Label label);
//    void rip_pavgb(final MMXRegister destination, final Label label);
//    void rip_pavgw(AMD64XMMRegister destination, int rel32);
//    void rip_pavgw(MMXRegister destination, int rel32);
//    void rip_pavgw(final AMD64XMMRegister destination, final Label label);
//    void rip_pavgw(final MMXRegister destination, final Label label);
//    void rip_pcmpeqb(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpeqb(MMXRegister destination, int rel32);
//    void rip_pcmpeqb(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpeqb(final MMXRegister destination, final Label label);
//    void rip_pcmpeqd(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpeqd(MMXRegister destination, int rel32);
//    void rip_pcmpeqd(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpeqd(final MMXRegister destination, final Label label);
//    void rip_pcmpeqw(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpeqw(MMXRegister destination, int rel32);
//    void rip_pcmpeqw(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpeqw(final MMXRegister destination, final Label label);
//    void rip_pcmpgtb(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpgtb(MMXRegister destination, int rel32);
//    void rip_pcmpgtb(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpgtb(final MMXRegister destination, final Label label);
//    void rip_pcmpgtd(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpgtd(MMXRegister destination, int rel32);
//    void rip_pcmpgtd(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpgtd(final MMXRegister destination, final Label label);
//    void rip_pcmpgtw(AMD64XMMRegister destination, int rel32);
//    void rip_pcmpgtw(MMXRegister destination, int rel32);
//    void rip_pcmpgtw(final AMD64XMMRegister destination, final Label label);
//    void rip_pcmpgtw(final MMXRegister destination, final Label label);
//    void rip_pinsrw(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_pinsrw(MMXRegister destination, int rel32, byte imm8);
//    void rip_pinsrw(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_pinsrw(final MMXRegister destination, final Label label, final byte imm8);
//    void rip_pmaddwd(AMD64XMMRegister destination, int rel32);
//    void rip_pmaddwd(MMXRegister destination, int rel32);
//    void rip_pmaddwd(final AMD64XMMRegister destination, final Label label);
//    void rip_pmaddwd(final MMXRegister destination, final Label label);
//    void rip_pmaxsw(AMD64XMMRegister destination, int rel32);
//    void rip_pmaxsw(MMXRegister destination, int rel32);
//    void rip_pmaxsw(final AMD64XMMRegister destination, final Label label);
//    void rip_pmaxsw(final MMXRegister destination, final Label label);
//    void rip_pmaxub(AMD64XMMRegister destination, int rel32);
//    void rip_pmaxub(MMXRegister destination, int rel32);
//    void rip_pmaxub(final AMD64XMMRegister destination, final Label label);
//    void rip_pmaxub(final MMXRegister destination, final Label label);
//    void rip_pminsw(AMD64XMMRegister destination, int rel32);
//    void rip_pminsw(MMXRegister destination, int rel32);
//    void rip_pminsw(final AMD64XMMRegister destination, final Label label);
//    void rip_pminsw(final MMXRegister destination, final Label label);
//    void rip_pminub(AMD64XMMRegister destination, int rel32);
//    void rip_pminub(MMXRegister destination, int rel32);
//    void rip_pminub(final AMD64XMMRegister destination, final Label label);
//    void rip_pminub(final MMXRegister destination, final Label label);
//    void rip_pmulhuw(AMD64XMMRegister destination, int rel32);
//    void rip_pmulhuw(MMXRegister destination, int rel32);
//    void rip_pmulhuw(final AMD64XMMRegister destination, final Label label);
//    void rip_pmulhuw(final MMXRegister destination, final Label label);
//    void rip_pmulhw(AMD64XMMRegister destination, int rel32);
//    void rip_pmulhw(MMXRegister destination, int rel32);
//    void rip_pmulhw(final AMD64XMMRegister destination, final Label label);
//    void rip_pmulhw(final MMXRegister destination, final Label label);
//    void rip_pmullw(AMD64XMMRegister destination, int rel32);
//    void rip_pmullw(MMXRegister destination, int rel32);
//    void rip_pmullw(final AMD64XMMRegister destination, final Label label);
//    void rip_pmullw(final MMXRegister destination, final Label label);
//    void rip_pmuludq(AMD64XMMRegister destination, int rel32);
//    void rip_pmuludq(MMXRegister destination, int rel32);
//    void rip_pmuludq(final AMD64XMMRegister destination, final Label label);
//    void rip_pmuludq(final MMXRegister destination, final Label label);
//    void rip_pop(final Label label);
//    void rip_pop(int rel32);
//    void rip_por(AMD64XMMRegister destination, int rel32);
//    void rip_por(MMXRegister destination, int rel32);
//    void rip_por(final AMD64XMMRegister destination, final Label label);
//    void rip_por(final MMXRegister destination, final Label label);
//    void rip_prefetch(final Label label);
//    void rip_prefetch(int rel32);
//    void rip_prefetchnta(final Label label);
//    void rip_prefetchnta(int rel32);
//    void rip_prefetcht0(final Label label);
//    void rip_prefetcht0(int rel32);
//    void rip_prefetcht1(final Label label);
//    void rip_prefetcht1(int rel32);
//    void rip_prefetcht2(final Label label);
//    void rip_prefetcht2(int rel32);
//    void rip_prefetchw(final Label label);
//    void rip_prefetchw(int rel32);
//    void rip_psadbw(AMD64XMMRegister destination, int rel32);
//    void rip_psadbw(MMXRegister destination, int rel32);
//    void rip_psadbw(final AMD64XMMRegister destination, final Label label);
//    void rip_psadbw(final MMXRegister destination, final Label label);
//    void rip_pshufd(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_pshufd(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_pshufhw(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_pshufhw(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_pshuflw(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_pshuflw(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_pshufw(MMXRegister destination, int rel32, byte imm8);
//    void rip_pshufw(final MMXRegister destination, final Label label, final byte imm8);
//    void rip_pslld(AMD64XMMRegister destination, int rel32);
//    void rip_pslld(MMXRegister destination, int rel32);
//    void rip_pslld(final AMD64XMMRegister destination, final Label label);
//    void rip_pslld(final MMXRegister destination, final Label label);
//    void rip_psllq(AMD64XMMRegister destination, int rel32);
//    void rip_psllq(MMXRegister destination, int rel32);
//    void rip_psllq(final AMD64XMMRegister destination, final Label label);
//    void rip_psllq(final MMXRegister destination, final Label label);
//    void rip_psllw(AMD64XMMRegister destination, int rel32);
//    void rip_psllw(MMXRegister destination, int rel32);
//    void rip_psllw(final AMD64XMMRegister destination, final Label label);
//    void rip_psllw(final MMXRegister destination, final Label label);
//    void rip_psrad(AMD64XMMRegister destination, int rel32);
//    void rip_psrad(MMXRegister destination, int rel32);
//    void rip_psrad(final AMD64XMMRegister destination, final Label label);
//    void rip_psrad(final MMXRegister destination, final Label label);
//    void rip_psraw(AMD64XMMRegister destination, int rel32);
//    void rip_psraw(MMXRegister destination, int rel32);
//    void rip_psraw(final AMD64XMMRegister destination, final Label label);
//    void rip_psraw(final MMXRegister destination, final Label label);
//    void rip_psrld(AMD64XMMRegister destination, int rel32);
//    void rip_psrld(MMXRegister destination, int rel32);
//    void rip_psrld(final AMD64XMMRegister destination, final Label label);
//    void rip_psrld(final MMXRegister destination, final Label label);
//    void rip_psrlq(AMD64XMMRegister destination, int rel32);
//    void rip_psrlq(MMXRegister destination, int rel32);
//    void rip_psrlq(final AMD64XMMRegister destination, final Label label);
//    void rip_psrlq(final MMXRegister destination, final Label label);
//    void rip_psrlw(AMD64XMMRegister destination, int rel32);
//    void rip_psrlw(MMXRegister destination, int rel32);
//    void rip_psrlw(final AMD64XMMRegister destination, final Label label);
//    void rip_psrlw(final MMXRegister destination, final Label label);
//    void rip_psubb(AMD64XMMRegister destination, int rel32);
//    void rip_psubb(MMXRegister destination, int rel32);
//    void rip_psubb(final AMD64XMMRegister destination, final Label label);
//    void rip_psubb(final MMXRegister destination, final Label label);
//    void rip_psubd(AMD64XMMRegister destination, int rel32);
//    void rip_psubd(MMXRegister destination, int rel32);
//    void rip_psubd(final AMD64XMMRegister destination, final Label label);
//    void rip_psubd(final MMXRegister destination, final Label label);
//    void rip_psubq(AMD64XMMRegister destination, int rel32);
//    void rip_psubq(MMXRegister destination, int rel32);
//    void rip_psubq(final AMD64XMMRegister destination, final Label label);
//    void rip_psubq(final MMXRegister destination, final Label label);
//    void rip_psubsb(AMD64XMMRegister destination, int rel32);
//    void rip_psubsb(MMXRegister destination, int rel32);
//    void rip_psubsb(final AMD64XMMRegister destination, final Label label);
//    void rip_psubsb(final MMXRegister destination, final Label label);
//    void rip_psubsw(AMD64XMMRegister destination, int rel32);
//    void rip_psubsw(MMXRegister destination, int rel32);
//    void rip_psubsw(final AMD64XMMRegister destination, final Label label);
//    void rip_psubsw(final MMXRegister destination, final Label label);
//    void rip_psubusb(AMD64XMMRegister destination, int rel32);
//    void rip_psubusb(MMXRegister destination, int rel32);
//    void rip_psubusb(final AMD64XMMRegister destination, final Label label);
//    void rip_psubusb(final MMXRegister destination, final Label label);
//    void rip_psubusw(AMD64XMMRegister destination, int rel32);
//    void rip_psubusw(MMXRegister destination, int rel32);
//    void rip_psubusw(final AMD64XMMRegister destination, final Label label);
//    void rip_psubusw(final MMXRegister destination, final Label label);
//    void rip_psubw(AMD64XMMRegister destination, int rel32);
//    void rip_psubw(MMXRegister destination, int rel32);
//    void rip_psubw(final AMD64XMMRegister destination, final Label label);
//    void rip_psubw(final MMXRegister destination, final Label label);
//    void rip_punpckhbw(AMD64XMMRegister destination, int rel32);
//    void rip_punpckhbw(MMXRegister destination, int rel32);
//    void rip_punpckhbw(final AMD64XMMRegister destination, final Label label);
//    void rip_punpckhbw(final MMXRegister destination, final Label label);
//    void rip_punpckhdq(AMD64XMMRegister destination, int rel32);
//    void rip_punpckhdq(MMXRegister destination, int rel32);
//    void rip_punpckhdq(final AMD64XMMRegister destination, final Label label);
//    void rip_punpckhdq(final MMXRegister destination, final Label label);
//    void rip_punpckhqdq(AMD64XMMRegister destination, int rel32);
//    void rip_punpckhqdq(final AMD64XMMRegister destination, final Label label);
//    void rip_punpckhwd(AMD64XMMRegister destination, int rel32);
//    void rip_punpckhwd(MMXRegister destination, int rel32);
//    void rip_punpckhwd(final AMD64XMMRegister destination, final Label label);
//    void rip_punpckhwd(final MMXRegister destination, final Label label);
//    void rip_punpcklbw(AMD64XMMRegister destination, int rel32);
//    void rip_punpcklbw(MMXRegister destination, int rel32);
//    void rip_punpcklbw(final AMD64XMMRegister destination, final Label label);
//    void rip_punpcklbw(final MMXRegister destination, final Label label);
//    void rip_punpckldq(AMD64XMMRegister destination, int rel32);
//    void rip_punpckldq(MMXRegister destination, int rel32);
//    void rip_punpckldq(final AMD64XMMRegister destination, final Label label);
//    void rip_punpckldq(final MMXRegister destination, final Label label);
//    void rip_punpcklqdq(AMD64XMMRegister destination, int rel32);
//    void rip_punpcklqdq(final AMD64XMMRegister destination, final Label label);
//    void rip_punpcklwd(AMD64XMMRegister destination, int rel32);
//    void rip_punpcklwd(MMXRegister destination, int rel32);
//    void rip_punpcklwd(final AMD64XMMRegister destination, final Label label);
//    void rip_punpcklwd(final MMXRegister destination, final Label label);
//    void rip_push(int rel32);
//    void rip_pxor(AMD64XMMRegister destination, int rel32);
//    void rip_pxor(MMXRegister destination, int rel32);
//    void rip_pxor(final AMD64XMMRegister destination, final Label label);
//    void rip_pxor(final MMXRegister destination, final Label label);
//    void rip_rclb(final Label label, final byte imm8);
//    void rip_rclb(int rel32, byte imm8);
//    void rip_rclb___1(final Label label);
//    void rip_rclb___1(int rel32);
//    void rip_rclb___CL(final Label label);
//    void rip_rclb___CL(int rel32);
//    void rip_rcll(final Label label, final byte imm8);
//    void rip_rcll(int rel32, byte imm8);
//    void rip_rcll___1(final Label label);
//    void rip_rcll___1(int rel32);
//    void rip_rcll___CL(final Label label);
//    void rip_rcll___CL(int rel32);
//    void rip_rclq(final Label label, final byte imm8);
//    void rip_rclq(int rel32, byte imm8);
//    void rip_rclq___1(final Label label);
//    void rip_rclq___1(int rel32);
//    void rip_rclq___CL(final Label label);
//    void rip_rclq___CL(int rel32);
//    void rip_rclw(final Label label, final byte imm8);
//    void rip_rclw(int rel32, byte imm8);
//    void rip_rclw___1(final Label label);
//    void rip_rclw___1(int rel32);
//    void rip_rclw___CL(final Label label);
//    void rip_rclw___CL(int rel32);
//    void rip_rcpps(AMD64XMMRegister destination, int rel32);
//    void rip_rcpps(final AMD64XMMRegister destination, final Label label);
//    void rip_rcpss(AMD64XMMRegister destination, int rel32);
//    void rip_rcpss(final AMD64XMMRegister destination, final Label label);
//    void rip_rcrb(final Label label, final byte imm8);
//    void rip_rcrb(int rel32, byte imm8);
//    void rip_rcrb___1(final Label label);
//    void rip_rcrb___1(int rel32);
//    void rip_rcrb___CL(final Label label);
//    void rip_rcrb___CL(int rel32);
//    void rip_rcrl(final Label label, final byte imm8);
//    void rip_rcrl(int rel32, byte imm8);
//    void rip_rcrl___1(final Label label);
//    void rip_rcrl___1(int rel32);
//    void rip_rcrl___CL(final Label label);
//    void rip_rcrl___CL(int rel32);
//    void rip_rcrq(final Label label, final byte imm8);
//    void rip_rcrq(int rel32, byte imm8);
//    void rip_rcrq___1(final Label label);
//    void rip_rcrq___1(int rel32);
//    void rip_rcrq___CL(final Label label);
//    void rip_rcrq___CL(int rel32);
//    void rip_rcrw(final Label label, final byte imm8);
//    void rip_rcrw(int rel32, byte imm8);
//    void rip_rcrw___1(final Label label);
//    void rip_rcrw___1(int rel32);
//    void rip_rcrw___CL(final Label label);
//    void rip_rcrw___CL(int rel32);
//    void rip_rolb(final Label label, final byte imm8);
//    void rip_rolb(int rel32, byte imm8);
//    void rip_rolb___1(final Label label);
//    void rip_rolb___1(int rel32);
//    void rip_rolb___CL(final Label label);
//    void rip_rolb___CL(int rel32);
//    void rip_roll(final Label label, final byte imm8);
//    void rip_roll(int rel32, byte imm8);
//    void rip_roll___1(final Label label);
//    void rip_roll___1(int rel32);
//    void rip_roll___CL(final Label label);
//    void rip_roll___CL(int rel32);
//    void rip_rolq(final Label label, final byte imm8);
//    void rip_rolq(int rel32, byte imm8);
//    void rip_rolq___1(final Label label);
//    void rip_rolq___1(int rel32);
//    void rip_rolq___CL(final Label label);
//    void rip_rolq___CL(int rel32);
//    void rip_rolw(final Label label, final byte imm8);
//    void rip_rolw(int rel32, byte imm8);
//    void rip_rolw___1(final Label label);
//    void rip_rolw___1(int rel32);
//    void rip_rolw___CL(final Label label);
//    void rip_rolw___CL(int rel32);
//    void rip_rorb(final Label label, final byte imm8);
//    void rip_rorb(int rel32, byte imm8);
//    void rip_rorb___1(final Label label);
//    void rip_rorb___1(int rel32);
//    void rip_rorb___CL(final Label label);
//    void rip_rorb___CL(int rel32);
//    void rip_rorl(final Label label, final byte imm8);
//    void rip_rorl(int rel32, byte imm8);
//    void rip_rorl___1(final Label label);
//    void rip_rorl___1(int rel32);
//    void rip_rorl___CL(final Label label);
//    void rip_rorl___CL(int rel32);
//    void rip_rorq(final Label label, final byte imm8);
//    void rip_rorq(int rel32, byte imm8);
//    void rip_rorq___1(final Label label);
//    void rip_rorq___1(int rel32);
//    void rip_rorq___CL(final Label label);
//    void rip_rorq___CL(int rel32);
//    void rip_rorw(final Label label, final byte imm8);
//    void rip_rorw(int rel32, byte imm8);
//    void rip_rorw___1(final Label label);
//    void rip_rorw___1(int rel32);
//    void rip_rorw___CL(final Label label);
//    void rip_rorw___CL(int rel32);
//    void rip_rsqrtps(AMD64XMMRegister destination, int rel32);
//    void rip_rsqrtps(final AMD64XMMRegister destination, final Label label);
//    void rip_rsqrtss(AMD64XMMRegister destination, int rel32);
//    void rip_rsqrtss(final AMD64XMMRegister destination, final Label label);
//    void rip_sarb(final Label label, final byte imm8);
//    void rip_sarb(int rel32, byte imm8);
//    void rip_sarb___1(final Label label);
//    void rip_sarb___1(int rel32);
//    void rip_sarb___CL(final Label label);
//    void rip_sarb___CL(int rel32);
//    void rip_sarl(final Label label, final byte imm8);
//    void rip_sarl(int rel32, byte imm8);
//    void rip_sarl___1(final Label label);
//    void rip_sarl___1(int rel32);
//    void rip_sarl___CL(final Label label);
//    void rip_sarl___CL(int rel32);
//    void rip_sarq(final Label label, final byte imm8);
//    void rip_sarq(int rel32, byte imm8);
//    void rip_sarq___1(final Label label);
//    void rip_sarq___1(int rel32);
//    void rip_sarq___CL(final Label label);
//    void rip_sarq___CL(int rel32);
//    void rip_sarw(final Label label, final byte imm8);
//    void rip_sarw(int rel32, byte imm8);
//    void rip_sarw___1(final Label label);
//    void rip_sarw___1(int rel32);
//    void rip_sarw___CL(final Label label);
//    void rip_sarw___CL(int rel32);
//    void rip_sbb(AMD64GeneralRegister16 destination, int rel32);
//    void rip_sbb(AMD64GeneralRegister32 destination, int rel32);
//    void rip_sbb(AMD64GeneralRegister64 destination, int rel32);
//    void rip_sbb(AMD64GeneralRegister8 destination, int rel32);
//    void rip_sbb(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_sbb(final AMD64GeneralRegister32 destination, final Label label);
//    void rip_sbb(final AMD64GeneralRegister64 destination, final Label label);
//    void rip_sbb(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_sbb(final Label label, final AMD64GeneralRegister16 source);
//    void rip_sbb(final Label label, final AMD64GeneralRegister32 source);
//    void rip_sbb(final Label label, final AMD64GeneralRegister64 source);
//    void rip_sbb(final Label label, final AMD64GeneralRegister8 source);
//    void rip_sbb(int rel32, AMD64GeneralRegister16 source);
//    void rip_sbb(int rel32, AMD64GeneralRegister32 source);
//    void rip_sbb(int rel32, AMD64GeneralRegister64 source);
//    void rip_sbb(int rel32, AMD64GeneralRegister8 source);
//    void rip_sbbb(final Label label, final byte imm8);
//    void rip_sbbb(int rel32, byte imm8);
//    void rip_sbbl(final Label label, final byte imm8);
//    void rip_sbbl(final Label label, final int imm32);
//    void rip_sbbl(int rel32, byte imm8);
//    void rip_sbbl(int rel32, int imm32);
//    void rip_sbbq(final Label label, final byte imm8);
//    void rip_sbbq(final Label label, final int imm32);
//    void rip_sbbq(int rel32, byte imm8);
//    void rip_sbbq(int rel32, int imm32);
//    void rip_sbbw(final Label label, final byte imm8);
//    void rip_sbbw(final Label label, final short imm16);
//    void rip_sbbw(int rel32, byte imm8);
//    void rip_sbbw(int rel32, short imm16);
//    void rip_setb(final Label label);
//    void rip_setb(int rel32);
//    void rip_setbe(final Label label);
//    void rip_setbe(int rel32);
//    void rip_setl(final Label label);
//    void rip_setl(int rel32);
//    void rip_setle(final Label label);
//    void rip_setle(int rel32);
//    void rip_setnb(final Label label);
//    void rip_setnb(int rel32);
//    void rip_setnbe(final Label label);
//    void rip_setnbe(int rel32);
//    void rip_setnl(final Label label);
//    void rip_setnl(int rel32);
//    void rip_setnle(final Label label);
//    void rip_setnle(int rel32);
//    void rip_setno(final Label label);
//    void rip_setno(int rel32);
//    void rip_setnp(final Label label);
//    void rip_setnp(int rel32);
//    void rip_setns(final Label label);
//    void rip_setns(int rel32);
//    void rip_setnz(final Label label);
//    void rip_setnz(int rel32);
//    void rip_seto(final Label label);
//    void rip_seto(int rel32);
//    void rip_setp(final Label label);
//    void rip_setp(int rel32);
//    void rip_sets(final Label label);
//    void rip_sets(int rel32);
//    void rip_setz(final Label label);
//    void rip_setz(int rel32);
//    void rip_sgdt(final Label label);
//    void rip_sgdt(int rel32);
//    void rip_shlb(final Label label, final byte imm8);
//    void rip_shlb(int rel32, byte imm8);
//    void rip_shlb___1(final Label label);
//    void rip_shlb___1(int rel32);
//    void rip_shlb___CL(final Label label);
//    void rip_shlb___CL(int rel32);
//    void rip_shld(final Label label, final AMD64GeneralRegister16 source, final byte imm8);
//    void rip_shld(final Label label, final AMD64GeneralRegister32 source, final byte imm8);
//    void rip_shld(final Label label, final AMD64GeneralRegister64 source, final byte imm8);
//    void rip_shld(int rel32, AMD64GeneralRegister16 source, byte imm8);
//    void rip_shld(int rel32, AMD64GeneralRegister32 source, byte imm8);
//    void rip_shld(int rel32, AMD64GeneralRegister64 source, byte imm8);
//    void rip_shld_CL(final Label label, final AMD64GeneralRegister16 source);
//    void rip_shld_CL(final Label label, final AMD64GeneralRegister32 source);
//    void rip_shld_CL(final Label label, final AMD64GeneralRegister64 source);
//    void rip_shld_CL(int rel32, AMD64GeneralRegister16 source);
//    void rip_shld_CL(int rel32, AMD64GeneralRegister32 source);
//    void rip_shld_CL(int rel32, AMD64GeneralRegister64 source);
//    void rip_shll(final Label label, final byte imm8);
//    void rip_shll(int rel32, byte imm8);
//    void rip_shll___1(final Label label);
//    void rip_shll___1(int rel32);
//    void rip_shll___CL(final Label label);
//    void rip_shll___CL(int rel32);
//    void rip_shlq(final Label label, final byte imm8);
//    void rip_shlq(int rel32, byte imm8);
//    void rip_shlq___1(final Label label);
//    void rip_shlq___1(int rel32);
//    void rip_shlq___CL(final Label label);
//    void rip_shlq___CL(int rel32);
//    void rip_shlw(final Label label, final byte imm8);
//    void rip_shlw(int rel32, byte imm8);
//    void rip_shlw___1(final Label label);
//    void rip_shlw___1(int rel32);
//    void rip_shlw___CL(final Label label);
//    void rip_shlw___CL(int rel32);
//    void rip_shrb(final Label label, final byte imm8);
//    void rip_shrb(int rel32, byte imm8);
//    void rip_shrb___1(final Label label);
//    void rip_shrb___1(int rel32);
//    void rip_shrb___CL(final Label label);
//    void rip_shrb___CL(int rel32);
//    void rip_shrd(final Label label, final AMD64GeneralRegister16 source, final byte imm8);
//    void rip_shrd(final Label label, final AMD64GeneralRegister32 source, final byte imm8);
//    void rip_shrd(final Label label, final AMD64GeneralRegister64 source, final byte imm8);
//    void rip_shrd(int rel32, AMD64GeneralRegister16 source, byte imm8);
//    void rip_shrd(int rel32, AMD64GeneralRegister32 source, byte imm8);
//    void rip_shrd(int rel32, AMD64GeneralRegister64 source, byte imm8);
//    void rip_shrd_CL(final Label label, final AMD64GeneralRegister16 source);
//    void rip_shrd_CL(final Label label, final AMD64GeneralRegister32 source);
//    void rip_shrd_CL(final Label label, final AMD64GeneralRegister64 source);
//    void rip_shrd_CL(int rel32, AMD64GeneralRegister16 source);
//    void rip_shrd_CL(int rel32, AMD64GeneralRegister32 source);
//    void rip_shrd_CL(int rel32, AMD64GeneralRegister64 source);
//    void rip_shrl(final Label label, final byte imm8);
//    void rip_shrl(int rel32, byte imm8);
//    void rip_shrl___1(final Label label);
//    void rip_shrl___1(int rel32);
//    void rip_shrl___CL(final Label label);
//    void rip_shrl___CL(int rel32);
//    void rip_shrq(final Label label, final byte imm8);
//    void rip_shrq(int rel32, byte imm8);
//    void rip_shrq___1(final Label label);
//    void rip_shrq___1(int rel32);
//    void rip_shrq___CL(final Label label);
//    void rip_shrq___CL(int rel32);
//    void rip_shrw(final Label label, final byte imm8);
//    void rip_shrw(int rel32, byte imm8);
//    void rip_shrw___1(final Label label);
//    void rip_shrw___1(int rel32);
//    void rip_shrw___CL(final Label label);
//    void rip_shrw___CL(int rel32);
//    void rip_shufpd(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_shufpd(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_shufps(AMD64XMMRegister destination, int rel32, byte imm8);
//    void rip_shufps(final AMD64XMMRegister destination, final Label label, final byte imm8);
//    void rip_sidt(final Label label);
//    void rip_sidt(int rel32);
//    void rip_sldt(final Label label);
//    void rip_sldt(int rel32);
//    void rip_smsw(final Label label);
//    void rip_smsw(int rel32);
//    void rip_sqrtpd(AMD64XMMRegister destination, int rel32);
//    void rip_sqrtpd(final AMD64XMMRegister destination, final Label label);
//    void rip_sqrtps(AMD64XMMRegister destination, int rel32);
//    void rip_sqrtps(final AMD64XMMRegister destination, final Label label);
//    void rip_sqrtsd(AMD64XMMRegister destination, int rel32);
//    void rip_sqrtsd(final AMD64XMMRegister destination, final Label label);
//    void rip_sqrtss(AMD64XMMRegister destination, int rel32);
//    void rip_sqrtss(final AMD64XMMRegister destination, final Label label);
//    void rip_stmxcsr(final Label label);
//    void rip_stmxcsr(int rel32);
//    void rip_str(final Label label);
//    void rip_str(int rel32);
//    void rip_sub(AMD64GeneralRegister16 destination, int rel32);
//    void rip_sub(AMD64GeneralRegister8 destination, int rel32);
//    void rip_sub(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_sub(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_sub(final Label label, final AMD64GeneralRegister16 source);
//    void rip_sub(final Label label, final AMD64GeneralRegister32 source);
//    void rip_sub(final Label label, final AMD64GeneralRegister64 source);
//    void rip_sub(final Label label, final AMD64GeneralRegister8 source);
//    void rip_sub(int rel32, AMD64GeneralRegister16 source);
//    void rip_sub(int rel32, AMD64GeneralRegister32 source);
//    void rip_sub(int rel32, AMD64GeneralRegister64 source);
//    void rip_sub(int rel32, AMD64GeneralRegister8 source);
//    void rip_subb(final Label label, final byte imm8);
//    void rip_subb(int rel32, byte imm8);
//    void rip_subl(final Label label, final byte imm8);
//    void rip_subl(final Label label, final int imm32);
//    void rip_subl(int rel32, byte imm8);
//    void rip_subl(int rel32, int imm32);
//    void rip_subpd(AMD64XMMRegister destination, int rel32);
//    void rip_subpd(final AMD64XMMRegister destination, final Label label);
//    void rip_subps(AMD64XMMRegister destination, int rel32);
//    void rip_subps(final AMD64XMMRegister destination, final Label label);
//    void rip_subq(final Label label, final byte imm8);
//    void rip_subq(final Label label, final int imm32);
//    void rip_subq(int rel32, byte imm8);
//    void rip_subq(int rel32, int imm32);
//    void rip_subw(final Label label, final byte imm8);
//    void rip_subw(final Label label, final short imm16);
//    void rip_subw(int rel32, byte imm8);
//    void rip_subw(int rel32, short imm16);
//    void rip_test(final Label label, final AMD64GeneralRegister16 source);
//    void rip_test(final Label label, final AMD64GeneralRegister32 source);
//    void rip_test(final Label label, final AMD64GeneralRegister64 source);
//    void rip_test(final Label label, final AMD64GeneralRegister8 source);
//    void rip_test(int rel32, AMD64GeneralRegister16 source);
//    void rip_test(int rel32, AMD64GeneralRegister32 source);
//    void rip_test(int rel32, AMD64GeneralRegister64 source);
//    void rip_test(int rel32, AMD64GeneralRegister8 source);
//    void rip_testb(final Label label, final byte imm8);
//    void rip_testb(int rel32, byte imm8);
//    void rip_testl(final Label label, final int imm32);
//    void rip_testl(int rel32, int imm32);
//    void rip_testq(final Label label, final int imm32);
//    void rip_testq(int rel32, int imm32);
//    void rip_testw(final Label label, final short imm16);
//    void rip_testw(int rel32, short imm16);
//    void rip_ucomisd(AMD64XMMRegister destination, int rel32);
//    void rip_ucomisd(final AMD64XMMRegister destination, final Label label);
//    void rip_ucomiss(AMD64XMMRegister destination, int rel32);
//    void rip_ucomiss(final AMD64XMMRegister destination, final Label label);
//    void rip_unpckhpd(AMD64XMMRegister destination, int rel32);
//    void rip_unpckhpd(final AMD64XMMRegister destination, final Label label);
//    void rip_unpckhps(AMD64XMMRegister destination, int rel32);
//    void rip_unpckhps(final AMD64XMMRegister destination, final Label label);
//    void rip_unpcklpd(AMD64XMMRegister destination, int rel32);
//    void rip_unpcklpd(final AMD64XMMRegister destination, final Label label);
//    void rip_unpcklps(AMD64XMMRegister destination, int rel32);
//    void rip_unpcklps(final AMD64XMMRegister destination, final Label label);
//    void rip_verr(final Label label);
//    void rip_verr(int rel32);
//    void rip_verw(final Label label);
//    void rip_verw(int rel32);
//    void rip_xadd(final Label label, final AMD64GeneralRegister16 source);
//    void rip_xadd(final Label label, final AMD64GeneralRegister32 source);
//    void rip_xadd(final Label label, final AMD64GeneralRegister64 source);
//    void rip_xadd(final Label label, final AMD64GeneralRegister8 source);
//    void rip_xadd(int rel32, AMD64GeneralRegister16 source);
//    void rip_xadd(int rel32, AMD64GeneralRegister32 source);
//    void rip_xadd(int rel32, AMD64GeneralRegister64 source);
//    void rip_xadd(int rel32, AMD64GeneralRegister8 source);
//    void rip_xchg(final Label label, final AMD64GeneralRegister16 source);
//    void rip_xchg(final Label label, final AMD64GeneralRegister32 source);
//    void rip_xchg(final Label label, final AMD64GeneralRegister64 source);
//    void rip_xchg(final Label label, final AMD64GeneralRegister8 source);
//    void rip_xchg(int rel32, AMD64GeneralRegister16 source);
//    void rip_xchg(int rel32, AMD64GeneralRegister32 source);
//    void rip_xchg(int rel32, AMD64GeneralRegister64 source);
//    void rip_xchg(int rel32, AMD64GeneralRegister8 source);
//    void rip_xor(AMD64GeneralRegister16 destination, int rel32);
//    void rip_xor(AMD64GeneralRegister8 destination, int rel32);
//    void rip_xor(final AMD64GeneralRegister16 destination, final Label label);
//    void rip_xor(final AMD64GeneralRegister8 destination, final Label label);
//    void rip_xor(final Label label, final AMD64GeneralRegister16 source);
//    void rip_xor(final Label label, final AMD64GeneralRegister32 source);
//    void rip_xor(final Label label, final AMD64GeneralRegister64 source);
//    void rip_xor(final Label label, final AMD64GeneralRegister8 source);
//    void rip_xor(int rel32, AMD64GeneralRegister16 source);
//    void rip_xor(int rel32, AMD64GeneralRegister32 source);
//    void rip_xor(int rel32, AMD64GeneralRegister64 source);
//    void rip_xor(int rel32, AMD64GeneralRegister8 source);
//    void rip_xorb(final Label label, final byte imm8);
//    void rip_xorb(int rel32, byte imm8);
//    void rip_xorl(final Label label, final byte imm8);
//    void rip_xorl(final Label label, final int imm32);
//    void rip_xorl(int rel32, byte imm8);
//    void rip_xorl(int rel32, int imm32);
//    void rip_xorpd(AMD64XMMRegister destination, int rel32);
//    void rip_xorpd(final AMD64XMMRegister destination, final Label label);
//    void rip_xorps(AMD64XMMRegister destination, int rel32);
//    void rip_xorps(final AMD64XMMRegister destination, final Label label);
//    void rip_xorq(final Label label, final byte imm8);
//    void rip_xorq(final Label label, final int imm32);
//    void rip_xorq(int rel32, byte imm8);
//    void rip_xorq(int rel32, int imm32);
//    void rip_xorw(final Label label, final byte imm8);
//    void rip_xorw(final Label label, final short imm16);
//    void rip_xorw(int rel32, byte imm8);
//    void rip_xorw(int rel32, short imm16);
//    void rolb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolb(AMD64GeneralRegister8 destination, byte imm8);
//    void rolb(AMD64IndirectRegister64 destination, byte imm8);
//    void rolb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rolb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rolb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___1(AMD64GeneralRegister8 destination);
//    void rolb___1(AMD64IndirectRegister64 destination);
//    void rolb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rolb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___1(int disp32, AMD64IndirectRegister64 destination);
//    void rolb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___CL(AMD64GeneralRegister8 destination);
//    void rolb___CL(AMD64IndirectRegister64 destination);
//    void rolb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rolb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void roll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void roll(AMD64GeneralRegister32 destination, byte imm8);
//    void roll(AMD64IndirectRegister64 destination, byte imm8);
//    void roll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void roll(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void roll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void roll(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void roll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___1(AMD64GeneralRegister32 destination);
//    void roll___1(AMD64IndirectRegister64 destination);
//    void roll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___1(byte disp8, AMD64IndirectRegister64 destination);
//    void roll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___1(int disp32, AMD64IndirectRegister64 destination);
//    void roll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___CL(AMD64GeneralRegister32 destination);
//    void roll___CL(AMD64IndirectRegister64 destination);
//    void roll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void roll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void roll___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rolq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolq(AMD64GeneralRegister64 destination, byte imm8);
//    void rolq(AMD64IndirectRegister64 destination, byte imm8);
//    void rolq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rolq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rolq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___1(AMD64GeneralRegister64 destination);
//    void rolq___1(AMD64IndirectRegister64 destination);
//    void rolq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rolq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___1(int disp32, AMD64IndirectRegister64 destination);
//    void rolq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___CL(AMD64GeneralRegister64 destination);
//    void rolq___CL(AMD64IndirectRegister64 destination);
//    void rolq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rolq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolq___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rolw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolw(AMD64GeneralRegister16 destination, byte imm8);
//    void rolw(AMD64IndirectRegister64 destination, byte imm8);
//    void rolw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rolw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rolw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rolw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___1(AMD64GeneralRegister16 destination);
//    void rolw___1(AMD64IndirectRegister64 destination);
//    void rolw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rolw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___1(int disp32, AMD64IndirectRegister64 destination);
//    void rolw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___CL(AMD64GeneralRegister16 destination);
//    void rolw___CL(AMD64IndirectRegister64 destination);
//    void rolw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rolw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rolw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rorb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorb(AMD64GeneralRegister8 destination, byte imm8);
//    void rorb(AMD64IndirectRegister64 destination, byte imm8);
//    void rorb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rorb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rorb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___1(AMD64GeneralRegister8 destination);
//    void rorb___1(AMD64IndirectRegister64 destination);
//    void rorb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rorb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___1(int disp32, AMD64IndirectRegister64 destination);
//    void rorb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___CL(AMD64GeneralRegister8 destination);
//    void rorb___CL(AMD64IndirectRegister64 destination);
//    void rorb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rorb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorl(AMD64GeneralRegister32 destination, byte imm8);
//    void rorl(AMD64IndirectRegister64 destination, byte imm8);
//    void rorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rorl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___1(AMD64GeneralRegister32 destination);
//    void rorl___1(AMD64IndirectRegister64 destination);
//    void rorl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rorl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___1(int disp32, AMD64IndirectRegister64 destination);
//    void rorl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___CL(AMD64GeneralRegister32 destination);
//    void rorl___CL(AMD64IndirectRegister64 destination);
//    void rorl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rorl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorl___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorq(AMD64GeneralRegister64 destination, byte imm8);
//    void rorq(AMD64IndirectRegister64 destination, byte imm8);
//    void rorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rorq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___1(AMD64GeneralRegister64 destination);
//    void rorq___1(AMD64IndirectRegister64 destination);
//    void rorq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rorq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___1(int disp32, AMD64IndirectRegister64 destination);
//    void rorq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___CL(AMD64GeneralRegister64 destination);
//    void rorq___CL(AMD64IndirectRegister64 destination);
//    void rorq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rorq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorq___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorw(AMD64GeneralRegister16 destination, byte imm8);
//    void rorw(AMD64IndirectRegister64 destination, byte imm8);
//    void rorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void rorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void rorw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void rorw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___1(AMD64GeneralRegister16 destination);
//    void rorw___1(AMD64IndirectRegister64 destination);
//    void rorw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void rorw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___1(int disp32, AMD64IndirectRegister64 destination);
//    void rorw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___CL(AMD64GeneralRegister16 destination);
//    void rorw___CL(AMD64IndirectRegister64 destination);
//    void rorw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void rorw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rorw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void rsm();
//    void rsqrtps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void rsqrtps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void rsqrtps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void rsqrtps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void rsqrtss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void rsqrtss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void rsqrtss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void rsqrtss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void rsqrtss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void sahf();
//    void sarb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarb(AMD64GeneralRegister8 destination, byte imm8);
//    void sarb(AMD64IndirectRegister64 destination, byte imm8);
//    void sarb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sarb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sarb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___1(AMD64GeneralRegister8 destination);
//    void sarb___1(AMD64IndirectRegister64 destination);
//    void sarb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void sarb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___1(int disp32, AMD64IndirectRegister64 destination);
//    void sarb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___CL(AMD64GeneralRegister8 destination);
//    void sarb___CL(AMD64IndirectRegister64 destination);
//    void sarb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void sarb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void sarl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarl(AMD64IndirectRegister64 destination, byte imm8);
//    void sarl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarl___1(AMD64IndirectRegister64 destination);
//    void sarl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarl___CL(AMD64IndirectRegister64 destination);
//    void sarl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarq(AMD64IndirectRegister64 destination, byte imm8);
//    void sarq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq___1(AMD64IndirectRegister64 destination);
//    void sarq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq___CL(AMD64IndirectRegister64 destination);
//    void sarq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarw(AMD64GeneralRegister16 destination, byte imm8);
//    void sarw(AMD64IndirectRegister64 destination, byte imm8);
//    void sarw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sarw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sarw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sarw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___1(AMD64GeneralRegister16 destination);
//    void sarw___1(AMD64IndirectRegister64 destination);
//    void sarw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void sarw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___1(int disp32, AMD64IndirectRegister64 destination);
//    void sarw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___CL(AMD64GeneralRegister16 destination);
//    void sarw___CL(AMD64IndirectRegister64 destination);
//    void sarw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void sarw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sarw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sbb(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void sbb(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void sbb(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister32 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister32 destination, int disp32, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void sbb(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister64 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister64 destination, int disp32, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void sbb(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sbb(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sbb(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void sbb(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void sbb(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void sbb(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sbb_AL(byte imm8);
//    void sbb_AX(short imm16);
//    void sbb_EAX(int imm32);
//    void sbb_RAX(int imm32);
//    void sbbb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbb(AMD64GeneralRegister8 destination, byte imm8);
//    void sbbb(AMD64IndirectRegister64 destination, byte imm8);
//    void sbbb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbl(AMD64GeneralRegister32 destination, byte imm8);
//    void sbbl(AMD64GeneralRegister32 destination, int imm32);
//    void sbbl(AMD64IndirectRegister64 destination, byte imm8);
//    void sbbl(AMD64IndirectRegister64 destination, int imm32);
//    void sbbl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbl(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void sbbl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbl(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbl(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void sbbq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbq(AMD64GeneralRegister64 destination, byte imm8);
//    void sbbq(AMD64GeneralRegister64 destination, int imm32);
//    void sbbq(AMD64IndirectRegister64 destination, byte imm8);
//    void sbbq(AMD64IndirectRegister64 destination, int imm32);
//    void sbbq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbq(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void sbbq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void sbbq(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbq(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void sbbw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void sbbw(AMD64GeneralRegister16 destination, byte imm8);
//    void sbbw(AMD64GeneralRegister16 destination, short imm16);
//    void sbbw(AMD64IndirectRegister64 destination, byte imm8);
//    void sbbw(AMD64IndirectRegister64 destination, short imm16);
//    void sbbw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void sbbw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void sbbw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void sbbw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void sbbw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void sbbw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void scasb();
//    void scasl();
//    void scasq();
//    void scasw();
//    void seg_cs();
//    void seg_fs();
//    void seg_gs();
//    void setb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setb(AMD64IndirectRegister64 destination);
//    void setb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setb(byte disp8, AMD64IndirectRegister64 destination);
//    void setb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setb(int disp32, AMD64IndirectRegister64 destination);
//    void setbe(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setbe(AMD64IndirectRegister64 destination);
//    void setbe(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setbe(byte disp8, AMD64IndirectRegister64 destination);
//    void setbe(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setbe(int disp32, AMD64IndirectRegister64 destination);
//    void setl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setl(AMD64IndirectRegister64 destination);
//    void setl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setl(byte disp8, AMD64IndirectRegister64 destination);
//    void setl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setl(int disp32, AMD64IndirectRegister64 destination);
//    void setle(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setle(AMD64GeneralRegister8 destination);
//    void setle(AMD64IndirectRegister64 destination);
//    void setle(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setle(byte disp8, AMD64IndirectRegister64 destination);
//    void setle(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setle(int disp32, AMD64IndirectRegister64 destination);
//    void setnb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnb(AMD64IndirectRegister64 destination);
//    void setnb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnb(byte disp8, AMD64IndirectRegister64 destination);
//    void setnb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnb(int disp32, AMD64IndirectRegister64 destination);
//    void setnbe(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnbe(AMD64IndirectRegister64 destination);
//    void setnbe(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnbe(byte disp8, AMD64IndirectRegister64 destination);
//    void setnbe(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnbe(int disp32, AMD64IndirectRegister64 destination);
//    void setnl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnl(AMD64IndirectRegister64 destination);
//    void setnl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnl(byte disp8, AMD64IndirectRegister64 destination);
//    void setnl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnl(int disp32, AMD64IndirectRegister64 destination);
//    void setnle(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnle(AMD64IndirectRegister64 destination);
//    void setnle(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnle(byte disp8, AMD64IndirectRegister64 destination);
//    void setnle(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnle(int disp32, AMD64IndirectRegister64 destination);
//    void setno(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setno(AMD64GeneralRegister8 destination);
//    void setno(AMD64IndirectRegister64 destination);
//    void setno(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setno(byte disp8, AMD64IndirectRegister64 destination);
//    void setno(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setno(int disp32, AMD64IndirectRegister64 destination);
//    void setnp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnp(AMD64IndirectRegister64 destination);
//    void setnp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnp(byte disp8, AMD64IndirectRegister64 destination);
//    void setnp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnp(int disp32, AMD64IndirectRegister64 destination);
//    void setns(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setns(AMD64GeneralRegister8 destination);
//    void setns(AMD64IndirectRegister64 destination);
//    void setns(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setns(byte disp8, AMD64IndirectRegister64 destination);
//    void setns(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setns(int disp32, AMD64IndirectRegister64 destination);
//    void setnz(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnz(AMD64GeneralRegister8 destination);
//    void setnz(AMD64IndirectRegister64 destination);
//    void setnz(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnz(byte disp8, AMD64IndirectRegister64 destination);
//    void setnz(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setnz(int disp32, AMD64IndirectRegister64 destination);
//    void seto(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void seto(AMD64GeneralRegister8 destination);
//    void seto(AMD64IndirectRegister64 destination);
//    void seto(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void seto(byte disp8, AMD64IndirectRegister64 destination);
//    void seto(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void seto(int disp32, AMD64IndirectRegister64 destination);
//    void setp(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setp(AMD64IndirectRegister64 destination);
//    void setp(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setp(byte disp8, AMD64IndirectRegister64 destination);
//    void setp(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setp(int disp32, AMD64IndirectRegister64 destination);
//    void sets(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sets(AMD64GeneralRegister8 destination);
//    void sets(AMD64IndirectRegister64 destination);
//    void sets(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sets(byte disp8, AMD64IndirectRegister64 destination);
//    void sets(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sets(int disp32, AMD64IndirectRegister64 destination);
//    void setz(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setz(AMD64GeneralRegister8 destination);
//    void setz(AMD64IndirectRegister64 destination);
//    void setz(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setz(byte disp8, AMD64IndirectRegister64 destination);
//    void setz(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void setz(int disp32, AMD64IndirectRegister64 destination);
//    void sgdt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sgdt(AMD64IndirectRegister64 destination);
//    void sgdt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sgdt(byte disp8, AMD64IndirectRegister64 destination);
//    void sgdt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sgdt(int disp32, AMD64IndirectRegister64 destination);
//    void shlb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlb(AMD64GeneralRegister8 destination, byte imm8);
//    void shlb(AMD64IndirectRegister64 destination, byte imm8);
//    void shlb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void shlb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void shlb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___1(AMD64GeneralRegister8 destination);
//    void shlb___1(AMD64IndirectRegister64 destination);
//    void shlb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void shlb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___1(int disp32, AMD64IndirectRegister64 destination);
//    void shlb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___CL(AMD64GeneralRegister8 destination);
//    void shlb___CL(AMD64IndirectRegister64 destination);
//    void shlb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void shlb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shld(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shld(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shld(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shld(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shld(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shld(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shld(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shld(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shld(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shld_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shld_CL(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void shld_CL(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void shld_CL(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shld_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shld_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shld_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shld_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shld_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shll(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shll(AMD64IndirectRegister64 destination, byte imm8);
//    void shll(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shll(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shll___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shll___1(AMD64IndirectRegister64 destination);
//    void shll___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shll___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shll___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shll___CL(AMD64IndirectRegister64 destination);
//    void shll___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shll___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlq(AMD64IndirectRegister64 destination, byte imm8);
//    void shlq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq___1(AMD64IndirectRegister64 destination);
//    void shlq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq___CL(AMD64IndirectRegister64 destination);
//    void shlq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlw(AMD64GeneralRegister16 destination, byte imm8);
//    void shlw(AMD64IndirectRegister64 destination, byte imm8);
//    void shlw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void shlw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shlw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void shlw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___1(AMD64GeneralRegister16 destination);
//    void shlw___1(AMD64IndirectRegister64 destination);
//    void shlw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void shlw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___1(int disp32, AMD64IndirectRegister64 destination);
//    void shlw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___CL(AMD64GeneralRegister16 destination);
//    void shlw___CL(AMD64IndirectRegister64 destination);
//    void shlw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void shlw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shlw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void shrb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrb(AMD64GeneralRegister8 destination, byte imm8);
//    void shrb(AMD64IndirectRegister64 destination, byte imm8);
//    void shrb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void shrb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void shrb___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___1(AMD64GeneralRegister8 destination);
//    void shrb___1(AMD64IndirectRegister64 destination);
//    void shrb___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___1(byte disp8, AMD64IndirectRegister64 destination);
//    void shrb___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___1(int disp32, AMD64IndirectRegister64 destination);
//    void shrb___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___CL(AMD64GeneralRegister8 destination);
//    void shrb___CL(AMD64IndirectRegister64 destination);
//    void shrb___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void shrb___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrb___CL(int disp32, AMD64IndirectRegister64 destination);
//    void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source, byte imm8);
//    void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source, byte imm8);
//    void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source, byte imm8);
//    void shrd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source, byte imm8);
//    void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shrd_CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shrd_CL(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void shrd_CL(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void shrd_CL(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shrd_CL(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shrd_CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shrd_CL(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void shrd_CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void shrd_CL(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void shrl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrl(AMD64IndirectRegister64 destination, byte imm8);
//    void shrl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrl___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrl___1(AMD64IndirectRegister64 destination);
//    void shrl___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrl___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrl___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrl___CL(AMD64IndirectRegister64 destination);
//    void shrl___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrl___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrq(AMD64IndirectRegister64 destination, byte imm8);
//    void shrq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrq___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq___1(AMD64IndirectRegister64 destination);
//    void shrq___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq___CL(AMD64IndirectRegister64 destination);
//    void shrq___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrq___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrw(AMD64GeneralRegister16 destination, byte imm8);
//    void shrw(AMD64IndirectRegister64 destination, byte imm8);
//    void shrw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void shrw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shrw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void shrw___1(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___1(AMD64GeneralRegister16 destination);
//    void shrw___1(AMD64IndirectRegister64 destination);
//    void shrw___1(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___1(byte disp8, AMD64IndirectRegister64 destination);
//    void shrw___1(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___1(int disp32, AMD64IndirectRegister64 destination);
//    void shrw___CL(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___CL(AMD64GeneralRegister16 destination);
//    void shrw___CL(AMD64IndirectRegister64 destination);
//    void shrw___CL(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___CL(byte disp8, AMD64IndirectRegister64 destination);
//    void shrw___CL(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void shrw___CL(int disp32, AMD64IndirectRegister64 destination);
//    void shufpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void shufpd(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8);
//    void shufpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void shufpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void shufps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufps(AMD64XMMRegister destination, AMD64IndirectRegister64 source, byte imm8);
//    void shufps(AMD64XMMRegister destination, AMD64XMMRegister source, byte imm8);
//    void shufps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source, byte imm8);
//    void shufps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void shufps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source, byte imm8);
//    void sidt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sidt(AMD64IndirectRegister64 destination);
//    void sidt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sidt(byte disp8, AMD64IndirectRegister64 destination);
//    void sidt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sidt(int disp32, AMD64IndirectRegister64 destination);
//    void sldt(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sldt(AMD64GeneralRegister16 destination);
//    void sldt(AMD64GeneralRegister32 destination);
//    void sldt(AMD64GeneralRegister64 destination);
//    void sldt(AMD64IndirectRegister64 destination);
//    void sldt(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sldt(byte disp8, AMD64IndirectRegister64 destination);
//    void sldt(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sldt(int disp32, AMD64IndirectRegister64 destination);
//    void smsw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void smsw(AMD64GeneralRegister16 destination);
//    void smsw(AMD64GeneralRegister32 destination);
//    void smsw(AMD64GeneralRegister64 destination);
//    void smsw(AMD64IndirectRegister64 destination);
//    void smsw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void smsw(byte disp8, AMD64IndirectRegister64 destination);
//    void smsw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void smsw(int disp32, AMD64IndirectRegister64 destination);
//    void sqrtpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void sqrtpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void sqrtpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void sqrtpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void sqrtps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void sqrtps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void sqrtps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void sqrtps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void sqrtsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void sqrtsd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void sqrtsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtsd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void sqrtsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtsd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void sqrtss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void sqrtss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void sqrtss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void sqrtss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sqrtss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void stc();
//    void std();
//    void sti();
//    void stmxcsr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void stmxcsr(AMD64IndirectRegister64 destination);
//    void stmxcsr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void stmxcsr(byte disp8, AMD64IndirectRegister64 destination);
//    void stmxcsr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void stmxcsr(int disp32, AMD64IndirectRegister64 destination);
//    void stosb();
//    void stosl();
//    void stosq();
//    void stosw();
//    void str(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void str(AMD64GeneralRegister16 destination);
//    void str(AMD64GeneralRegister32 destination);
//    void str(AMD64GeneralRegister64 destination);
//    void str(AMD64IndirectRegister64 destination);
//    void str(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void str(byte disp8, AMD64IndirectRegister64 destination);
//    void str(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void str(int disp32, AMD64IndirectRegister64 destination);
//    void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sub(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sub(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void sub(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void sub(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void sub(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void sub(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void sub(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sub(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sub(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void sub(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void sub(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void sub_AL(byte imm8);
//    void sub_AX(short imm16);
//    void subb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subb(AMD64GeneralRegister8 destination, byte imm8);
//    void subb(AMD64IndirectRegister64 destination, byte imm8);
//    void subb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void subb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void subl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subl(AMD64IndirectRegister64 destination, byte imm8);
//    void subl(AMD64IndirectRegister64 destination, int imm32);
//    void subl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void subpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void subpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void subpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void subps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void subps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void subps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void subps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void subq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subq(AMD64IndirectRegister64 destination, byte imm8);
//    void subq(AMD64IndirectRegister64 destination, int imm32);
//    void subq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void subsd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subsd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void subsd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subsd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void subss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void subw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void subw(AMD64GeneralRegister16 destination, byte imm8);
//    void subw(AMD64GeneralRegister16 destination, short imm16);
//    void subw(AMD64IndirectRegister64 destination, byte imm8);
//    void subw(AMD64IndirectRegister64 destination, short imm16);
//    void subw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void subw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void subw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void subw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void subw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void subw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void subw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void swapgs();
//    void syscall();
//    void sysret();
//    void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void test(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void test(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void test(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void test(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void test(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void test(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void test(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void test(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void test(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void test(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void test_AL(byte imm8);
//    void test_AX(short imm16);
//    void test_EAX(int imm32);
//    void test_RAX(int imm32);
//    void testb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void testb(AMD64GeneralRegister8 destination, byte imm8);
//    void testb(AMD64IndirectRegister64 destination, byte imm8);
//    void testb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void testb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void testb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void testb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void testl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testl(AMD64GeneralRegister32 destination, int imm32);
//    void testl(AMD64IndirectRegister64 destination, int imm32);
//    void testl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testl(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void testl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testl(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void testq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testq(AMD64GeneralRegister64 destination, int imm32);
//    void testq(AMD64IndirectRegister64 destination, int imm32);
//    void testq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testq(byte disp8, AMD64IndirectRegister64 destination, int imm32);
//    void testq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void testq(int disp32, AMD64IndirectRegister64 destination, int imm32);
//    void testw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void testw(AMD64GeneralRegister16 destination, short imm16);
//    void testw(AMD64IndirectRegister64 destination, short imm16);
//    void testw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void testw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void testw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void testw(int disp32, AMD64IndirectRegister64 destination, short imm16);
//    void ucomisd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomisd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void ucomisd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void ucomisd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomisd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void ucomisd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomisd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void ucomiss(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomiss(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void ucomiss(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void ucomiss(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomiss(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void ucomiss(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void ucomiss(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void ud2();
//    void unpckhpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void unpckhpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void unpckhpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void unpckhpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void unpckhps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void unpckhps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void unpckhps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void unpckhps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpckhps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void unpcklpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void unpcklpd(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void unpcklpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void unpcklpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void unpcklps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void unpcklps(AMD64XMMRegister destination, AMD64XMMRegister source);
//    void unpcklps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void unpcklps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void unpcklps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void verr(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verr(AMD64GeneralRegister16 destination);
//    void verr(AMD64IndirectRegister64 destination);
//    void verr(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verr(byte disp8, AMD64IndirectRegister64 destination);
//    void verr(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verr(int disp32, AMD64IndirectRegister64 destination);
//    void verw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verw(AMD64GeneralRegister16 destination);
//    void verw(AMD64IndirectRegister64 destination);
//    void verw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verw(byte disp8, AMD64IndirectRegister64 destination);
//    void verw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void verw(int disp32, AMD64IndirectRegister64 destination);
//    void wbinvd();
//    void wrmsr();
//    void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xadd(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xadd(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void xadd(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void xadd(AMD64GeneralRegister64 destination, AMD64GeneralRegister64 source);
//    void xadd(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xadd(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xadd(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xadd(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xadd(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xadd(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xchg(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xchg(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void xchg(AMD64GeneralRegister32 destination, AMD64GeneralRegister32 source);
//    void xchg(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xchg(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xchg(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xchg(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xchg(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xchg(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xchg___AX(AMD64GeneralRegister16 register);
//    void xchg___EAX(AMD64GeneralRegister32 register);
//    void xchg___RAX(AMD64GeneralRegister64 register);
//    void xlat();
//    void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xor(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xor(AMD64GeneralRegister16 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister16 destination, AMD64GeneralRegister16 source);
//    void xor(AMD64GeneralRegister16 destination, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister16 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister16 destination, byte disp8, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister16 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister16 destination, int disp32, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister32 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister32 destination, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister32 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister32 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister64 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister64 destination, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister64 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister64 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister8 destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister8 destination, AMD64GeneralRegister8 source);
//    void xor(AMD64GeneralRegister8 destination, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister8 destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister8 destination, byte disp8, AMD64IndirectRegister64 source);
//    void xor(AMD64GeneralRegister8 destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xor(AMD64GeneralRegister8 destination, int disp32, AMD64IndirectRegister64 source);
//    void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister32 source);
//    void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister64 source);
//    void xor(AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xor(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xor(byte disp8, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister16 source);
//    void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister32 source);
//    void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister64 source);
//    void xor(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, AMD64GeneralRegister8 source);
//    void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister16 source);
//    void xor(int disp32, AMD64IndirectRegister64 destination, AMD64GeneralRegister8 source);
//    void xor_AL(byte imm8);
//    void xor_AX(short imm16);
//    void xorb(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorb(AMD64GeneralRegister8 destination, byte imm8);
//    void xorb(AMD64IndirectRegister64 destination, byte imm8);
//    void xorb(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorb(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void xorb(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorb(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void xorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorl(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorl(AMD64IndirectRegister64 destination, byte imm8);
//    void xorl(AMD64IndirectRegister64 destination, int imm32);
//    void xorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorl(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorl(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorpd(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorpd(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void xorpd(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorpd(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void xorpd(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorpd(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void xorps(AMD64XMMRegister destination, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorps(AMD64XMMRegister destination, AMD64IndirectRegister64 source);
//    void xorps(AMD64XMMRegister destination, byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorps(AMD64XMMRegister destination, byte disp8, AMD64IndirectRegister64 source);
//    void xorps(AMD64XMMRegister destination, int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale);
//    void xorps(AMD64XMMRegister destination, int disp32, AMD64IndirectRegister64 source);
//    void xorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorq(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorq(AMD64IndirectRegister64 destination, byte imm8);
//    void xorq(AMD64IndirectRegister64 destination, int imm32);
//    void xorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorq(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorq(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, int imm32);
//    void xorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorw(AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void xorw(AMD64GeneralRegister16 destination, byte imm8);
//    void xorw(AMD64GeneralRegister16 destination, short imm16);
//    void xorw(AMD64IndirectRegister64 destination, byte imm8);
//    void xorw(AMD64IndirectRegister64 destination, short imm16);
//    void xorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorw(byte disp8, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void xorw(byte disp8, AMD64IndirectRegister64 destination, byte imm8);
//    void xorw(byte disp8, AMD64IndirectRegister64 destination, short imm16);
//    void xorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, byte imm8);
//    void xorw(int disp32, AMD64BaseRegister64 base, AMD64IndexRegister64 index, Scale scale, short imm16);
//    void xorw(int disp32, AMD64IndirectRegister64 destination, byte imm8);
//    void xorw(int disp32, AMD64IndirectRegister64 destination, short imm16);
}
