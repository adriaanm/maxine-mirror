JIT target method:

+0:  jmp L1                    ;jit entry point
     nop
     nop
     nop
     nop
     nop
     nop
+8:  call <opt2jit adapter>    ;opt entry point
L1:  ...                       ;start of method body

JIT target method (no-args):

+0:  jmp L1                    ;jit entry point
     nop
     nop
     nop
     nop
     nop
     nop
+8:  nop                       ;opt entry point
L1:  ...                       ;start of method body

OPT target method:

+0:  call <jit2opt adapter>    ;jit entry point
     nop
     nop
     nop
+8:  ...                       ;opt entry point/start of method body

OPT target method (no-args):

+0:  jmp L1                    ;jit entry point
     nop
     nop
     ...
+8(L1):                        ;opt entry point/start of method body



opt2jit adapter:

mov  rax, [rsp]        ;save address of JIT body (immediately follows call in JIT prologue) 
subq rsp, N + E        ;create frame - N bytes for args + E bytes for stack alignment (if necessary)
mov  [rsp + 0], rdi    ;copy arg 0 to stack
mov  [rsp + S], rsi    ;copy arg 1 to stack (S == JIT stack slot size)
...
call rax               ;call JIT body
// return value (if any) is already in rax or xmm0
addq rsp, E            ;unpad
ret

jit2opt:

enter N, 0             ;create frame - space for args + caller's RBP + pad
mov 


opt  |
     +---------------
     | opt returnIP  
     +---------------
     | JIT method body  
     +---------------
     | padding
     +---------------
     | adapter returnIP



0x104A54F90   008         subq      rsp, 0x18                                [48 83 EC 18]
0x104A54F94   012         mov       [rsp + 0], rdi                           [48 89 BC 24 00 00 00 00]
0x104A54F9C   020         call      L1: +5                                   [E8 05 00 00 00]
0x104A54FA1   025         addq      rsp, 0x8                                 [48 83 C4 08]
0x104A54FA5   029         ret                                                [C3]
	


target method: test.output.HelloWorld.main(String[])
compilation: [0]  AMD64JitTargetMethod
Direct Calls: 
    85 -> void triggerRecompilation(MethodProfile) in com.sun.max.vm.jit.JitInstrumentation
0x104A54F88   000         jmp       L1: +28                                  [EB 1C]
0x104A54F8A   002         nop                                                [90]
0x104A54F8B   003         nop                                                [90]
0x104A54F8C   004         nop                                                [90]
0x104A54F8D   005         nop                                                [90]
0x104A54F8E   006         nop                                                [90]
0x104A54F8F   007         nop                                                [90]
0x104A54F90   008         subq      rsp, 0x18                                [48 83 EC 18]
0x104A54F94   012         mov       [rsp + 0], rdi                           [48 89 BC 24 00 00 00 00]
0x104A54F9C   020         call      L1: +5                                   [E8 05 00 00 00]
0x104A54FA1   025         addq      rsp, 0x8                                 [48 83 C4 08]
0x104A54FA5   029         ret                                                [C3]
0x104A54FA6   030   L1:   enter     0x50, 0x0                                [C8 50 00 00]
0x104A54FAA   034         subq      rbp, 0x50                                [48 81 ED 50 00 00 00]
0x104A54FB1   041         mov       r11, [rsp - 12288]                       [4C 8B 9C 24 00 D0 FF FF]
0x104A54FB9   049         mov       rdi, [-88]                               [48 8B 3D A8 FF FF FF]
0x104A54FC0   056         mov       rax, rdi                                 [48 89 F8]
0x104A54FC3   059         movsxd    rdx, [rax + 40]                          [48 63 50 28]
0x104A54FC7   063         subl      edx, 0x1                                 [83 EA 01]
0x104A54FCA   066         mov       rax, rdi                                 [48 89 F8]
0x104A54FCD   069         movsxd    rcx, edx                                 [48 63 CA]
0x104A54FD0   072         mov       [rax + 40], ecx                          [89 48 28]
0x104A54FD3   075         cmpl      edx, 0x0                                 [83 FA 00]
0x104A54FD6   078         jnz       L2: +17                                  [75 11]
0x104A54FD8   080         subq      rsp, 0x8                                 [48 83 EC 08]
0x104A54FDC   084         push      rbp                                      [55]
0x104A54FDD   085         call      -7773602                                 [E8 5E 62 89 FF]
0x104A54FE2   090         pop       rbp                                      [5D]
0x104A54FE3   091         addq      rsp, 0x8                                 [48 83 C4 08]
0x104A54FE7   095         jmp       L2: +0                                   [EB 00]
0x104A54FE9   097   L2:   mov       rdi, [-144]                              [48 8B 3D 70 FF FF FF]
0x104A54FF0   104         mov       rsi, 0x18                                [48 BE 18 00 00 00 00 00 00 00]
0x104A54FFA   114         mov       rax, rdi[rsi]                            [48 8B 04 37]
0x104A54FFE   118         subq      rsp, 0x10                                [48 83 EC 10]
0x104A55002   122         mov       [rsp], rax                               [48 89 04 24]
0x104A55006   126         mov       rdi, [-181]                              [48 8B 3D 4B FF FF FF]
0x104A5500D   133         subq      rsp, 0x10                                [48 83 EC 10]
0x104A55011   137         mov       [rsp], rdi                               [48 89 3C 24]
0x104A55015   141         mov       rdi, 0x2F                                [48 BF 2F 00 00 00 00 00 00 00]
0x104A5501F   151         mov       rsi, 0x1                                 [48 BE 01 00 00 00 00 00 00 00]
0x104A55029   161         movsxd    rcx, edi                                 [48 63 CF]
0x104A5502C   164         shll      esi, 0x1                                 [D1 E6]
0x104A5502E   166         mov       rdi, rsp[rsi * 8]                        [48 8B 3C F4]
0x104A55032   170         mov       rax, rdi                                 [48 89 F8]
0x104A55035   173         mov       rbx, [rax]                               [48 8B 18]
0x104A55038   176         mov       rax, rbx[rcx * 8 + 24]                   [48 8B 44 CB 18]
0x104A5503D   181         addq      rax, 0xF8                                [48 83 C0 F8]
0x104A55041   185         call      rax                                      [FF D0]
0x104A55043   187         addq      rbp, 0x50                                [48 81 C5 50 00 00 00]
0x104A5504A   194         leave                                              [C9]
0x104A5504B   195         ret       0x10                                     [C2 10 00]
