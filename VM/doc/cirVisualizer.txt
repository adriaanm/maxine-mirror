There is a visualizer for the IR used by the Continuation Passing Style (CPS) compiler in Maxine VM.
The name of this IR is CIR. While the CIR for a method can be traced as text, it is not as easy to read as a
more traditional basic block based IR and so a visualizer can be very useful.

To enable the visualizer, the system property named "max.cir.gui" needs to be defined. It can be set
programmatically using a call to System.setProperty() but the preferred mechanism is to define a
system property on the Hotspot command line (e.g. -Dmax.cir.gui). Any trace actions performed during
compilation will then be redirected to the visualizer. Without filtering the traces, this can quickly
cause an OutOfMemoryError as the visualizer logs each trace. As such, when initializing, the visualizer
presents a dialog for specifying a string that will be used to reject all but the traces of interest.
In particular, only CIR traces associated with a method whose fully qualified name contains the
filter string as a substring will be logged by the visualizer.

The visualizer uses a split pane to show the logged traces in a chronological order. That is, a
trace in left pane is the one produced immediately before a trace in the right pane. The elements
of the CIR graph in the left pane that are absent from the right pane are shown in a red font and
the elements in the right pane that are absent in the left pane are shown in a green font. That is,
elements that were removed by a transformation are shown in red and elements that were added are
shown in green.

Occasionally the left and right panes do not show a very meaningful diff as sometimes only partial
CIR graphs are traced. This is useful when looking at the traces as text but can be confusing in the
visualizer.

The traces logged by the visualizer can be searched. The search panel is activated by checking the
"Find" box at the bottom. Searching can be performed on the fully qualified name and signature of the
method associated with a trace as well as on the node labels within a trace.

The visualizer persists certain settings modified by the user. These included the size of the visualizer's
frame, the relative position and sizes of the internal components and the filter text. The external
persistence file is ~/.CirTraceVisualizer.properties and it's updated each time a setting is modified as
well as when the visualizer window is closed.

If using the visualizer when running a JUnit test from within Eclipse, you need to launch the test
as a stand alone Java application, not JUnit test running with Eclipse's JUnit harness. That is,
the test should be launched using a Java Application run/debug configuration, not a JUnit Test
run/debug configuration. The reason for this is that Eclipse's JUnit test harness appears to
complete execution with a call to System.exit() which immediately kills the visualizer.

TODO
====

Show logged traces in a list to support diffing of two non-adjacent traces.
