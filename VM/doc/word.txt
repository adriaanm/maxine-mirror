Boxed 'Word' values
-------------------

On the host JVM, the boxed Java value type for words is exactly
the same as the respective original subtype of Word.
This works, since all words are already boxed by a Wrapper object.
We must not use any other type, 
because Java reflection would not recognize it.

On the target JVM, we must not use any subtype of Word as boxed,
because every "instance" will be unboxed.
Instead, we must use a class that wraps words.
We cannot use the same wrappers as on the host,
because they are subtypes of Word.
In need of a fresh wrapper class, 
we observe that WordValue already has the desired properties.
Now we just need to patch the target version of reflection
to handle this type as intended...



Rules concerning com.sun.max.unsafe.Word and subtypes thereof
-------------------------------------------------------------

1. Never use a Word in a string expression without explicitly calling toString().
   For example this is illegal:

	   "aString" + myWord + "anotherString"

   But this is fine:

	   "aString" + myWord.toString() + "anotherString"

   Why: the former translates to 'StringBuilder.append(myWord)',
        passing the unboxed word as an object reference argument.

2. Never use square array brackets on Word arrays.
   Use 'WordArray.get()' and 'WordArray.set()' instead.
   Why: The 'aaload' and 'aastore' byte codes cannot distinguish 
   boxed and unboxed entities.
   
