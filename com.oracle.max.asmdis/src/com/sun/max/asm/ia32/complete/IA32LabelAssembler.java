/*
 * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.max.asm.ia32.complete;

import com.sun.max.asm.*;
import com.sun.max.asm.ia32.*;
import com.sun.max.asm.x86.*;

public abstract class IA32LabelAssembler extends IA32RawAssembler {

    public IA32LabelAssembler(int startAddress) {
        super(startAddress);
    }

    public IA32LabelAssembler() {
        super();
    }

// START GENERATED LABEL ASSEMBLER METHODS
    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code adc       ax, [L1: 0x12345678]}
     */
    // Template#: 1, Serial#: 103
    public void m_adc(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder);
        new m_adc_103(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code adc       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 2, Serial#: 102
    public void m_adc(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder, index, scale);
        new m_adc_102(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code adc       eax, [L1: 0x12345678]}
     */
    // Template#: 3, Serial#: 95
    public void m_adc(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder);
        new m_adc_95(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code adc       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 4, Serial#: 94
    public void m_adc(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder, index, scale);
        new m_adc_94(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code adc       al, [L1: 0x12345678]}
     */
    // Template#: 5, Serial#: 87
    public void m_adc(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder);
        new m_adc_87(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code adc       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 6, Serial#: 86
    public void m_adc(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(destination, placeHolder, index, scale);
        new m_adc_86(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcb      [L1: 0x12345678], 0x12}
     */
    // Template#: 7, Serial#: 281
    public void m_adcb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcb(placeHolder, imm8);
        new m_adcb_281(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcl      [L1: 0x12345678], 0x12}
     */
    // Template#: 8, Serial#: 497
    public void m_adcl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcl(placeHolder, imm8);
        new m_adcl_497(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcw      [L1: 0x12345678], 0x12}
     */
    // Template#: 9, Serial#: 569
    public void m_adcw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcw(placeHolder, imm8);
        new m_adcw_569(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       [L1: 0x12345678], ax}
     */
    // Template#: 10, Serial#: 78
    public void m_adc(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, source);
        new m_adc_78(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       [L1: 0x12345678], eax}
     */
    // Template#: 11, Serial#: 69
    public void m_adc(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, source);
        new m_adc_69(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       [L1: 0x12345678], al}
     */
    // Template#: 12, Serial#: 60
    public void m_adc(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, source);
        new m_adc_60(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 13, Serial#: 280
    public void m_adcb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcb(placeHolder, index, scale, imm8);
        new m_adcb_280(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 14, Serial#: 496
    public void m_adcl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcl(placeHolder, index, scale, imm8);
        new m_adcl_496(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code adcw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 15, Serial#: 568
    public void m_adcw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcw(placeHolder, index, scale, imm8);
        new m_adcw_568(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 16, Serial#: 77
    public void m_adc(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, index, scale, source);
        new m_adc_77(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 17, Serial#: 68
    public void m_adc(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, index, scale, source);
        new m_adc_68(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code adc       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 18, Serial#: 59
    public void m_adc(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adc(placeHolder, index, scale, source);
        new m_adc_59(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code adcl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 19, Serial#: 352
    public void m_adcl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcl(placeHolder, index, scale, imm32);
        new m_adcl_352(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code adcw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 20, Serial#: 424
    public void m_adcw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcw(placeHolder, index, scale, imm16);
        new m_adcw_424(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code adcl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 21, Serial#: 353
    public void m_adcl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcl(placeHolder, imm32);
        new m_adcl_353(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code adcw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code adcw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 22, Serial#: 425
    public void m_adcw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_adcw(placeHolder, imm16);
        new m_adcw_425(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code add       ax, [L1: 0x12345678]}
     */
    // Template#: 23, Serial#: 47
    public void m_add(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder);
        new m_add_47(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code add       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 24, Serial#: 46
    public void m_add(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder, index, scale);
        new m_add_46(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code add       eax, [L1: 0x12345678]}
     */
    // Template#: 25, Serial#: 39
    public void m_add(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder);
        new m_add_39(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code add       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 26, Serial#: 38
    public void m_add(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder, index, scale);
        new m_add_38(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code add       al, [L1: 0x12345678]}
     */
    // Template#: 27, Serial#: 31
    public void m_add(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder);
        new m_add_31(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code add       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 28, Serial#: 30
    public void m_add(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(destination, placeHolder, index, scale);
        new m_add_30(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addb      [L1: 0x12345678], 0x12}
     */
    // Template#: 29, Serial#: 273
    public void m_addb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addb(placeHolder, imm8);
        new m_addb_273(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addl      [L1: 0x12345678], 0x12}
     */
    // Template#: 30, Serial#: 489
    public void m_addl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addl(placeHolder, imm8);
        new m_addl_489(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addw      [L1: 0x12345678], 0x12}
     */
    // Template#: 31, Serial#: 561
    public void m_addw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addw(placeHolder, imm8);
        new m_addw_561(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code add       [L1: 0x12345678], ax}
     */
    // Template#: 32, Serial#: 22
    public void m_add(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, source);
        new m_add_22(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code add       [L1: 0x12345678], eax}
     */
    // Template#: 33, Serial#: 13
    public void m_add(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, source);
        new m_add_13(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code add       [L1: 0x12345678], al}
     */
    // Template#: 34, Serial#: 4
    public void m_add(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, source);
        new m_add_4(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 35, Serial#: 272
    public void m_addb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addb(placeHolder, index, scale, imm8);
        new m_addb_272(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 36, Serial#: 488
    public void m_addl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addl(placeHolder, index, scale, imm8);
        new m_addl_488(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code addw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 37, Serial#: 560
    public void m_addw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addw(placeHolder, index, scale, imm8);
        new m_addw_560(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code add       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 38, Serial#: 21
    public void m_add(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, index, scale, source);
        new m_add_21(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code add       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 39, Serial#: 12
    public void m_add(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, index, scale, source);
        new m_add_12(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code add  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code add       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 40, Serial#: 3
    public void m_add(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_add(placeHolder, index, scale, source);
        new m_add_3(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code addl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 41, Serial#: 344
    public void m_addl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addl(placeHolder, index, scale, imm32);
        new m_addl_344(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code addw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 42, Serial#: 416
    public void m_addw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addw(placeHolder, index, scale, imm16);
        new m_addw_416(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code addl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 43, Serial#: 345
    public void m_addl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addl(placeHolder, imm32);
        new m_addl_345(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code addw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 44, Serial#: 417
    public void m_addw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addw(placeHolder, imm16);
        new m_addw_417(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code addpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 45, Serial#: 4445
    public void m_addpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addpd(destination, placeHolder);
        new m_addpd_4445(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code addpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 46, Serial#: 4444
    public void m_addpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addpd(destination, placeHolder, index, scale);
        new m_addpd_4444(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code addps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 47, Serial#: 4373
    public void m_addps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addps(destination, placeHolder);
        new m_addps_4373(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code addps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 48, Serial#: 4372
    public void m_addps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addps(destination, placeHolder, index, scale);
        new m_addps_4372(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code addsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 49, Serial#: 4517
    public void m_addsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addsd(destination, placeHolder);
        new m_addsd_4517(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code addsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 50, Serial#: 4516
    public void m_addsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addsd(destination, placeHolder, index, scale);
        new m_addsd_4516(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code addss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 51, Serial#: 4580
    public void m_addss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addss(destination, placeHolder);
        new m_addss_4580(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code addss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 52, Serial#: 4579
    public void m_addss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addss(destination, placeHolder, index, scale);
        new m_addss_4579(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code addsubpd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 53, Serial#: 3751
    public void m_addsubpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addsubpd(destination, placeHolder);
        new m_addsubpd_3751(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code addsubpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code addsubpd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 54, Serial#: 3750
    public void m_addsubpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_addsubpd(destination, placeHolder, index, scale);
        new m_addsubpd_3750(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code and       ax, [L1: 0x12345678]}
     */
    // Template#: 55, Serial#: 159
    public void m_and(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder);
        new m_and_159(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code and       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 56, Serial#: 158
    public void m_and(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder, index, scale);
        new m_and_158(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code and       eax, [L1: 0x12345678]}
     */
    // Template#: 57, Serial#: 151
    public void m_and(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder);
        new m_and_151(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code and       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 58, Serial#: 150
    public void m_and(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder, index, scale);
        new m_and_150(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code and       al, [L1: 0x12345678]}
     */
    // Template#: 59, Serial#: 143
    public void m_and(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder);
        new m_and_143(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code and       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 60, Serial#: 142
    public void m_and(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(destination, placeHolder, index, scale);
        new m_and_142(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andb      [L1: 0x12345678], 0x12}
     */
    // Template#: 61, Serial#: 289
    public void m_andb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andb(placeHolder, imm8);
        new m_andb_289(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andl      [L1: 0x12345678], 0x12}
     */
    // Template#: 62, Serial#: 505
    public void m_andl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andl(placeHolder, imm8);
        new m_andl_505(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andw      [L1: 0x12345678], 0x12}
     */
    // Template#: 63, Serial#: 577
    public void m_andw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andw(placeHolder, imm8);
        new m_andw_577(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code and       [L1: 0x12345678], ax}
     */
    // Template#: 64, Serial#: 134
    public void m_and(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, source);
        new m_and_134(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code and       [L1: 0x12345678], eax}
     */
    // Template#: 65, Serial#: 125
    public void m_and(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, source);
        new m_and_125(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code and       [L1: 0x12345678], al}
     */
    // Template#: 66, Serial#: 116
    public void m_and(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, source);
        new m_and_116(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 67, Serial#: 288
    public void m_andb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andb(placeHolder, index, scale, imm8);
        new m_andb_288(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 68, Serial#: 504
    public void m_andl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andl(placeHolder, index, scale, imm8);
        new m_andl_504(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code andw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 69, Serial#: 576
    public void m_andw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andw(placeHolder, index, scale, imm8);
        new m_andw_576(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code and       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 70, Serial#: 133
    public void m_and(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, index, scale, source);
        new m_and_133(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code and       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 71, Serial#: 124
    public void m_and(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, index, scale, source);
        new m_and_124(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code and  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code and       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 72, Serial#: 115
    public void m_and(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_and(placeHolder, index, scale, source);
        new m_and_115(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code andl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 73, Serial#: 360
    public void m_andl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andl(placeHolder, index, scale, imm32);
        new m_andl_360(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code andw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 74, Serial#: 432
    public void m_andw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andw(placeHolder, index, scale, imm16);
        new m_andw_432(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code andl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 75, Serial#: 361
    public void m_andl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andl(placeHolder, imm32);
        new m_andl_361(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code andw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 76, Serial#: 433
    public void m_andw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andw(placeHolder, imm16);
        new m_andw_433(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code andnpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 77, Serial#: 3067
    public void m_andnpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andnpd(destination, placeHolder);
        new m_andnpd_3067(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code andnpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 78, Serial#: 3066
    public void m_andnpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andnpd(destination, placeHolder, index, scale);
        new m_andnpd_3066(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code andnps    xmm0, [L1: 0x12345678]}
     */
    // Template#: 79, Serial#: 3021
    public void m_andnps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andnps(destination, placeHolder);
        new m_andnps_3021(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andnps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code andnps    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 80, Serial#: 3020
    public void m_andnps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andnps(destination, placeHolder, index, scale);
        new m_andnps_3020(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code andpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 81, Serial#: 3058
    public void m_andpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andpd(destination, placeHolder);
        new m_andpd_3058(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code andpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 82, Serial#: 3057
    public void m_andpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andpd(destination, placeHolder, index, scale);
        new m_andpd_3057(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code andps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 83, Serial#: 3012
    public void m_andps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andps(destination, placeHolder);
        new m_andps_3012(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code andps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code andps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 84, Serial#: 3011
    public void m_andps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_andps(destination, placeHolder, index, scale);
        new m_andps_3011(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code arpl  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code arpl      [L1: 0x12345678], ax}
     */
    // Template#: 85, Serial#: 252
    public void m_arpl(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_arpl(placeHolder, source);
        new m_arpl_252(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code arpl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code arpl      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 86, Serial#: 251
    public void m_arpl(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_arpl(placeHolder, index, scale, source);
        new m_arpl_251(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bound  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bound     ax, [L1: 0x12345678]}
     */
    // Template#: 87, Serial#: 244
    public void m_bound(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bound(destination, placeHolder);
        new m_bound_244(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bound  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bound     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 88, Serial#: 243
    public void m_bound(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bound(destination, placeHolder, index, scale);
        new m_bound_243(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bound  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bound     eax, [L1: 0x12345678]}
     */
    // Template#: 89, Serial#: 236
    public void m_bound(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bound(destination, placeHolder);
        new m_bound_236(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bound  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bound     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 90, Serial#: 235
    public void m_bound(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bound(destination, placeHolder, index, scale);
        new m_bound_235(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bsf       ax, [L1: 0x12345678]}
     */
    // Template#: 91, Serial#: 5098
    public void m_bsf(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsf(destination, placeHolder);
        new m_bsf_5098(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bsf       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 92, Serial#: 5097
    public void m_bsf(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsf(destination, placeHolder, index, scale);
        new m_bsf_5097(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bsf       eax, [L1: 0x12345678]}
     */
    // Template#: 93, Serial#: 5089
    public void m_bsf(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsf(destination, placeHolder);
        new m_bsf_5089(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsf  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bsf       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 94, Serial#: 5088
    public void m_bsf(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsf(destination, placeHolder, index, scale);
        new m_bsf_5088(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bsr       ax, [L1: 0x12345678]}
     */
    // Template#: 95, Serial#: 5116
    public void m_bsr(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsr(destination, placeHolder);
        new m_bsr_5116(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bsr       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 96, Serial#: 5115
    public void m_bsr(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsr(destination, placeHolder, index, scale);
        new m_bsr_5115(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code bsr       eax, [L1: 0x12345678]}
     */
    // Template#: 97, Serial#: 5107
    public void m_bsr(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsr(destination, placeHolder);
        new m_bsr_5107(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bsr  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code bsr       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 98, Serial#: 5106
    public void m_bsr(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bsr(destination, placeHolder, index, scale);
        new m_bsr_5106(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code bt        [L1: 0x12345678], 0x12}
     */
    // Template#: 99, Serial#: 5031
    public void m_bt(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, imm8);
        new m_bt_5031(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code bt        [L1: 0x12345678], ax}
     */
    // Template#: 100, Serial#: 3424
    public void m_bt(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, source);
        new m_bt_3424(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code bt        [L1: 0x12345678], eax}
     */
    // Template#: 101, Serial#: 3415
    public void m_bt(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, source);
        new m_bt_3415(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code bt        L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 102, Serial#: 5030
    public void m_bt(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, index, scale, imm8);
        new m_bt_5030(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code bt        L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 103, Serial#: 3423
    public void m_bt(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, index, scale, source);
        new m_bt_3423(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bt  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code bt        L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 104, Serial#: 3414
    public void m_bt(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bt(placeHolder, index, scale, source);
        new m_bt_3414(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code btc       [L1: 0x12345678], 0x12}
     */
    // Template#: 105, Serial#: 5043
    public void m_btc(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, imm8);
        new m_btc_5043(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code btc       [L1: 0x12345678], ax}
     */
    // Template#: 106, Serial#: 5080
    public void m_btc(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, source);
        new m_btc_5080(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code btc       [L1: 0x12345678], eax}
     */
    // Template#: 107, Serial#: 5071
    public void m_btc(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, source);
        new m_btc_5071(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code btc       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 108, Serial#: 5042
    public void m_btc(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, index, scale, imm8);
        new m_btc_5042(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code btc       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 109, Serial#: 5079
    public void m_btc(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, index, scale, source);
        new m_btc_5079(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btc  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code btc       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 110, Serial#: 5070
    public void m_btc(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btc(placeHolder, index, scale, source);
        new m_btc_5070(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code btr       [L1: 0x12345678], 0x12}
     */
    // Template#: 111, Serial#: 5039
    public void m_btr(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, imm8);
        new m_btr_5039(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code btr       [L1: 0x12345678], ax}
     */
    // Template#: 112, Serial#: 3521
    public void m_btr(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, source);
        new m_btr_3521(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code btr       [L1: 0x12345678], eax}
     */
    // Template#: 113, Serial#: 3512
    public void m_btr(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, source);
        new m_btr_3512(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code btr       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 114, Serial#: 5038
    public void m_btr(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, index, scale, imm8);
        new m_btr_5038(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code btr       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 115, Serial#: 3520
    public void m_btr(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, index, scale, source);
        new m_btr_3520(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code btr  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code btr       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 116, Serial#: 3511
    public void m_btr(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_btr(placeHolder, index, scale, source);
        new m_btr_3511(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code bts       [L1: 0x12345678], 0x12}
     */
    // Template#: 117, Serial#: 5035
    public void m_bts(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, imm8);
        new m_bts_5035(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code bts       [L1: 0x12345678], ax}
     */
    // Template#: 118, Serial#: 4965
    public void m_bts(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, source);
        new m_bts_4965(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code bts       [L1: 0x12345678], eax}
     */
    // Template#: 119, Serial#: 4956
    public void m_bts(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, source);
        new m_bts_4956(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code bts       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 120, Serial#: 5034
    public void m_bts(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, index, scale, imm8);
        new m_bts_5034(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code bts       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 121, Serial#: 4964
    public void m_bts(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, index, scale, source);
        new m_bts_4964(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code bts  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code bts       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 122, Serial#: 4955
    public void m_bts(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_bts(placeHolder, index, scale, source);
        new m_bts_4955(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>label</i>
     * Example disassembly syntax: {@code call      [L1: 0x12345678]}
     */
    // Template#: 123, Serial#: 1913
    public void m_call(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_call(placeHolder);
        new m_call_1913(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>label</i>
     * Example disassembly syntax: {@code call      L1: +305419896}
     */
    // Template#: 124, Serial#: 2399
    public void call(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        call(placeHolder);
        new call_2399(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code call  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code call      L1: 0x12345678[esi * 4]}
     */
    // Template#: 125, Serial#: 2444
    public void m_call(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_call(placeHolder, index, scale);
        new m_call_2444(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmova     ax, [L1: 0x12345678]}
     */
    // Template#: 126, Serial#: 2975
    public void m_cmova(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmova(destination, placeHolder);
        new m_cmova_2975(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmova     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 127, Serial#: 2974
    public void m_cmova(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmova(destination, placeHolder, index, scale);
        new m_cmova_2974(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmova     eax, [L1: 0x12345678]}
     */
    // Template#: 128, Serial#: 2966
    public void m_cmova(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmova(destination, placeHolder);
        new m_cmova_2966(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmova  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmova     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 129, Serial#: 2965
    public void m_cmova(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmova(destination, placeHolder, index, scale);
        new m_cmova_2965(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovae    ax, [L1: 0x12345678]}
     */
    // Template#: 130, Serial#: 2903
    public void m_cmovae(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovae(destination, placeHolder);
        new m_cmovae_2903(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovae    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 131, Serial#: 2902
    public void m_cmovae(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovae(destination, placeHolder, index, scale);
        new m_cmovae_2902(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovae    eax, [L1: 0x12345678]}
     */
    // Template#: 132, Serial#: 2894
    public void m_cmovae(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovae(destination, placeHolder);
        new m_cmovae_2894(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovae  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovae    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 133, Serial#: 2893
    public void m_cmovae(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovae(destination, placeHolder, index, scale);
        new m_cmovae_2893(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovb     ax, [L1: 0x12345678]}
     */
    // Template#: 134, Serial#: 2885
    public void m_cmovb(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovb(destination, placeHolder);
        new m_cmovb_2885(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovb     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 135, Serial#: 2884
    public void m_cmovb(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovb(destination, placeHolder, index, scale);
        new m_cmovb_2884(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovb     eax, [L1: 0x12345678]}
     */
    // Template#: 136, Serial#: 2876
    public void m_cmovb(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovb(destination, placeHolder);
        new m_cmovb_2876(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovb     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 137, Serial#: 2875
    public void m_cmovb(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovb(destination, placeHolder, index, scale);
        new m_cmovb_2875(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovbe    ax, [L1: 0x12345678]}
     */
    // Template#: 138, Serial#: 2957
    public void m_cmovbe(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovbe(destination, placeHolder);
        new m_cmovbe_2957(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovbe    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 139, Serial#: 2956
    public void m_cmovbe(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovbe(destination, placeHolder, index, scale);
        new m_cmovbe_2956(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovbe    eax, [L1: 0x12345678]}
     */
    // Template#: 140, Serial#: 2948
    public void m_cmovbe(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovbe(destination, placeHolder);
        new m_cmovbe_2948(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovbe  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovbe    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 141, Serial#: 2947
    public void m_cmovbe(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovbe(destination, placeHolder, index, scale);
        new m_cmovbe_2947(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmove     ax, [L1: 0x12345678]}
     */
    // Template#: 142, Serial#: 2921
    public void m_cmove(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmove(destination, placeHolder);
        new m_cmove_2921(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmove     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 143, Serial#: 2920
    public void m_cmove(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmove(destination, placeHolder, index, scale);
        new m_cmove_2920(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmove     eax, [L1: 0x12345678]}
     */
    // Template#: 144, Serial#: 2912
    public void m_cmove(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmove(destination, placeHolder);
        new m_cmove_2912(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmove  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmove     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 145, Serial#: 2911
    public void m_cmove(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmove(destination, placeHolder, index, scale);
        new m_cmove_2911(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovg     ax, [L1: 0x12345678]}
     */
    // Template#: 146, Serial#: 4364
    public void m_cmovg(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovg(destination, placeHolder);
        new m_cmovg_4364(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovg     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 147, Serial#: 4363
    public void m_cmovg(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovg(destination, placeHolder, index, scale);
        new m_cmovg_4363(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovg     eax, [L1: 0x12345678]}
     */
    // Template#: 148, Serial#: 4355
    public void m_cmovg(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovg(destination, placeHolder);
        new m_cmovg_4355(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovg  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovg     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 149, Serial#: 4354
    public void m_cmovg(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovg(destination, placeHolder, index, scale);
        new m_cmovg_4354(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovge    ax, [L1: 0x12345678]}
     */
    // Template#: 150, Serial#: 4328
    public void m_cmovge(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovge(destination, placeHolder);
        new m_cmovge_4328(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovge    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 151, Serial#: 4327
    public void m_cmovge(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovge(destination, placeHolder, index, scale);
        new m_cmovge_4327(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovge    eax, [L1: 0x12345678]}
     */
    // Template#: 152, Serial#: 4319
    public void m_cmovge(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovge(destination, placeHolder);
        new m_cmovge_4319(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovge  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovge    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 153, Serial#: 4318
    public void m_cmovge(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovge(destination, placeHolder, index, scale);
        new m_cmovge_4318(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovl     ax, [L1: 0x12345678]}
     */
    // Template#: 154, Serial#: 4310
    public void m_cmovl(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovl(destination, placeHolder);
        new m_cmovl_4310(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovl     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 155, Serial#: 4309
    public void m_cmovl(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovl(destination, placeHolder, index, scale);
        new m_cmovl_4309(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovl     eax, [L1: 0x12345678]}
     */
    // Template#: 156, Serial#: 4301
    public void m_cmovl(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovl(destination, placeHolder);
        new m_cmovl_4301(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovl  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovl     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 157, Serial#: 4300
    public void m_cmovl(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovl(destination, placeHolder, index, scale);
        new m_cmovl_4300(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovle    ax, [L1: 0x12345678]}
     */
    // Template#: 158, Serial#: 4346
    public void m_cmovle(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovle(destination, placeHolder);
        new m_cmovle_4346(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovle    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 159, Serial#: 4345
    public void m_cmovle(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovle(destination, placeHolder, index, scale);
        new m_cmovle_4345(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovle    eax, [L1: 0x12345678]}
     */
    // Template#: 160, Serial#: 4337
    public void m_cmovle(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovle(destination, placeHolder);
        new m_cmovle_4337(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovle  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovle    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 161, Serial#: 4336
    public void m_cmovle(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovle(destination, placeHolder, index, scale);
        new m_cmovle_4336(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovne    ax, [L1: 0x12345678]}
     */
    // Template#: 162, Serial#: 2939
    public void m_cmovne(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovne(destination, placeHolder);
        new m_cmovne_2939(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovne    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 163, Serial#: 2938
    public void m_cmovne(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovne(destination, placeHolder, index, scale);
        new m_cmovne_2938(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovne    eax, [L1: 0x12345678]}
     */
    // Template#: 164, Serial#: 2930
    public void m_cmovne(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovne(destination, placeHolder);
        new m_cmovne_2930(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovne  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovne    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 165, Serial#: 2929
    public void m_cmovne(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovne(destination, placeHolder, index, scale);
        new m_cmovne_2929(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovno    ax, [L1: 0x12345678]}
     */
    // Template#: 166, Serial#: 2867
    public void m_cmovno(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovno(destination, placeHolder);
        new m_cmovno_2867(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovno    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 167, Serial#: 2866
    public void m_cmovno(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovno(destination, placeHolder, index, scale);
        new m_cmovno_2866(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovno    eax, [L1: 0x12345678]}
     */
    // Template#: 168, Serial#: 2858
    public void m_cmovno(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovno(destination, placeHolder);
        new m_cmovno_2858(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovno  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovno    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 169, Serial#: 2857
    public void m_cmovno(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovno(destination, placeHolder, index, scale);
        new m_cmovno_2857(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovnp    ax, [L1: 0x12345678]}
     */
    // Template#: 170, Serial#: 4292
    public void m_cmovnp(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovnp(destination, placeHolder);
        new m_cmovnp_4292(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovnp    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 171, Serial#: 4291
    public void m_cmovnp(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovnp(destination, placeHolder, index, scale);
        new m_cmovnp_4291(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovnp    eax, [L1: 0x12345678]}
     */
    // Template#: 172, Serial#: 4283
    public void m_cmovnp(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovnp(destination, placeHolder);
        new m_cmovnp_4283(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovnp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovnp    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 173, Serial#: 4282
    public void m_cmovnp(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovnp(destination, placeHolder, index, scale);
        new m_cmovnp_4282(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovns    ax, [L1: 0x12345678]}
     */
    // Template#: 174, Serial#: 4256
    public void m_cmovns(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovns(destination, placeHolder);
        new m_cmovns_4256(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovns    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 175, Serial#: 4255
    public void m_cmovns(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovns(destination, placeHolder, index, scale);
        new m_cmovns_4255(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovns    eax, [L1: 0x12345678]}
     */
    // Template#: 176, Serial#: 4247
    public void m_cmovns(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovns(destination, placeHolder);
        new m_cmovns_4247(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovns  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovns    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 177, Serial#: 4246
    public void m_cmovns(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovns(destination, placeHolder, index, scale);
        new m_cmovns_4246(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovo     ax, [L1: 0x12345678]}
     */
    // Template#: 178, Serial#: 2849
    public void m_cmovo(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovo(destination, placeHolder);
        new m_cmovo_2849(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovo     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 179, Serial#: 2848
    public void m_cmovo(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovo(destination, placeHolder, index, scale);
        new m_cmovo_2848(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovo     eax, [L1: 0x12345678]}
     */
    // Template#: 180, Serial#: 2840
    public void m_cmovo(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovo(destination, placeHolder);
        new m_cmovo_2840(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovo  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovo     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 181, Serial#: 2839
    public void m_cmovo(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovo(destination, placeHolder, index, scale);
        new m_cmovo_2839(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovp     ax, [L1: 0x12345678]}
     */
    // Template#: 182, Serial#: 4274
    public void m_cmovp(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovp(destination, placeHolder);
        new m_cmovp_4274(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovp     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 183, Serial#: 4273
    public void m_cmovp(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovp(destination, placeHolder, index, scale);
        new m_cmovp_4273(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovp     eax, [L1: 0x12345678]}
     */
    // Template#: 184, Serial#: 4265
    public void m_cmovp(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovp(destination, placeHolder);
        new m_cmovp_4265(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovp     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 185, Serial#: 4264
    public void m_cmovp(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovp(destination, placeHolder, index, scale);
        new m_cmovp_4264(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovs     ax, [L1: 0x12345678]}
     */
    // Template#: 186, Serial#: 4238
    public void m_cmovs(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovs(destination, placeHolder);
        new m_cmovs_4238(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovs     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 187, Serial#: 4237
    public void m_cmovs(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovs(destination, placeHolder, index, scale);
        new m_cmovs_4237(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmovs     eax, [L1: 0x12345678]}
     */
    // Template#: 188, Serial#: 4229
    public void m_cmovs(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovs(destination, placeHolder);
        new m_cmovs_4229(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmovs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmovs     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 189, Serial#: 4228
    public void m_cmovs(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmovs(destination, placeHolder, index, scale);
        new m_cmovs_4228(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmp       ax, [L1: 0x12345678]}
     */
    // Template#: 190, Serial#: 1749
    public void m_cmp(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder);
        new m_cmp_1749(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmp       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 191, Serial#: 1748
    public void m_cmp(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder, index, scale);
        new m_cmp_1748(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmp       eax, [L1: 0x12345678]}
     */
    // Template#: 192, Serial#: 1741
    public void m_cmp(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder);
        new m_cmp_1741(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmp       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 193, Serial#: 1740
    public void m_cmp(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder, index, scale);
        new m_cmp_1740(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cmp       al, [L1: 0x12345678]}
     */
    // Template#: 194, Serial#: 1733
    public void m_cmp(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder);
        new m_cmp_1733(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmp       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 195, Serial#: 1732
    public void m_cmp(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(destination, placeHolder, index, scale);
        new m_cmp_1732(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpb      [L1: 0x12345678], 0x12}
     */
    // Template#: 196, Serial#: 301
    public void m_cmpb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpb(placeHolder, imm8);
        new m_cmpb_301(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpl      [L1: 0x12345678], 0x12}
     */
    // Template#: 197, Serial#: 517
    public void m_cmpl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpl(placeHolder, imm8);
        new m_cmpl_517(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpw      [L1: 0x12345678], 0x12}
     */
    // Template#: 198, Serial#: 589
    public void m_cmpw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpw(placeHolder, imm8);
        new m_cmpw_589(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       [L1: 0x12345678], ax}
     */
    // Template#: 199, Serial#: 1724
    public void m_cmp(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, source);
        new m_cmp_1724(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       [L1: 0x12345678], eax}
     */
    // Template#: 200, Serial#: 1715
    public void m_cmp(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, source);
        new m_cmp_1715(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       [L1: 0x12345678], al}
     */
    // Template#: 201, Serial#: 1706
    public void m_cmp(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, source);
        new m_cmp_1706(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 202, Serial#: 300
    public void m_cmpb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpb(placeHolder, index, scale, imm8);
        new m_cmpb_300(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 203, Serial#: 516
    public void m_cmpl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpl(placeHolder, index, scale, imm8);
        new m_cmpl_516(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code cmpw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 204, Serial#: 588
    public void m_cmpw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpw(placeHolder, index, scale, imm8);
        new m_cmpw_588(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 205, Serial#: 1723
    public void m_cmp(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, index, scale, source);
        new m_cmp_1723(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 206, Serial#: 1714
    public void m_cmp(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, index, scale, source);
        new m_cmp_1714(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmp  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmp       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 207, Serial#: 1705
    public void m_cmp(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmp(placeHolder, index, scale, source);
        new m_cmp_1705(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code cmpl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 208, Serial#: 372
    public void m_cmpl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpl(placeHolder, index, scale, imm32);
        new m_cmpl_372(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code cmpw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 209, Serial#: 444
    public void m_cmpw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpw(placeHolder, index, scale, imm16);
        new m_cmpw_444(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code cmpl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 210, Serial#: 373
    public void m_cmpl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpl(placeHolder, imm32);
        new m_cmpl_373(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code cmpw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 211, Serial#: 445
    public void m_cmpw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpw(placeHolder, imm16);
        new m_cmpw_445(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmppd     xmm0, L1: 0x12345678[esi * 4], less_than_or_equal}
     */
    // Template#: 212, Serial#: 3668
    public void m_cmppd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmppd(destination, placeHolder, index, scale, ia32xmmcomparison);
        new m_cmppd_3668(startPosition, currentPosition() - startPosition, destination, index, scale, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmppd  }<i>destination</i>, <i>label</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmppd     xmm0, [L1: 0x12345678], less_than_or_equal}
     */
    // Template#: 213, Serial#: 3669
    public void m_cmppd(final IA32XMMRegister destination, final Label label, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmppd(destination, placeHolder, ia32xmmcomparison);
        new m_cmppd_3669(startPosition, currentPosition() - startPosition, destination, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpps     xmm0, L1: 0x12345678[esi * 4], less_than_or_equal}
     */
    // Template#: 214, Serial#: 3624
    public void m_cmpps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpps(destination, placeHolder, index, scale, ia32xmmcomparison);
        new m_cmpps_3624(startPosition, currentPosition() - startPosition, destination, index, scale, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpps  }<i>destination</i>, <i>label</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpps     xmm0, [L1: 0x12345678], less_than_or_equal}
     */
    // Template#: 215, Serial#: 3625
    public void m_cmpps(final IA32XMMRegister destination, final Label label, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpps(destination, placeHolder, ia32xmmcomparison);
        new m_cmpps_3625(startPosition, currentPosition() - startPosition, destination, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpsd     xmm0, L1: 0x12345678[esi * 4], less_than_or_equal}
     */
    // Template#: 216, Serial#: 3696
    public void m_cmpsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpsd(destination, placeHolder, index, scale, ia32xmmcomparison);
        new m_cmpsd_3696(startPosition, currentPosition() - startPosition, destination, index, scale, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpsd  }<i>destination</i>, <i>label</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpsd     xmm0, [L1: 0x12345678], less_than_or_equal}
     */
    // Template#: 217, Serial#: 3697
    public void m_cmpsd(final IA32XMMRegister destination, final Label label, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpsd(destination, placeHolder, ia32xmmcomparison);
        new m_cmpsd_3697(startPosition, currentPosition() - startPosition, destination, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpss     xmm0, L1: 0x12345678[esi * 4], less_than_or_equal}
     */
    // Template#: 218, Serial#: 3705
    public void m_cmpss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpss(destination, placeHolder, index, scale, ia32xmmcomparison);
        new m_cmpss_3705(startPosition, currentPosition() - startPosition, destination, index, scale, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpss  }<i>destination</i>, <i>label</i>, <i>ia32xmmcomparison</i>
     * Example disassembly syntax: {@code cmpss     xmm0, [L1: 0x12345678], less_than_or_equal}
     */
    // Template#: 219, Serial#: 3706
    public void m_cmpss(final IA32XMMRegister destination, final Label label, final IA32XMMComparison ia32xmmcomparison) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpss(destination, placeHolder, ia32xmmcomparison);
        new m_cmpss_3706(startPosition, currentPosition() - startPosition, destination, ia32xmmcomparison, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   [L1: 0x12345678], ax}
     */
    // Template#: 220, Serial#: 3487
    public void m_cmpxchg(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, source);
        new m_cmpxchg_3487(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   [L1: 0x12345678], eax}
     */
    // Template#: 221, Serial#: 3478
    public void m_cmpxchg(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, source);
        new m_cmpxchg_3478(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   [L1: 0x12345678], al}
     */
    // Template#: 222, Serial#: 3469
    public void m_cmpxchg(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, source);
        new m_cmpxchg_3469(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 223, Serial#: 3486
    public void m_cmpxchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, index, scale, source);
        new m_cmpxchg_3486(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 224, Serial#: 3477
    public void m_cmpxchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, index, scale, source);
        new m_cmpxchg_3477(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code cmpxchg   L1: 0x12345678[esi * 4], al}
     */
    // Template#: 225, Serial#: 3468
    public void m_cmpxchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg(placeHolder, index, scale, source);
        new m_cmpxchg_3468(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg8b  }<i>label</i>
     * Example disassembly syntax: {@code cmpxchg8b  [L1: 0x12345678]}
     */
    // Template#: 226, Serial#: 3661
    public void m_cmpxchg8b(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg8b(placeHolder);
        new m_cmpxchg8b_3661(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cmpxchg8b  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cmpxchg8b  L1: 0x12345678[esi * 4]}
     */
    // Template#: 227, Serial#: 3660
    public void m_cmpxchg8b(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cmpxchg8b(placeHolder, index, scale);
        new m_cmpxchg8b_3660(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code comisd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 228, Serial#: 4166
    public void m_comisd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_comisd(destination, placeHolder);
        new m_comisd_4166(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code comisd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code comisd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 229, Serial#: 4165
    public void m_comisd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_comisd(destination, placeHolder, index, scale);
        new m_comisd_4165(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code comiss    xmm0, [L1: 0x12345678]}
     */
    // Template#: 230, Serial#: 4096
    public void m_comiss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_comiss(destination, placeHolder);
        new m_comiss_4096(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code comiss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code comiss    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 231, Serial#: 4095
    public void m_comiss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_comiss(destination, placeHolder, index, scale);
        new m_comiss_4095(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtdq2pd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 232, Serial#: 3924
    public void m_cvtdq2pd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtdq2pd(destination, placeHolder);
        new m_cvtdq2pd_3924(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2pd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtdq2pd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 233, Serial#: 3923
    public void m_cvtdq2pd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtdq2pd(destination, placeHolder, index, scale);
        new m_cvtdq2pd_3923(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtdq2ps  xmm0, [L1: 0x12345678]}
     */
    // Template#: 234, Serial#: 4400
    public void m_cvtdq2ps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtdq2ps(destination, placeHolder);
        new m_cvtdq2ps_4400(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtdq2ps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtdq2ps  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 235, Serial#: 4399
    public void m_cvtdq2ps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtdq2ps(destination, placeHolder, index, scale);
        new m_cvtdq2ps_4399(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtpd2dq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 236, Serial#: 3915
    public void m_cvtpd2dq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2dq(destination, placeHolder);
        new m_cvtpd2dq_3915(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2dq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtpd2dq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 237, Serial#: 3914
    public void m_cvtpd2dq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2dq(destination, placeHolder, index, scale);
        new m_cvtpd2dq_3914(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtpd2pi  mm0, [L1: 0x12345678]}
     */
    // Template#: 238, Serial#: 4148
    public void m_cvtpd2pi(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2pi(destination, placeHolder);
        new m_cvtpd2pi_4148(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2pi  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtpd2pi  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 239, Serial#: 4147
    public void m_cvtpd2pi(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2pi(destination, placeHolder, index, scale);
        new m_cvtpd2pi_4147(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtpd2ps  xmm0, [L1: 0x12345678]}
     */
    // Template#: 240, Serial#: 4463
    public void m_cvtpd2ps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2ps(destination, placeHolder);
        new m_cvtpd2ps_4463(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpd2ps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtpd2ps  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 241, Serial#: 4462
    public void m_cvtpd2ps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpd2ps(destination, placeHolder, index, scale);
        new m_cvtpd2ps_4462(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtpi2pd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 242, Serial#: 4122
    public void m_cvtpi2pd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpi2pd(destination, placeHolder);
        new m_cvtpi2pd_4122(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2pd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtpi2pd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 243, Serial#: 4121
    public void m_cvtpi2pd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpi2pd(destination, placeHolder, index, scale);
        new m_cvtpi2pd_4121(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtpi2ps  xmm0, [L1: 0x12345678]}
     */
    // Template#: 244, Serial#: 4052
    public void m_cvtpi2ps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpi2ps(destination, placeHolder);
        new m_cvtpi2ps_4052(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtpi2ps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtpi2ps  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 245, Serial#: 4051
    public void m_cvtpi2ps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtpi2ps(destination, placeHolder, index, scale);
        new m_cvtpi2ps_4051(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtps2dq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 246, Serial#: 4472
    public void m_cvtps2dq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2dq(destination, placeHolder);
        new m_cvtps2dq_4472(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2dq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtps2dq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 247, Serial#: 4471
    public void m_cvtps2dq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2dq(destination, placeHolder, index, scale);
        new m_cvtps2dq_4471(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtps2pd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 248, Serial#: 4391
    public void m_cvtps2pd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2pd(destination, placeHolder);
        new m_cvtps2pd_4391(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtps2pd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 249, Serial#: 4390
    public void m_cvtps2pd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2pd(destination, placeHolder, index, scale);
        new m_cvtps2pd_4390(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtps2pi  mm0, [L1: 0x12345678]}
     */
    // Template#: 250, Serial#: 4078
    public void m_cvtps2pi(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2pi(destination, placeHolder);
        new m_cvtps2pi_4078(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtps2pi  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtps2pi  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 251, Serial#: 4077
    public void m_cvtps2pi(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtps2pi(destination, placeHolder, index, scale);
        new m_cvtps2pi_4077(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtsd2si  eax, [L1: 0x12345678]}
     */
    // Template#: 252, Serial#: 4193
    public void m_cvtsd2si(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsd2si(destination, placeHolder);
        new m_cvtsd2si_4193(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2si  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtsd2si  eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 253, Serial#: 4192
    public void m_cvtsd2si(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsd2si(destination, placeHolder, index, scale);
        new m_cvtsd2si_4192(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtsd2ss  xmm0, [L1: 0x12345678]}
     */
    // Template#: 254, Serial#: 4535
    public void m_cvtsd2ss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsd2ss(destination, placeHolder);
        new m_cvtsd2ss_4535(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsd2ss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtsd2ss  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 255, Serial#: 4534
    public void m_cvtsd2ss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsd2ss(destination, placeHolder, index, scale);
        new m_cvtsd2ss_4534(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtsi2sd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 256, Serial#: 4175
    public void m_cvtsi2sd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsi2sd(destination, placeHolder);
        new m_cvtsi2sd_4175(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2sd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtsi2sd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 257, Serial#: 4174
    public void m_cvtsi2sd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsi2sd(destination, placeHolder, index, scale);
        new m_cvtsi2sd_4174(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtsi2ss  xmm0, [L1: 0x12345678]}
     */
    // Template#: 258, Serial#: 4202
    public void m_cvtsi2ss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsi2ss(destination, placeHolder);
        new m_cvtsi2ss_4202(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtsi2ss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtsi2ss  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 259, Serial#: 4201
    public void m_cvtsi2ss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtsi2ss(destination, placeHolder, index, scale);
        new m_cvtsi2ss_4201(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtss2sd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 260, Serial#: 4598
    public void m_cvtss2sd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtss2sd(destination, placeHolder);
        new m_cvtss2sd_4598(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2sd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtss2sd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 261, Serial#: 4597
    public void m_cvtss2sd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtss2sd(destination, placeHolder, index, scale);
        new m_cvtss2sd_4597(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvtss2si  eax, [L1: 0x12345678]}
     */
    // Template#: 262, Serial#: 4220
    public void m_cvtss2si(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtss2si(destination, placeHolder);
        new m_cvtss2si_4220(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvtss2si  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvtss2si  eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 263, Serial#: 4219
    public void m_cvtss2si(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvtss2si(destination, placeHolder, index, scale);
        new m_cvtss2si_4219(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttpd2dq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 264, Serial#: 3898
    public void m_cvttpd2dq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttpd2dq(destination, placeHolder);
        new m_cvttpd2dq_3898(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2dq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttpd2dq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 265, Serial#: 3897
    public void m_cvttpd2dq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttpd2dq(destination, placeHolder, index, scale);
        new m_cvttpd2dq_3897(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttpd2pi  mm0, [L1: 0x12345678]}
     */
    // Template#: 266, Serial#: 4139
    public void m_cvttpd2pi(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttpd2pi(destination, placeHolder);
        new m_cvttpd2pi_4139(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttpd2pi  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttpd2pi  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 267, Serial#: 4138
    public void m_cvttpd2pi(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttpd2pi(destination, placeHolder, index, scale);
        new m_cvttpd2pi_4138(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttps2dq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 268, Serial#: 4607
    public void m_cvttps2dq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttps2dq(destination, placeHolder);
        new m_cvttps2dq_4607(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2dq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttps2dq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 269, Serial#: 4606
    public void m_cvttps2dq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttps2dq(destination, placeHolder, index, scale);
        new m_cvttps2dq_4606(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttps2pi  mm0, [L1: 0x12345678]}
     */
    // Template#: 270, Serial#: 4069
    public void m_cvttps2pi(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttps2pi(destination, placeHolder);
        new m_cvttps2pi_4069(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttps2pi  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttps2pi  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 271, Serial#: 4068
    public void m_cvttps2pi(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttps2pi(destination, placeHolder, index, scale);
        new m_cvttps2pi_4068(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttsd2si  eax, [L1: 0x12345678]}
     */
    // Template#: 272, Serial#: 4184
    public void m_cvttsd2si(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttsd2si(destination, placeHolder);
        new m_cvttsd2si_4184(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttsd2si  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttsd2si  eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 273, Serial#: 4183
    public void m_cvttsd2si(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttsd2si(destination, placeHolder, index, scale);
        new m_cvttsd2si_4183(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code cvttss2si  eax, [L1: 0x12345678]}
     */
    // Template#: 274, Serial#: 4211
    public void m_cvttss2si(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttss2si(destination, placeHolder);
        new m_cvttss2si_4211(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code cvttss2si  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code cvttss2si  eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 275, Serial#: 4210
    public void m_cvttss2si(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_cvttss2si(destination, placeHolder, index, scale);
        new m_cvttss2si_4210(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>label</i>
     * Example disassembly syntax: {@code decb      [L1: 0x12345678]}
     */
    // Template#: 276, Serial#: 2423
    public void m_decb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decb(placeHolder);
        new m_decb_2423(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>label</i>
     * Example disassembly syntax: {@code decl      [L1: 0x12345678]}
     */
    // Template#: 277, Serial#: 2441
    public void m_decl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decl(placeHolder);
        new m_decl_2441(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>label</i>
     * Example disassembly syntax: {@code decw      [L1: 0x12345678]}
     */
    // Template#: 278, Serial#: 2483
    public void m_decw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decw(placeHolder);
        new m_decw_2483(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code decb      L1: 0x12345678[esi * 4]}
     */
    // Template#: 279, Serial#: 2422
    public void m_decb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decb(placeHolder, index, scale);
        new m_decb_2422(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code decl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 280, Serial#: 2440
    public void m_decl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decl(placeHolder, index, scale);
        new m_decl_2440(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code decw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code decw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 281, Serial#: 2482
    public void m_decw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_decw(placeHolder, index, scale);
        new m_decw_2482(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>label</i>
     * Example disassembly syntax: {@code divb      [L1: 0x12345678], al}
     */
    // Template#: 282, Serial#: 1370
    public void m_divb___AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divb___AL(placeHolder);
        new m_divb___AL_1370(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>label</i>
     * Example disassembly syntax: {@code divl      [L1: 0x12345678], eax}
     */
    // Template#: 283, Serial#: 1433
    public void m_divl___EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divl___EAX(placeHolder);
        new m_divl___EAX_1433(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>label</i>
     * Example disassembly syntax: {@code divw      [L1: 0x12345678], ax}
     */
    // Template#: 284, Serial#: 1496
    public void m_divw___AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divw___AX(placeHolder);
        new m_divw___AX_1496(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divb      L1: 0x12345678[esi * 4], al}
     */
    // Template#: 285, Serial#: 1369
    public void m_divb___AL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divb___AL(placeHolder, index, scale);
        new m_divb___AL_1369(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divl      L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 286, Serial#: 1432
    public void m_divl___EAX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divl___EAX(placeHolder, index, scale);
        new m_divl___EAX_1432(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divw      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 287, Serial#: 1495
    public void m_divw___AX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divw___AX(placeHolder, index, scale);
        new m_divw___AX_1495(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code divpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 288, Serial#: 4499
    public void m_divpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divpd(destination, placeHolder);
        new m_divpd_4499(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 289, Serial#: 4498
    public void m_divpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divpd(destination, placeHolder, index, scale);
        new m_divpd_4498(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code divps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 290, Serial#: 4427
    public void m_divps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divps(destination, placeHolder);
        new m_divps_4427(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 291, Serial#: 4426
    public void m_divps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divps(destination, placeHolder, index, scale);
        new m_divps_4426(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code divsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 292, Serial#: 4562
    public void m_divsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divsd(destination, placeHolder);
        new m_divsd_4562(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 293, Serial#: 4561
    public void m_divsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divsd(destination, placeHolder, index, scale);
        new m_divsd_4561(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code divss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 294, Serial#: 4634
    public void m_divss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divss(destination, placeHolder);
        new m_divss_4634(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code divss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code divss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 295, Serial#: 4633
    public void m_divss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_divss(destination, placeHolder, index, scale);
        new m_divss_4633(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>label</i>
     * Example disassembly syntax: {@code fadds     [L1: 0x12345678]}
     */
    // Template#: 296, Serial#: 1946
    public void m_fadds(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fadds(placeHolder);
        new m_fadds_1946(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>label</i>
     * Example disassembly syntax: {@code faddl     [L1: 0x12345678]}
     */
    // Template#: 297, Serial#: 2170
    public void m_faddl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_faddl(placeHolder);
        new m_faddl_2170(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fadds  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fadds     L1: 0x12345678[esi * 4]}
     */
    // Template#: 298, Serial#: 1945
    public void m_fadds(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fadds(placeHolder, index, scale);
        new m_fadds_1945(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code faddl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code faddl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 299, Serial#: 2169
    public void m_faddl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_faddl(placeHolder, index, scale);
        new m_faddl_2169(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>label</i>
     * Example disassembly syntax: {@code fbld      [L1: 0x12345678]}
     */
    // Template#: 300, Serial#: 2358
    public void m_fbld(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fbld(placeHolder);
        new m_fbld_2358(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbld  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fbld      L1: 0x12345678[esi * 4]}
     */
    // Template#: 301, Serial#: 2357
    public void m_fbld(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fbld(placeHolder, index, scale);
        new m_fbld_2357(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>label</i>
     * Example disassembly syntax: {@code fbstp     [L1: 0x12345678]}
     */
    // Template#: 302, Serial#: 2366
    public void m_fbstp(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fbstp(placeHolder);
        new m_fbstp_2366(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fbstp  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fbstp     L1: 0x12345678[esi * 4]}
     */
    // Template#: 303, Serial#: 2365
    public void m_fbstp(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fbstp(placeHolder, index, scale);
        new m_fbstp_2365(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>label</i>
     * Example disassembly syntax: {@code fcoms     [L1: 0x12345678]}
     */
    // Template#: 304, Serial#: 1954
    public void m_fcoms(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcoms(placeHolder);
        new m_fcoms_1954(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>label</i>
     * Example disassembly syntax: {@code fcoml     [L1: 0x12345678]}
     */
    // Template#: 305, Serial#: 2178
    public void m_fcoml(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcoml(placeHolder);
        new m_fcoml_2178(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoms  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fcoms     L1: 0x12345678[esi * 4]}
     */
    // Template#: 306, Serial#: 1953
    public void m_fcoms(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcoms(placeHolder, index, scale);
        new m_fcoms_1953(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcoml  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fcoml     L1: 0x12345678[esi * 4]}
     */
    // Template#: 307, Serial#: 2177
    public void m_fcoml(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcoml(placeHolder, index, scale);
        new m_fcoml_2177(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>label</i>
     * Example disassembly syntax: {@code fcomps    [L1: 0x12345678]}
     */
    // Template#: 308, Serial#: 1958
    public void m_fcomps(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcomps(placeHolder);
        new m_fcomps_1958(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>label</i>
     * Example disassembly syntax: {@code fcompl    [L1: 0x12345678]}
     */
    // Template#: 309, Serial#: 2182
    public void m_fcompl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcompl(placeHolder);
        new m_fcompl_2182(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcomps  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fcomps    L1: 0x12345678[esi * 4]}
     */
    // Template#: 310, Serial#: 1957
    public void m_fcomps(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcomps(placeHolder, index, scale);
        new m_fcomps_1957(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fcompl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fcompl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 311, Serial#: 2181
    public void m_fcompl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fcompl(placeHolder, index, scale);
        new m_fcompl_2181(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>label</i>
     * Example disassembly syntax: {@code fdivs     [L1: 0x12345678]}
     */
    // Template#: 312, Serial#: 1970
    public void m_fdivs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivs(placeHolder);
        new m_fdivs_1970(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>label</i>
     * Example disassembly syntax: {@code fdivl     [L1: 0x12345678]}
     */
    // Template#: 313, Serial#: 2194
    public void m_fdivl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivl(placeHolder);
        new m_fdivl_2194(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fdivs     L1: 0x12345678[esi * 4]}
     */
    // Template#: 314, Serial#: 1969
    public void m_fdivs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivs(placeHolder, index, scale);
        new m_fdivs_1969(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fdivl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 315, Serial#: 2193
    public void m_fdivl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivl(placeHolder, index, scale);
        new m_fdivl_2193(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>label</i>
     * Example disassembly syntax: {@code fdivrs    [L1: 0x12345678]}
     */
    // Template#: 316, Serial#: 1974
    public void m_fdivrs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivrs(placeHolder);
        new m_fdivrs_1974(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>label</i>
     * Example disassembly syntax: {@code fdivrl    [L1: 0x12345678]}
     */
    // Template#: 317, Serial#: 2198
    public void m_fdivrl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivrl(placeHolder);
        new m_fdivrl_2198(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fdivrs    L1: 0x12345678[esi * 4]}
     */
    // Template#: 318, Serial#: 1973
    public void m_fdivrs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivrs(placeHolder, index, scale);
        new m_fdivrs_1973(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fdivrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fdivrl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 319, Serial#: 2197
    public void m_fdivrl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fdivrl(placeHolder, index, scale);
        new m_fdivrl_2197(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>label</i>
     * Example disassembly syntax: {@code fiaddl    [L1: 0x12345678]}
     */
    // Template#: 320, Serial#: 2066
    public void m_fiaddl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fiaddl(placeHolder);
        new m_fiaddl_2066(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>label</i>
     * Example disassembly syntax: {@code fiadds    [L1: 0x12345678]}
     */
    // Template#: 321, Serial#: 2282
    public void m_fiadds(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fiadds(placeHolder);
        new m_fiadds_2282(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiaddl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fiaddl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 322, Serial#: 2065
    public void m_fiaddl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fiaddl(placeHolder, index, scale);
        new m_fiaddl_2065(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fiadds  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fiadds    L1: 0x12345678[esi * 4]}
     */
    // Template#: 323, Serial#: 2281
    public void m_fiadds(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fiadds(placeHolder, index, scale);
        new m_fiadds_2281(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>label</i>
     * Example disassembly syntax: {@code ficoml    [L1: 0x12345678]}
     */
    // Template#: 324, Serial#: 2074
    public void m_ficoml(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficoml(placeHolder);
        new m_ficoml_2074(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>label</i>
     * Example disassembly syntax: {@code ficoms    [L1: 0x12345678]}
     */
    // Template#: 325, Serial#: 2290
    public void m_ficoms(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficoms(placeHolder);
        new m_ficoms_2290(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoml  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ficoml    L1: 0x12345678[esi * 4]}
     */
    // Template#: 326, Serial#: 2073
    public void m_ficoml(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficoml(placeHolder, index, scale);
        new m_ficoml_2073(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficoms  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ficoms    L1: 0x12345678[esi * 4]}
     */
    // Template#: 327, Serial#: 2289
    public void m_ficoms(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficoms(placeHolder, index, scale);
        new m_ficoms_2289(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>label</i>
     * Example disassembly syntax: {@code ficompl   [L1: 0x12345678]}
     */
    // Template#: 328, Serial#: 2078
    public void m_ficompl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficompl(placeHolder);
        new m_ficompl_2078(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>label</i>
     * Example disassembly syntax: {@code ficomps   [L1: 0x12345678]}
     */
    // Template#: 329, Serial#: 2294
    public void m_ficomps(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficomps(placeHolder);
        new m_ficomps_2294(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficompl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ficompl   L1: 0x12345678[esi * 4]}
     */
    // Template#: 330, Serial#: 2077
    public void m_ficompl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficompl(placeHolder, index, scale);
        new m_ficompl_2077(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ficomps  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ficomps   L1: 0x12345678[esi * 4]}
     */
    // Template#: 331, Serial#: 2293
    public void m_ficomps(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ficomps(placeHolder, index, scale);
        new m_ficomps_2293(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>label</i>
     * Example disassembly syntax: {@code fidivl    [L1: 0x12345678]}
     */
    // Template#: 332, Serial#: 2090
    public void m_fidivl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivl(placeHolder);
        new m_fidivl_2090(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>label</i>
     * Example disassembly syntax: {@code fidivs    [L1: 0x12345678]}
     */
    // Template#: 333, Serial#: 2306
    public void m_fidivs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivs(placeHolder);
        new m_fidivs_2306(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fidivl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 334, Serial#: 2089
    public void m_fidivl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivl(placeHolder, index, scale);
        new m_fidivl_2089(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fidivs    L1: 0x12345678[esi * 4]}
     */
    // Template#: 335, Serial#: 2305
    public void m_fidivs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivs(placeHolder, index, scale);
        new m_fidivs_2305(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>label</i>
     * Example disassembly syntax: {@code fidivrl   [L1: 0x12345678]}
     */
    // Template#: 336, Serial#: 2094
    public void m_fidivrl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivrl(placeHolder);
        new m_fidivrl_2094(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>label</i>
     * Example disassembly syntax: {@code fidivrs   [L1: 0x12345678]}
     */
    // Template#: 337, Serial#: 2310
    public void m_fidivrs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivrs(placeHolder);
        new m_fidivrs_2310(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fidivrl   L1: 0x12345678[esi * 4]}
     */
    // Template#: 338, Serial#: 2093
    public void m_fidivrl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivrl(placeHolder, index, scale);
        new m_fidivrl_2093(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fidivrs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fidivrs   L1: 0x12345678[esi * 4]}
     */
    // Template#: 339, Serial#: 2309
    public void m_fidivrs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fidivrs(placeHolder, index, scale);
        new m_fidivrs_2309(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>label</i>
     * Example disassembly syntax: {@code fildl     [L1: 0x12345678]}
     */
    // Template#: 340, Serial#: 2130
    public void m_fildl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fildl(placeHolder);
        new m_fildl_2130(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>label</i>
     * Example disassembly syntax: {@code filds     [L1: 0x12345678]}
     */
    // Template#: 341, Serial#: 2346
    public void m_filds(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_filds(placeHolder);
        new m_filds_2346(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>label</i>
     * Example disassembly syntax: {@code fildq     [L1: 0x12345678]}
     */
    // Template#: 342, Serial#: 2362
    public void m_fildq(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fildq(placeHolder);
        new m_fildq_2362(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fildl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 343, Serial#: 2129
    public void m_fildl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fildl(placeHolder, index, scale);
        new m_fildl_2129(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code filds  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code filds     L1: 0x12345678[esi * 4]}
     */
    // Template#: 344, Serial#: 2345
    public void m_filds(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_filds(placeHolder, index, scale);
        new m_filds_2345(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fildq  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fildq     L1: 0x12345678[esi * 4]}
     */
    // Template#: 345, Serial#: 2361
    public void m_fildq(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fildq(placeHolder, index, scale);
        new m_fildq_2361(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>label</i>
     * Example disassembly syntax: {@code fimull    [L1: 0x12345678]}
     */
    // Template#: 346, Serial#: 2070
    public void m_fimull(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fimull(placeHolder);
        new m_fimull_2070(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>label</i>
     * Example disassembly syntax: {@code fimuls    [L1: 0x12345678]}
     */
    // Template#: 347, Serial#: 2286
    public void m_fimuls(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fimuls(placeHolder);
        new m_fimuls_2286(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimull  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fimull    L1: 0x12345678[esi * 4]}
     */
    // Template#: 348, Serial#: 2069
    public void m_fimull(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fimull(placeHolder, index, scale);
        new m_fimull_2069(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fimuls  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fimuls    L1: 0x12345678[esi * 4]}
     */
    // Template#: 349, Serial#: 2285
    public void m_fimuls(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fimuls(placeHolder, index, scale);
        new m_fimuls_2285(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>label</i>
     * Example disassembly syntax: {@code fistl     [L1: 0x12345678]}
     */
    // Template#: 350, Serial#: 2134
    public void m_fistl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistl(placeHolder);
        new m_fistl_2134(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>label</i>
     * Example disassembly syntax: {@code fists     [L1: 0x12345678]}
     */
    // Template#: 351, Serial#: 2350
    public void m_fists(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fists(placeHolder);
        new m_fists_2350(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fistl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 352, Serial#: 2133
    public void m_fistl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistl(placeHolder, index, scale);
        new m_fistl_2133(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fists  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fists     L1: 0x12345678[esi * 4]}
     */
    // Template#: 353, Serial#: 2349
    public void m_fists(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fists(placeHolder, index, scale);
        new m_fists_2349(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>label</i>
     * Example disassembly syntax: {@code fistpl    [L1: 0x12345678]}
     */
    // Template#: 354, Serial#: 2138
    public void m_fistpl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistpl(placeHolder);
        new m_fistpl_2138(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>label</i>
     * Example disassembly syntax: {@code fistps    [L1: 0x12345678]}
     */
    // Template#: 355, Serial#: 2354
    public void m_fistps(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistps(placeHolder);
        new m_fistps_2354(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>label</i>
     * Example disassembly syntax: {@code fistpq    [L1: 0x12345678]}
     */
    // Template#: 356, Serial#: 2370
    public void m_fistpq(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistpq(placeHolder);
        new m_fistpq_2370(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fistpl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 357, Serial#: 2137
    public void m_fistpl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistpl(placeHolder, index, scale);
        new m_fistpl_2137(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistps  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fistps    L1: 0x12345678[esi * 4]}
     */
    // Template#: 358, Serial#: 2353
    public void m_fistps(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistps(placeHolder, index, scale);
        new m_fistps_2353(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fistpq  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fistpq    L1: 0x12345678[esi * 4]}
     */
    // Template#: 359, Serial#: 2369
    public void m_fistpq(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fistpq(placeHolder, index, scale);
        new m_fistpq_2369(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>label</i>
     * Example disassembly syntax: {@code fisubl    [L1: 0x12345678]}
     */
    // Template#: 360, Serial#: 2082
    public void m_fisubl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubl(placeHolder);
        new m_fisubl_2082(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>label</i>
     * Example disassembly syntax: {@code fisubs    [L1: 0x12345678]}
     */
    // Template#: 361, Serial#: 2298
    public void m_fisubs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubs(placeHolder);
        new m_fisubs_2298(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fisubl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 362, Serial#: 2081
    public void m_fisubl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubl(placeHolder, index, scale);
        new m_fisubl_2081(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fisubs    L1: 0x12345678[esi * 4]}
     */
    // Template#: 363, Serial#: 2297
    public void m_fisubs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubs(placeHolder, index, scale);
        new m_fisubs_2297(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>label</i>
     * Example disassembly syntax: {@code fisubrl   [L1: 0x12345678]}
     */
    // Template#: 364, Serial#: 2086
    public void m_fisubrl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubrl(placeHolder);
        new m_fisubrl_2086(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>label</i>
     * Example disassembly syntax: {@code fisubrs   [L1: 0x12345678]}
     */
    // Template#: 365, Serial#: 2302
    public void m_fisubrs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubrs(placeHolder);
        new m_fisubrs_2302(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fisubrl   L1: 0x12345678[esi * 4]}
     */
    // Template#: 366, Serial#: 2085
    public void m_fisubrl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubrl(placeHolder, index, scale);
        new m_fisubrl_2085(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fisubrs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fisubrs   L1: 0x12345678[esi * 4]}
     */
    // Template#: 367, Serial#: 2301
    public void m_fisubrs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fisubrs(placeHolder, index, scale);
        new m_fisubrs_2301(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>label</i>
     * Example disassembly syntax: {@code flds      [L1: 0x12345678]}
     */
    // Template#: 368, Serial#: 2010
    public void m_flds(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_flds(placeHolder);
        new m_flds_2010(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>label</i>
     * Example disassembly syntax: {@code fldt      [L1: 0x12345678]}
     */
    // Template#: 369, Serial#: 2142
    public void m_fldt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldt(placeHolder);
        new m_fldt_2142(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>label</i>
     * Example disassembly syntax: {@code fldl      [L1: 0x12345678]}
     */
    // Template#: 370, Serial#: 2234
    public void m_fldl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldl(placeHolder);
        new m_fldl_2234(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code flds  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code flds      L1: 0x12345678[esi * 4]}
     */
    // Template#: 371, Serial#: 2009
    public void m_flds(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_flds(placeHolder, index, scale);
        new m_flds_2009(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fldt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 372, Serial#: 2141
    public void m_fldt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldt(placeHolder, index, scale);
        new m_fldt_2141(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fldl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 373, Serial#: 2233
    public void m_fldl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldl(placeHolder, index, scale);
        new m_fldl_2233(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>label</i>
     * Example disassembly syntax: {@code fldcw     [L1: 0x12345678]}
     */
    // Template#: 374, Serial#: 2026
    public void m_fldcw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldcw(placeHolder);
        new m_fldcw_2026(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldcw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fldcw     L1: 0x12345678[esi * 4]}
     */
    // Template#: 375, Serial#: 2025
    public void m_fldcw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldcw(placeHolder, index, scale);
        new m_fldcw_2025(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>label</i>
     * Example disassembly syntax: {@code fldenv    [L1: 0x12345678]}
     */
    // Template#: 376, Serial#: 2022
    public void m_fldenv(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldenv(placeHolder);
        new m_fldenv_2022(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fldenv  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fldenv    L1: 0x12345678[esi * 4]}
     */
    // Template#: 377, Serial#: 2021
    public void m_fldenv(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fldenv(placeHolder, index, scale);
        new m_fldenv_2021(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>label</i>
     * Example disassembly syntax: {@code fmuls     [L1: 0x12345678]}
     */
    // Template#: 378, Serial#: 1950
    public void m_fmuls(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fmuls(placeHolder);
        new m_fmuls_1950(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>label</i>
     * Example disassembly syntax: {@code fmull     [L1: 0x12345678]}
     */
    // Template#: 379, Serial#: 2174
    public void m_fmull(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fmull(placeHolder);
        new m_fmull_2174(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmuls  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fmuls     L1: 0x12345678[esi * 4]}
     */
    // Template#: 380, Serial#: 1949
    public void m_fmuls(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fmuls(placeHolder, index, scale);
        new m_fmuls_1949(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fmull  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fmull     L1: 0x12345678[esi * 4]}
     */
    // Template#: 381, Serial#: 2173
    public void m_fmull(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fmull(placeHolder, index, scale);
        new m_fmull_2173(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>label</i>
     * Example disassembly syntax: {@code frstor    [L1: 0x12345678]}
     */
    // Template#: 382, Serial#: 2246
    public void m_frstor(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_frstor(placeHolder);
        new m_frstor_2246(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code frstor  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code frstor    L1: 0x12345678[esi * 4]}
     */
    // Template#: 383, Serial#: 2245
    public void m_frstor(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_frstor(placeHolder, index, scale);
        new m_frstor_2245(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>label</i>
     * Example disassembly syntax: {@code fsave     [L1: 0x12345678]}
     */
    // Template#: 384, Serial#: 2250
    public void m_fsave(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsave(placeHolder);
        new m_fsave_2250(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsave  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsave     L1: 0x12345678[esi * 4]}
     */
    // Template#: 385, Serial#: 2249
    public void m_fsave(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsave(placeHolder, index, scale);
        new m_fsave_2249(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>label</i>
     * Example disassembly syntax: {@code fsts      [L1: 0x12345678]}
     */
    // Template#: 386, Serial#: 2014
    public void m_fsts(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsts(placeHolder);
        new m_fsts_2014(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>label</i>
     * Example disassembly syntax: {@code fstl      [L1: 0x12345678]}
     */
    // Template#: 387, Serial#: 2238
    public void m_fstl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstl(placeHolder);
        new m_fstl_2238(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsts  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsts      L1: 0x12345678[esi * 4]}
     */
    // Template#: 388, Serial#: 2013
    public void m_fsts(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsts(placeHolder, index, scale);
        new m_fsts_2013(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 389, Serial#: 2237
    public void m_fstl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstl(placeHolder, index, scale);
        new m_fstl_2237(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>label</i>
     * Example disassembly syntax: {@code fstcw     [L1: 0x12345678]}
     */
    // Template#: 390, Serial#: 2034
    public void m_fstcw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstcw(placeHolder);
        new m_fstcw_2034(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstcw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstcw     L1: 0x12345678[esi * 4]}
     */
    // Template#: 391, Serial#: 2033
    public void m_fstcw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstcw(placeHolder, index, scale);
        new m_fstcw_2033(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>label</i>
     * Example disassembly syntax: {@code fstenv    [L1: 0x12345678]}
     */
    // Template#: 392, Serial#: 2030
    public void m_fstenv(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstenv(placeHolder);
        new m_fstenv_2030(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstenv  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstenv    L1: 0x12345678[esi * 4]}
     */
    // Template#: 393, Serial#: 2029
    public void m_fstenv(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstenv(placeHolder, index, scale);
        new m_fstenv_2029(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>label</i>
     * Example disassembly syntax: {@code fstps     [L1: 0x12345678]}
     */
    // Template#: 394, Serial#: 2018
    public void m_fstps(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstps(placeHolder);
        new m_fstps_2018(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>label</i>
     * Example disassembly syntax: {@code fstpt     [L1: 0x12345678]}
     */
    // Template#: 395, Serial#: 2146
    public void m_fstpt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstpt(placeHolder);
        new m_fstpt_2146(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>label</i>
     * Example disassembly syntax: {@code fstpl     [L1: 0x12345678]}
     */
    // Template#: 396, Serial#: 2242
    public void m_fstpl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstpl(placeHolder);
        new m_fstpl_2242(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstps  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstps     L1: 0x12345678[esi * 4]}
     */
    // Template#: 397, Serial#: 2017
    public void m_fstps(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstps(placeHolder, index, scale);
        new m_fstps_2017(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstpt     L1: 0x12345678[esi * 4]}
     */
    // Template#: 398, Serial#: 2145
    public void m_fstpt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstpt(placeHolder, index, scale);
        new m_fstpt_2145(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstpl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstpl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 399, Serial#: 2241
    public void m_fstpl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstpl(placeHolder, index, scale);
        new m_fstpl_2241(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>label</i>
     * Example disassembly syntax: {@code fstsw     [L1: 0x12345678]}
     */
    // Template#: 400, Serial#: 2254
    public void m_fstsw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstsw(placeHolder);
        new m_fstsw_2254(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fstsw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fstsw     L1: 0x12345678[esi * 4]}
     */
    // Template#: 401, Serial#: 2253
    public void m_fstsw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fstsw(placeHolder, index, scale);
        new m_fstsw_2253(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>label</i>
     * Example disassembly syntax: {@code fsubs     [L1: 0x12345678]}
     */
    // Template#: 402, Serial#: 1962
    public void m_fsubs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubs(placeHolder);
        new m_fsubs_1962(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>label</i>
     * Example disassembly syntax: {@code fsubl     [L1: 0x12345678]}
     */
    // Template#: 403, Serial#: 2186
    public void m_fsubl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubl(placeHolder);
        new m_fsubl_2186(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsubs     L1: 0x12345678[esi * 4]}
     */
    // Template#: 404, Serial#: 1961
    public void m_fsubs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubs(placeHolder, index, scale);
        new m_fsubs_1961(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsubl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 405, Serial#: 2185
    public void m_fsubl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubl(placeHolder, index, scale);
        new m_fsubl_2185(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>label</i>
     * Example disassembly syntax: {@code fsubrs    [L1: 0x12345678]}
     */
    // Template#: 406, Serial#: 1966
    public void m_fsubrs(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubrs(placeHolder);
        new m_fsubrs_1966(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>label</i>
     * Example disassembly syntax: {@code fsubrl    [L1: 0x12345678]}
     */
    // Template#: 407, Serial#: 2190
    public void m_fsubrl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubrl(placeHolder);
        new m_fsubrl_2190(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrs  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsubrs    L1: 0x12345678[esi * 4]}
     */
    // Template#: 408, Serial#: 1965
    public void m_fsubrs(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubrs(placeHolder, index, scale);
        new m_fsubrs_1965(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code fsubrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code fsubrl    L1: 0x12345678[esi * 4]}
     */
    // Template#: 409, Serial#: 2189
    public void m_fsubrl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_fsubrl(placeHolder, index, scale);
        new m_fsubrl_2189(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code haddpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 410, Serial#: 4804
    public void m_haddpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_haddpd(destination, placeHolder);
        new m_haddpd_4804(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code haddpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 411, Serial#: 4803
    public void m_haddpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_haddpd(destination, placeHolder, index, scale);
        new m_haddpd_4803(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code haddps    xmm0, [L1: 0x12345678]}
     */
    // Template#: 412, Serial#: 4839
    public void m_haddps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_haddps(destination, placeHolder);
        new m_haddps_4839(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code haddps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code haddps    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 413, Serial#: 4838
    public void m_haddps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_haddps(destination, placeHolder, index, scale);
        new m_haddps_4838(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code hsubpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 414, Serial#: 4813
    public void m_hsubpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_hsubpd(destination, placeHolder);
        new m_hsubpd_4813(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code hsubpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 415, Serial#: 4812
    public void m_hsubpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_hsubpd(destination, placeHolder, index, scale);
        new m_hsubpd_4812(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code hsubps    xmm0, [L1: 0x12345678]}
     */
    // Template#: 416, Serial#: 4848
    public void m_hsubps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_hsubps(destination, placeHolder);
        new m_hsubps_4848(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code hsubps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code hsubps    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 417, Serial#: 4847
    public void m_hsubps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_hsubps(destination, placeHolder, index, scale);
        new m_hsubps_4847(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>label</i>
     * Example disassembly syntax: {@code idivb     [L1: 0x12345678], al}
     */
    // Template#: 418, Serial#: 1374
    public void m_idivb___AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivb___AL(placeHolder);
        new m_idivb___AL_1374(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>label</i>
     * Example disassembly syntax: {@code idivl     [L1: 0x12345678], eax}
     */
    // Template#: 419, Serial#: 1437
    public void m_idivl___EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivl___EAX(placeHolder);
        new m_idivl___EAX_1437(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>label</i>
     * Example disassembly syntax: {@code idivw     [L1: 0x12345678], ax}
     */
    // Template#: 420, Serial#: 1500
    public void m_idivw___AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivw___AX(placeHolder);
        new m_idivw___AX_1500(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code idivb     L1: 0x12345678[esi * 4], al}
     */
    // Template#: 421, Serial#: 1373
    public void m_idivb___AL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivb___AL(placeHolder, index, scale);
        new m_idivb___AL_1373(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code idivl     L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 422, Serial#: 1436
    public void m_idivl___EAX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivl___EAX(placeHolder, index, scale);
        new m_idivl___EAX_1436(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code idivw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code idivw     L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 423, Serial#: 1499
    public void m_idivw___AX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_idivw___AX(placeHolder, index, scale);
        new m_idivw___AX_1499(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code imul      ax, [L1: 0x12345678]}
     */
    // Template#: 424, Serial#: 5022
    public void m_imul(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder);
        new m_imul_5022(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code imul      ax, [L1: 0x12345678], 0x12}
     */
    // Template#: 425, Serial#: 1796
    public void m_imul(final IA32GeneralRegister16 destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, imm8);
        new m_imul_1796(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code imul      ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 426, Serial#: 5021
    public void m_imul(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale);
        new m_imul_5021(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code imul      ax, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 427, Serial#: 1795
    public void m_imul(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale, imm8);
        new m_imul_1795(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code imulw     ax, L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 428, Serial#: 1776
    public void m_imul(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale, imm16);
        new m_imul_1776(startPosition, currentPosition() - startPosition, destination, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>destination</i>, <i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code imulw     ax, [L1: 0x12345678], 0x1234}
     */
    // Template#: 429, Serial#: 1777
    public void m_imul(final IA32GeneralRegister16 destination, final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, imm16);
        new m_imul_1777(startPosition, currentPosition() - startPosition, destination, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code imul      eax, [L1: 0x12345678]}
     */
    // Template#: 430, Serial#: 5013
    public void m_imul(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder);
        new m_imul_5013(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code imul      eax, [L1: 0x12345678], 0x12}
     */
    // Template#: 431, Serial#: 1787
    public void m_imul(final IA32GeneralRegister32 destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, imm8);
        new m_imul_1787(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code imul      eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 432, Serial#: 5012
    public void m_imul(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale);
        new m_imul_5012(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imul  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code imul      eax, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 433, Serial#: 1786
    public void m_imul(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale, imm8);
        new m_imul_1786(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code imull     eax, L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 434, Serial#: 1767
    public void m_imul(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, index, scale, imm32);
        new m_imul_1767(startPosition, currentPosition() - startPosition, destination, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>destination</i>, <i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code imull     eax, [L1: 0x12345678], 0x12345678}
     */
    // Template#: 435, Serial#: 1768
    public void m_imul(final IA32GeneralRegister32 destination, final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imul(destination, placeHolder, imm32);
        new m_imul_1768(startPosition, currentPosition() - startPosition, destination, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>label</i>
     * Example disassembly syntax: {@code imulb     [L1: 0x12345678], al}
     */
    // Template#: 436, Serial#: 1366
    public void m_imulb___AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imulb___AL(placeHolder);
        new m_imulb___AL_1366(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>label</i>
     * Example disassembly syntax: {@code imull     [L1: 0x12345678], eax}
     */
    // Template#: 437, Serial#: 1429
    public void m_imull___EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imull___EAX(placeHolder);
        new m_imull___EAX_1429(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>label</i>
     * Example disassembly syntax: {@code imulw     [L1: 0x12345678], ax}
     */
    // Template#: 438, Serial#: 1492
    public void m_imulw___AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imulw___AX(placeHolder);
        new m_imulw___AX_1492(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code imulb     L1: 0x12345678[esi * 4], al}
     */
    // Template#: 439, Serial#: 1365
    public void m_imulb___AL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imulb___AL(placeHolder, index, scale);
        new m_imulb___AL_1365(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imull  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code imull     L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 440, Serial#: 1428
    public void m_imull___EAX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imull___EAX(placeHolder, index, scale);
        new m_imull___EAX_1428(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code imulw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code imulw     L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 441, Serial#: 1491
    public void m_imulw___AX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_imulw___AX(placeHolder, index, scale);
        new m_imulw___AX_1491(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>label</i>
     * Example disassembly syntax: {@code incb      [L1: 0x12345678]}
     */
    // Template#: 442, Serial#: 2419
    public void m_incb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incb(placeHolder);
        new m_incb_2419(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>label</i>
     * Example disassembly syntax: {@code incl      [L1: 0x12345678]}
     */
    // Template#: 443, Serial#: 2437
    public void m_incl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incl(placeHolder);
        new m_incl_2437(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>label</i>
     * Example disassembly syntax: {@code incw      [L1: 0x12345678]}
     */
    // Template#: 444, Serial#: 2479
    public void m_incw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incw(placeHolder);
        new m_incw_2479(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code incb      L1: 0x12345678[esi * 4]}
     */
    // Template#: 445, Serial#: 2418
    public void m_incb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incb(placeHolder, index, scale);
        new m_incb_2418(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code incl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 446, Serial#: 2436
    public void m_incl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incl(placeHolder, index, scale);
        new m_incl_2436(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code incw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code incw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 447, Serial#: 2478
    public void m_incw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_incw(placeHolder, index, scale);
        new m_incw_2478(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>label</i>
     * Example disassembly syntax: {@code invlpg    [L1: 0x12345678]}
     */
    // Template#: 448, Serial#: 2579
    public void m_invlpg(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_invlpg(placeHolder);
        new m_invlpg_2579(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code invlpg  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code invlpg    L1: 0x12345678[esi * 4]}
     */
    // Template#: 449, Serial#: 2578
    public void m_invlpg(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_invlpg(placeHolder, index, scale);
        new m_invlpg_2578(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jb  }<i>label</i>
     * Example disassembly syntax: {@code jb        L1: +18}
     */
    // Template#: 450, Serial#: 264
    public void jb(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jb(placeHolder);
        new jb_264(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jbe  }<i>label</i>
     * Example disassembly syntax: {@code jbe       L1: +18}
     */
    // Template#: 451, Serial#: 268
    public void jbe(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jbe(placeHolder);
        new jbe_268(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jecxz  }<i>label</i>
     * Example disassembly syntax: {@code jecxz     L1: +18}
     */
    // Template#: 452, Serial#: 1335
    public void jecxz(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jecxz(placeHolder);
        new jecxz_1335(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jl  }<i>label</i>
     * Example disassembly syntax: {@code jl        L1: +18}
     */
    // Template#: 453, Serial#: 1812
    public void jl(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jl(placeHolder);
        new jl_1812(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jle  }<i>label</i>
     * Example disassembly syntax: {@code jle       L1: +18}
     */
    // Template#: 454, Serial#: 1814
    public void jle(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jle(placeHolder);
        new jle_1814(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>label</i>
     * Example disassembly syntax: {@code jmp       L1: +18}
     */
    // Template#: 455, Serial#: 2403
    public void jmp(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jmp(placeHolder);
        new jmp_2403(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>label</i>
     * Example disassembly syntax: {@code jmp       [L1: 0x12345678]}
     */
    // Template#: 456, Serial#: 2402
    public void m_jmp(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_jmp(placeHolder);
        new m_jmp_2402(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jmp  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code jmp       L1: 0x12345678[esi * 4]}
     */
    // Template#: 457, Serial#: 2447
    public void m_jmp(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_jmp(placeHolder, index, scale);
        new m_jmp_2447(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnb  }<i>label</i>
     * Example disassembly syntax: {@code jnb       L1: +18}
     */
    // Template#: 458, Serial#: 265
    public void jnb(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnb(placeHolder);
        new jnb_265(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnbe  }<i>label</i>
     * Example disassembly syntax: {@code jnbe      L1: +18}
     */
    // Template#: 459, Serial#: 269
    public void jnbe(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnbe(placeHolder);
        new jnbe_269(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnl  }<i>label</i>
     * Example disassembly syntax: {@code jnl       L1: +18}
     */
    // Template#: 460, Serial#: 1813
    public void jnl(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnl(placeHolder);
        new jnl_1813(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnle  }<i>label</i>
     * Example disassembly syntax: {@code jnle      L1: +18}
     */
    // Template#: 461, Serial#: 1815
    public void jnle(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnle(placeHolder);
        new jnle_1815(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jno  }<i>label</i>
     * Example disassembly syntax: {@code jno       L1: +18}
     */
    // Template#: 462, Serial#: 263
    public void jno(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jno(placeHolder);
        new jno_263(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnp  }<i>label</i>
     * Example disassembly syntax: {@code jnp       L1: +18}
     */
    // Template#: 463, Serial#: 1811
    public void jnp(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnp(placeHolder);
        new jnp_1811(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jns  }<i>label</i>
     * Example disassembly syntax: {@code jns       L1: +18}
     */
    // Template#: 464, Serial#: 1809
    public void jns(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jns(placeHolder);
        new jns_1809(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jnz  }<i>label</i>
     * Example disassembly syntax: {@code jnz       L1: +18}
     */
    // Template#: 465, Serial#: 267
    public void jnz(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jnz(placeHolder);
        new jnz_267(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jo  }<i>label</i>
     * Example disassembly syntax: {@code jo        L1: +18}
     */
    // Template#: 466, Serial#: 262
    public void jo(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jo(placeHolder);
        new jo_262(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jp  }<i>label</i>
     * Example disassembly syntax: {@code jp        L1: +18}
     */
    // Template#: 467, Serial#: 1810
    public void jp(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jp(placeHolder);
        new jp_1810(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code js  }<i>label</i>
     * Example disassembly syntax: {@code js        L1: +18}
     */
    // Template#: 468, Serial#: 1808
    public void js(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        js(placeHolder);
        new js_1808(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code jz  }<i>label</i>
     * Example disassembly syntax: {@code jz        L1: +18}
     */
    // Template#: 469, Serial#: 266
    public void jz(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        jz(placeHolder);
        new jz_266(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lar       ax, [L1: 0x12345678]}
     */
    // Template#: 470, Serial#: 2623
    public void m_lar(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lar(destination, placeHolder);
        new m_lar_2623(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lar       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 471, Serial#: 2622
    public void m_lar(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lar(destination, placeHolder, index, scale);
        new m_lar_2622(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lar       eax, [L1: 0x12345678]}
     */
    // Template#: 472, Serial#: 2614
    public void m_lar(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lar(destination, placeHolder);
        new m_lar_2614(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lar  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lar       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 473, Serial#: 2613
    public void m_lar(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lar(destination, placeHolder, index, scale);
        new m_lar_2613(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lddqu     xmm0, [L1: 0x12345678]}
     */
    // Template#: 474, Serial#: 4024
    public void m_lddqu(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lddqu(destination, placeHolder);
        new m_lddqu_4024(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lddqu  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lddqu     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 475, Serial#: 4023
    public void m_lddqu(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lddqu(destination, placeHolder, index, scale);
        new m_lddqu_4023(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lds  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lds       ax, [L1: 0x12345678]}
     */
    // Template#: 476, Serial#: 918
    public void m_lds(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lds(destination, placeHolder);
        new m_lds_918(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lds  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lds       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 477, Serial#: 917
    public void m_lds(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lds(destination, placeHolder, index, scale);
        new m_lds_917(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lds  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lds       eax, [L1: 0x12345678]}
     */
    // Template#: 478, Serial#: 910
    public void m_lds(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lds(destination, placeHolder);
        new m_lds_910(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lds  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lds       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 479, Serial#: 909
    public void m_lds(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lds(destination, placeHolder, index, scale);
        new m_lds_909(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lea       ax, [L1: 0x12345678]}
     */
    // Template#: 480, Serial#: 1887
    public void m_lea(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lea(destination, placeHolder);
        new m_lea_1887(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lea       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 481, Serial#: 1886
    public void m_lea(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lea(destination, placeHolder, index, scale);
        new m_lea_1886(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lea       eax, [L1: 0x12345678]}
     */
    // Template#: 482, Serial#: 1879
    public void m_lea(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lea(destination, placeHolder);
        new m_lea_1879(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lea  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lea       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 483, Serial#: 1878
    public void m_lea(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lea(destination, placeHolder, index, scale);
        new m_lea_1878(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code les  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code les       ax, [L1: 0x12345678]}
     */
    // Template#: 484, Serial#: 902
    public void m_les(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_les(destination, placeHolder);
        new m_les_902(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code les  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code les       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 485, Serial#: 901
    public void m_les(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_les(destination, placeHolder, index, scale);
        new m_les_901(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code les  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code les       eax, [L1: 0x12345678]}
     */
    // Template#: 486, Serial#: 894
    public void m_les(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_les(destination, placeHolder);
        new m_les_894(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code les  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code les       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 487, Serial#: 893
    public void m_les(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_les(destination, placeHolder, index, scale);
        new m_les_893(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lfs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lfs       ax, [L1: 0x12345678]}
     */
    // Template#: 488, Serial#: 3538
    public void m_lfs(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lfs(destination, placeHolder);
        new m_lfs_3538(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lfs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lfs       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 489, Serial#: 3537
    public void m_lfs(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lfs(destination, placeHolder, index, scale);
        new m_lfs_3537(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lfs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lfs       eax, [L1: 0x12345678]}
     */
    // Template#: 490, Serial#: 3530
    public void m_lfs(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lfs(destination, placeHolder);
        new m_lfs_3530(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lfs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lfs       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 491, Serial#: 3529
    public void m_lfs(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lfs(destination, placeHolder, index, scale);
        new m_lfs_3529(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>label</i>
     * Example disassembly syntax: {@code lgdt      [L1: 0x12345678]}
     */
    // Template#: 492, Serial#: 2563
    public void m_lgdt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgdt(placeHolder);
        new m_lgdt_2563(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgdt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lgdt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 493, Serial#: 2562
    public void m_lgdt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgdt(placeHolder, index, scale);
        new m_lgdt_2562(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lgs       ax, [L1: 0x12345678]}
     */
    // Template#: 494, Serial#: 3554
    public void m_lgs(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgs(destination, placeHolder);
        new m_lgs_3554(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lgs       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 495, Serial#: 3553
    public void m_lgs(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgs(destination, placeHolder, index, scale);
        new m_lgs_3553(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgs  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lgs       eax, [L1: 0x12345678]}
     */
    // Template#: 496, Serial#: 3546
    public void m_lgs(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgs(destination, placeHolder);
        new m_lgs_3546(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lgs  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lgs       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 497, Serial#: 3545
    public void m_lgs(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lgs(destination, placeHolder, index, scale);
        new m_lgs_3545(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>label</i>
     * Example disassembly syntax: {@code lidt      [L1: 0x12345678]}
     */
    // Template#: 498, Serial#: 2567
    public void m_lidt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lidt(placeHolder);
        new m_lidt_2567(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lidt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lidt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 499, Serial#: 2566
    public void m_lidt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lidt(placeHolder, index, scale);
        new m_lidt_2566(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>label</i>
     * Example disassembly syntax: {@code lldt      [L1: 0x12345678]}
     */
    // Template#: 500, Serial#: 2507
    public void m_lldt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lldt(placeHolder);
        new m_lldt_2507(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lldt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lldt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 501, Serial#: 2506
    public void m_lldt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lldt(placeHolder, index, scale);
        new m_lldt_2506(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>label</i>
     * Example disassembly syntax: {@code lmsw      [L1: 0x12345678]}
     */
    // Template#: 502, Serial#: 2575
    public void m_lmsw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lmsw(placeHolder);
        new m_lmsw_2575(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lmsw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lmsw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 503, Serial#: 2574
    public void m_lmsw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lmsw(placeHolder, index, scale);
        new m_lmsw_2574(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code loop  }<i>label</i>
     * Example disassembly syntax: {@code loop      L1: +18}
     */
    // Template#: 504, Serial#: 1334
    public void loop(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        loop(placeHolder);
        new loop_1334(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code loope  }<i>label</i>
     * Example disassembly syntax: {@code loope     L1: +18}
     */
    // Template#: 505, Serial#: 1333
    public void loope(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        loope(placeHolder);
        new loope_1333(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code loopne  }<i>label</i>
     * Example disassembly syntax: {@code loopne    L1: +18}
     */
    // Template#: 506, Serial#: 1332
    public void loopne(final Label label) {
        final int startPosition = currentPosition();
        final byte placeHolder = 0;
        loopne(placeHolder);
        new loopne_1332(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lsl       ax, [L1: 0x12345678]}
     */
    // Template#: 507, Serial#: 2641
    public void m_lsl(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lsl(destination, placeHolder);
        new m_lsl_2641(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lsl       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 508, Serial#: 2640
    public void m_lsl(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lsl(destination, placeHolder, index, scale);
        new m_lsl_2640(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lsl       eax, [L1: 0x12345678]}
     */
    // Template#: 509, Serial#: 2632
    public void m_lsl(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lsl(destination, placeHolder);
        new m_lsl_2632(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lsl  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lsl       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 510, Serial#: 2631
    public void m_lsl(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lsl(destination, placeHolder, index, scale);
        new m_lsl_2631(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lss       ax, [L1: 0x12345678]}
     */
    // Template#: 511, Serial#: 3504
    public void m_lss(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lss(destination, placeHolder);
        new m_lss_3504(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lss       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 512, Serial#: 3503
    public void m_lss(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lss(destination, placeHolder, index, scale);
        new m_lss_3503(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code lss       eax, [L1: 0x12345678]}
     */
    // Template#: 513, Serial#: 3496
    public void m_lss(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lss(destination, placeHolder);
        new m_lss_3496(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code lss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code lss       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 514, Serial#: 3495
    public void m_lss(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_lss(destination, placeHolder, index, scale);
        new m_lss_3495(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>label</i>
     * Example disassembly syntax: {@code ltr       [L1: 0x12345678]}
     */
    // Template#: 515, Serial#: 2511
    public void m_ltr(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ltr(placeHolder);
        new m_ltr_2511(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ltr  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ltr       L1: 0x12345678[esi * 4]}
     */
    // Template#: 516, Serial#: 2510
    public void m_ltr(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ltr(placeHolder, index, scale);
        new m_ltr_2510(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code maxpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 517, Serial#: 4508
    public void m_maxpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxpd(destination, placeHolder);
        new m_maxpd_4508(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code maxpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 518, Serial#: 4507
    public void m_maxpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxpd(destination, placeHolder, index, scale);
        new m_maxpd_4507(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code maxps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 519, Serial#: 4436
    public void m_maxps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxps(destination, placeHolder);
        new m_maxps_4436(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code maxps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 520, Serial#: 4435
    public void m_maxps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxps(destination, placeHolder, index, scale);
        new m_maxps_4435(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code maxsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 521, Serial#: 4571
    public void m_maxsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxsd(destination, placeHolder);
        new m_maxsd_4571(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code maxsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 522, Serial#: 4570
    public void m_maxsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxsd(destination, placeHolder, index, scale);
        new m_maxsd_4570(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code maxss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 523, Serial#: 4643
    public void m_maxss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxss(destination, placeHolder);
        new m_maxss_4643(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code maxss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code maxss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 524, Serial#: 4642
    public void m_maxss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_maxss(destination, placeHolder, index, scale);
        new m_maxss_4642(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code minpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 525, Serial#: 4490
    public void m_minpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minpd(destination, placeHolder);
        new m_minpd_4490(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code minpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 526, Serial#: 4489
    public void m_minpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minpd(destination, placeHolder, index, scale);
        new m_minpd_4489(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code minps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 527, Serial#: 4418
    public void m_minps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minps(destination, placeHolder);
        new m_minps_4418(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code minps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 528, Serial#: 4417
    public void m_minps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minps(destination, placeHolder, index, scale);
        new m_minps_4417(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code minsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 529, Serial#: 4553
    public void m_minsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minsd(destination, placeHolder);
        new m_minsd_4553(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code minsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 530, Serial#: 4552
    public void m_minsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minsd(destination, placeHolder, index, scale);
        new m_minsd_4552(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code minss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 531, Serial#: 4625
    public void m_minss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minss(destination, placeHolder);
        new m_minss_4625(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code minss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code minss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 532, Serial#: 4624
    public void m_minss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_minss(destination, placeHolder, index, scale);
        new m_minss_4624(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mov       ax, [L1: 0x12345678]}
     */
    // Template#: 533, Serial#: 1862
    public void m_mov(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder);
        new m_mov_1862(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mov       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 534, Serial#: 1861
    public void m_mov(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder, index, scale);
        new m_mov_1861(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mov       eax, [L1: 0x12345678]}
     */
    // Template#: 535, Serial#: 1854
    public void m_mov(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder);
        new m_mov_1854(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mov       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 536, Serial#: 1853
    public void m_mov(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder, index, scale);
        new m_mov_1853(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mov       al, [L1: 0x12345678]}
     */
    // Template#: 537, Serial#: 1846
    public void m_mov(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder);
        new m_mov_1846(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mov       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 538, Serial#: 1845
    public void m_mov(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder, index, scale);
        new m_mov_1845(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mov       es, [L1: 0x12345678]}
     */
    // Template#: 539, Serial#: 1895
    public void m_mov(final SegmentRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder);
        new m_mov_1895(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mov       es, L1: 0x12345678[esi * 4]}
     */
    // Template#: 540, Serial#: 1894
    public void m_mov(final SegmentRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(destination, placeHolder, index, scale);
        new m_mov_1894(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       al, [L1: 0x12345678]}
     */
    // Template#: 541, Serial#: 687
    public void m_mov_AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov_AL(placeHolder);
        new m_mov_AL_687(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       eax, [L1: 0x12345678]}
     */
    // Template#: 542, Serial#: 688
    public void m_mov_EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov_EAX(placeHolder);
        new m_mov_EAX_688(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       ax, [L1: 0x12345678]}
     */
    // Template#: 543, Serial#: 689
    public void m_mov_AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov_AX(placeHolder);
        new m_mov_AX_689(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], al}
     */
    // Template#: 544, Serial#: 690
    public void m_mov___AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov___AL(placeHolder);
        new m_mov___AL_690(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], eax}
     */
    // Template#: 545, Serial#: 691
    public void m_mov___EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov___EAX(placeHolder);
        new m_mov___EAX_691(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], ax}
     */
    // Template#: 546, Serial#: 692
    public void m_mov___AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov___AX(placeHolder);
        new m_mov___AX_692(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code movb      [L1: 0x12345678], 0x12}
     */
    // Template#: 547, Serial#: 926
    public void m_movb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movb(placeHolder, imm8);
        new m_movb_926(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], ax}
     */
    // Template#: 548, Serial#: 1837
    public void m_mov(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, source);
        new m_mov_1837(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], eax}
     */
    // Template#: 549, Serial#: 1828
    public void m_mov(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, source);
        new m_mov_1828(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], al}
     */
    // Template#: 550, Serial#: 1819
    public void m_mov(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, source);
        new m_mov_1819(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code movb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 551, Serial#: 925
    public void m_movb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movb(placeHolder, index, scale, imm8);
        new m_movb_925(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 552, Serial#: 1836
    public void m_mov(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, index, scale, source);
        new m_mov_1836(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 553, Serial#: 1827
    public void m_mov(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, index, scale, source);
        new m_mov_1827(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 554, Serial#: 1818
    public void m_mov(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, index, scale, source);
        new m_mov_1818(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       L1: 0x12345678[esi * 4], es}
     */
    // Template#: 555, Serial#: 1869
    public void m_mov(final Label label, final IA32IndexRegister32 index, final Scale scale, final SegmentRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, index, scale, source);
        new m_mov_1869(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code movl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 556, Serial#: 934
    public void m_movl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movl(placeHolder, index, scale, imm32);
        new m_movl_934(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code movw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 557, Serial#: 943
    public void m_movw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movw(placeHolder, index, scale, imm16);
        new m_movw_943(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mov  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code mov       [L1: 0x12345678], es}
     */
    // Template#: 558, Serial#: 1870
    public void m_mov(final Label label, final SegmentRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mov(placeHolder, source);
        new m_mov_1870(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code movl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 559, Serial#: 935
    public void m_movl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movl(placeHolder, imm32);
        new m_movl_935(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code movw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 560, Serial#: 944
    public void m_movw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movw(placeHolder, imm16);
        new m_movw_944(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movapd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 561, Serial#: 4105
    public void m_movapd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movapd(destination, placeHolder);
        new m_movapd_4105(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movapd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 562, Serial#: 4104
    public void m_movapd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movapd(destination, placeHolder, index, scale);
        new m_movapd_4104(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movapd    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 563, Serial#: 4113
    public void m_movapd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movapd(placeHolder, index, scale, source);
        new m_movapd_4113(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movapd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movapd    [L1: 0x12345678], xmm0}
     */
    // Template#: 564, Serial#: 4114
    public void m_movapd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movapd(placeHolder, source);
        new m_movapd_4114(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movaps    xmm0, [L1: 0x12345678]}
     */
    // Template#: 565, Serial#: 4035
    public void m_movaps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movaps(destination, placeHolder);
        new m_movaps_4035(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movaps    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 566, Serial#: 4034
    public void m_movaps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movaps(destination, placeHolder, index, scale);
        new m_movaps_4034(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movaps    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 567, Serial#: 4043
    public void m_movaps(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movaps(placeHolder, index, scale, source);
        new m_movaps_4043(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movaps  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movaps    [L1: 0x12345678], xmm0}
     */
    // Template#: 568, Serial#: 4044
    public void m_movaps(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movaps(placeHolder, source);
        new m_movaps_4044(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movd      xmm0, [L1: 0x12345678]}
     */
    // Template#: 569, Serial#: 4760
    public void m_movd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(destination, placeHolder);
        new m_movd_4760(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movd      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 570, Serial#: 4759
    public void m_movd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(destination, placeHolder, index, scale);
        new m_movd_4759(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movd      mm0, [L1: 0x12345678]}
     */
    // Template#: 571, Serial#: 4688
    public void m_movd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(destination, placeHolder);
        new m_movd_4688(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movd      mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 572, Serial#: 4687
    public void m_movd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(destination, placeHolder, index, scale);
        new m_movd_4687(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movd      L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 573, Serial#: 4821
    public void m_movd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(placeHolder, index, scale, source);
        new m_movd_4821(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movd      L1: 0x12345678[esi * 4], mm0}
     */
    // Template#: 574, Serial#: 4786
    public void m_movd(final Label label, final IA32IndexRegister32 index, final Scale scale, final MMXRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(placeHolder, index, scale, source);
        new m_movd_4786(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movd      [L1: 0x12345678], xmm0}
     */
    // Template#: 575, Serial#: 4822
    public void m_movd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(placeHolder, source);
        new m_movd_4822(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movd      [L1: 0x12345678], mm0}
     */
    // Template#: 576, Serial#: 4787
    public void m_movd(final Label label, final MMXRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movd(placeHolder, source);
        new m_movd_4787(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movddup   xmm0, [L1: 0x12345678]}
     */
    // Template#: 577, Serial#: 2788
    public void m_movddup(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movddup(destination, placeHolder);
        new m_movddup_2788(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movddup  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movddup   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 578, Serial#: 2787
    public void m_movddup(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movddup(destination, placeHolder, index, scale);
        new m_movddup_2787(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movdqa    xmm0, [L1: 0x12345678]}
     */
    // Template#: 579, Serial#: 4769
    public void m_movdqa(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqa(destination, placeHolder);
        new m_movdqa_4769(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movdqa    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 580, Serial#: 4768
    public void m_movdqa(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqa(destination, placeHolder, index, scale);
        new m_movdqa_4768(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movdqa    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 581, Serial#: 4830
    public void m_movdqa(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqa(placeHolder, index, scale, source);
        new m_movdqa_4830(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqa  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movdqa    [L1: 0x12345678], xmm0}
     */
    // Template#: 582, Serial#: 4831
    public void m_movdqa(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqa(placeHolder, source);
        new m_movdqa_4831(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movdqu    xmm0, [L1: 0x12345678]}
     */
    // Template#: 583, Serial#: 4778
    public void m_movdqu(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqu(destination, placeHolder);
        new m_movdqu_4778(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movdqu    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 584, Serial#: 4777
    public void m_movdqu(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqu(destination, placeHolder, index, scale);
        new m_movdqu_4777(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movdqu    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 585, Serial#: 4864
    public void m_movdqu(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqu(placeHolder, index, scale, source);
        new m_movdqu_4864(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movdqu  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movdqu    [L1: 0x12345678], xmm0}
     */
    // Template#: 586, Serial#: 4865
    public void m_movdqu(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movdqu(placeHolder, source);
        new m_movdqu_4865(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movhpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 587, Serial#: 2755
    public void m_movhpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhpd(destination, placeHolder);
        new m_movhpd_2755(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movhpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 588, Serial#: 2754
    public void m_movhpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhpd(destination, placeHolder, index, scale);
        new m_movhpd_2754(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movhpd    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 589, Serial#: 2762
    public void m_movhpd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhpd(placeHolder, index, scale, source);
        new m_movhpd_2762(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhpd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movhpd    [L1: 0x12345678], xmm0}
     */
    // Template#: 590, Serial#: 2763
    public void m_movhpd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhpd(placeHolder, source);
        new m_movhpd_2763(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movhps    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 591, Serial#: 2695
    public void m_movhps(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhps(placeHolder, index, scale, source);
        new m_movhps_2695(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movhps  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movhps    [L1: 0x12345678], xmm0}
     */
    // Template#: 592, Serial#: 2696
    public void m_movhps(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movhps(placeHolder, source);
        new m_movhps_2696(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movlpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 593, Serial#: 2721
    public void m_movlpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlpd(destination, placeHolder);
        new m_movlpd_2721(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movlpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 594, Serial#: 2720
    public void m_movlpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlpd(destination, placeHolder, index, scale);
        new m_movlpd_2720(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movlpd    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 595, Serial#: 2728
    public void m_movlpd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlpd(placeHolder, index, scale, source);
        new m_movlpd_2728(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlpd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movlpd    [L1: 0x12345678], xmm0}
     */
    // Template#: 596, Serial#: 2729
    public void m_movlpd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlpd(placeHolder, source);
        new m_movlpd_2729(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movlps    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 597, Serial#: 2668
    public void m_movlps(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlps(placeHolder, index, scale, source);
        new m_movlps_2668(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movlps  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movlps    [L1: 0x12345678], xmm0}
     */
    // Template#: 598, Serial#: 2669
    public void m_movlps(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movlps(placeHolder, source);
        new m_movlps_2669(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movnti    [L1: 0x12345678], eax}
     */
    // Template#: 599, Serial#: 3634
    public void m_movnti(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movnti(placeHolder, source);
        new m_movnti_3634(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movnti  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movnti    L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 600, Serial#: 3633
    public void m_movnti(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movnti(placeHolder, index, scale, source);
        new m_movnti_3633(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movntpd   L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 601, Serial#: 4130
    public void m_movntpd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movntpd(placeHolder, index, scale, source);
        new m_movntpd_4130(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntpd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movntpd   [L1: 0x12345678], xmm0}
     */
    // Template#: 602, Serial#: 4131
    public void m_movntpd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movntpd(placeHolder, source);
        new m_movntpd_4131(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movntps   L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 603, Serial#: 4060
    public void m_movntps(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movntps(placeHolder, index, scale, source);
        new m_movntps_4060(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movntps  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movntps   [L1: 0x12345678], xmm0}
     */
    // Template#: 604, Serial#: 4061
    public void m_movntps(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movntps(placeHolder, source);
        new m_movntps_4061(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movq      xmm0, [L1: 0x12345678]}
     */
    // Template#: 605, Serial#: 4857
    public void m_movq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(destination, placeHolder);
        new m_movq_4857(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movq      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 606, Serial#: 4856
    public void m_movq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(destination, placeHolder, index, scale);
        new m_movq_4856(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movq      mm0, [L1: 0x12345678]}
     */
    // Template#: 607, Serial#: 4697
    public void m_movq(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(destination, placeHolder);
        new m_movq_4697(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movq      mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 608, Serial#: 4696
    public void m_movq(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(destination, placeHolder, index, scale);
        new m_movq_4696(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movq      L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 609, Serial#: 3804
    public void m_movq(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(placeHolder, index, scale, source);
        new m_movq_3804(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movq      L1: 0x12345678[esi * 4], mm0}
     */
    // Template#: 610, Serial#: 4795
    public void m_movq(final Label label, final IA32IndexRegister32 index, final Scale scale, final MMXRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(placeHolder, index, scale, source);
        new m_movq_4795(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movq      [L1: 0x12345678], xmm0}
     */
    // Template#: 611, Serial#: 3805
    public void m_movq(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(placeHolder, source);
        new m_movq_3805(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movq  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movq      [L1: 0x12345678], mm0}
     */
    // Template#: 612, Serial#: 4796
    public void m_movq(final Label label, final MMXRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movq(placeHolder, source);
        new m_movq_4796(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 613, Serial#: 2771
    public void m_movsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsd(destination, placeHolder);
        new m_movsd_2771(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 614, Serial#: 2770
    public void m_movsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsd(destination, placeHolder, index, scale);
        new m_movsd_2770(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movsd     L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 615, Serial#: 2779
    public void m_movsd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsd(placeHolder, index, scale, source);
        new m_movsd_2779(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movsd     [L1: 0x12345678], xmm0}
     */
    // Template#: 616, Serial#: 2780
    public void m_movsd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsd(placeHolder, source);
        new m_movsd_2780(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movshdup  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movshdup  xmm0, [L1: 0x12345678]}
     */
    // Template#: 617, Serial#: 2823
    public void m_movshdup(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movshdup(destination, placeHolder);
        new m_movshdup_2823(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movshdup  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movshdup  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 618, Serial#: 2822
    public void m_movshdup(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movshdup(destination, placeHolder, index, scale);
        new m_movshdup_2822(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsldup  xmm0, [L1: 0x12345678]}
     */
    // Template#: 619, Serial#: 2814
    public void m_movsldup(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsldup(destination, placeHolder);
        new m_movsldup_2814(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsldup  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsldup  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 620, Serial#: 2813
    public void m_movsldup(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsldup(destination, placeHolder, index, scale);
        new m_movsldup_2813(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 621, Serial#: 2797
    public void m_movss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movss(destination, placeHolder);
        new m_movss_2797(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 622, Serial#: 2796
    public void m_movss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movss(destination, placeHolder, index, scale);
        new m_movss_2796(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movss     L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 623, Serial#: 2805
    public void m_movss(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movss(placeHolder, index, scale, source);
        new m_movss_2805(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movss  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movss     [L1: 0x12345678], xmm0}
     */
    // Template#: 624, Serial#: 2806
    public void m_movss(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movss(placeHolder, source);
        new m_movss_2806(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsx     ax, [L1: 0x12345678]}
     */
    // Template#: 625, Serial#: 5134
    public void m_movsxb(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxb(destination, placeHolder);
        new m_movsxb_5134(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsx     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 626, Serial#: 5133
    public void m_movsxb(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxb(destination, placeHolder, index, scale);
        new m_movsxb_5133(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsx     eax, [L1: 0x12345678]}
     */
    // Template#: 627, Serial#: 5125
    public void m_movsxb(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxb(destination, placeHolder);
        new m_movsxb_5125(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsx  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsx     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 628, Serial#: 5124
    public void m_movsxb(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxb(destination, placeHolder, index, scale);
        new m_movsxb_5124(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsxw    ax, [L1: 0x12345678]}
     */
    // Template#: 629, Serial#: 5152
    public void m_movsxw(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxw(destination, placeHolder);
        new m_movsxw_5152(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsxw    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 630, Serial#: 5151
    public void m_movsxw(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxw(destination, placeHolder, index, scale);
        new m_movsxw_5151(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movsxw    eax, [L1: 0x12345678]}
     */
    // Template#: 631, Serial#: 5143
    public void m_movsxw(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxw(destination, placeHolder);
        new m_movsxw_5143(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movsxw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movsxw    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 632, Serial#: 5142
    public void m_movsxw(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movsxw(destination, placeHolder, index, scale);
        new m_movsxw_5142(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movupd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 633, Serial#: 2704
    public void m_movupd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movupd(destination, placeHolder);
        new m_movupd_2704(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movupd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 634, Serial#: 2703
    public void m_movupd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movupd(destination, placeHolder, index, scale);
        new m_movupd_2703(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movupd    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 635, Serial#: 2712
    public void m_movupd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movupd(placeHolder, index, scale, source);
        new m_movupd_2712(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movupd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movupd    [L1: 0x12345678], xmm0}
     */
    // Template#: 636, Serial#: 2713
    public void m_movupd(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movupd(placeHolder, source);
        new m_movupd_2713(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movups    xmm0, [L1: 0x12345678]}
     */
    // Template#: 637, Serial#: 2651
    public void m_movups(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movups(destination, placeHolder);
        new m_movups_2651(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movups    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 638, Serial#: 2650
    public void m_movups(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movups(destination, placeHolder, index, scale);
        new m_movups_2650(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code movups    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 639, Serial#: 2659
    public void m_movups(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movups(placeHolder, index, scale, source);
        new m_movups_2659(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movups  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code movups    [L1: 0x12345678], xmm0}
     */
    // Template#: 640, Serial#: 2660
    public void m_movups(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movups(placeHolder, source);
        new m_movups_2660(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movzx     ax, [L1: 0x12345678]}
     */
    // Template#: 641, Serial#: 3571
    public void m_movzxb(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxb(destination, placeHolder);
        new m_movzxb_3571(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movzx     ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 642, Serial#: 3570
    public void m_movzxb(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxb(destination, placeHolder, index, scale);
        new m_movzxb_3570(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movzx     eax, [L1: 0x12345678]}
     */
    // Template#: 643, Serial#: 3562
    public void m_movzxb(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxb(destination, placeHolder);
        new m_movzxb_3562(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzx  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movzx     eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 644, Serial#: 3561
    public void m_movzxb(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxb(destination, placeHolder, index, scale);
        new m_movzxb_3561(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movzxw    ax, [L1: 0x12345678]}
     */
    // Template#: 645, Serial#: 3589
    public void m_movzxw(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxw(destination, placeHolder);
        new m_movzxw_3589(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movzxw    ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 646, Serial#: 3588
    public void m_movzxw(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxw(destination, placeHolder, index, scale);
        new m_movzxw_3588(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code movzxw    eax, [L1: 0x12345678]}
     */
    // Template#: 647, Serial#: 3580
    public void m_movzxw(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxw(destination, placeHolder);
        new m_movzxw_3580(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code movzxw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code movzxw    eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 648, Serial#: 3579
    public void m_movzxw(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_movzxw(destination, placeHolder, index, scale);
        new m_movzxw_3579(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>label</i>
     * Example disassembly syntax: {@code mulb      [L1: 0x12345678], al}
     */
    // Template#: 649, Serial#: 1362
    public void m_mulb___AL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulb___AL(placeHolder);
        new m_mulb___AL_1362(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>label</i>
     * Example disassembly syntax: {@code mull      [L1: 0x12345678], eax}
     */
    // Template#: 650, Serial#: 1425
    public void m_mull___EAX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mull___EAX(placeHolder);
        new m_mull___EAX_1425(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>label</i>
     * Example disassembly syntax: {@code mulw      [L1: 0x12345678], ax}
     */
    // Template#: 651, Serial#: 1488
    public void m_mulw___AX(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulw___AX(placeHolder);
        new m_mulw___AX_1488(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulb      L1: 0x12345678[esi * 4], al}
     */
    // Template#: 652, Serial#: 1361
    public void m_mulb___AL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulb___AL(placeHolder, index, scale);
        new m_mulb___AL_1361(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mull  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mull      L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 653, Serial#: 1424
    public void m_mull___EAX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mull___EAX(placeHolder, index, scale);
        new m_mull___EAX_1424(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulw      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 654, Serial#: 1487
    public void m_mulw___AX(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulw___AX(placeHolder, index, scale);
        new m_mulw___AX_1487(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mulpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 655, Serial#: 4454
    public void m_mulpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulpd(destination, placeHolder);
        new m_mulpd_4454(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 656, Serial#: 4453
    public void m_mulpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulpd(destination, placeHolder, index, scale);
        new m_mulpd_4453(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mulps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 657, Serial#: 4382
    public void m_mulps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulps(destination, placeHolder);
        new m_mulps_4382(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 658, Serial#: 4381
    public void m_mulps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulps(destination, placeHolder, index, scale);
        new m_mulps_4381(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mulsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 659, Serial#: 4526
    public void m_mulsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulsd(destination, placeHolder);
        new m_mulsd_4526(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 660, Serial#: 4525
    public void m_mulsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulsd(destination, placeHolder, index, scale);
        new m_mulsd_4525(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code mulss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 661, Serial#: 4589
    public void m_mulss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulss(destination, placeHolder);
        new m_mulss_4589(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mulss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code mulss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 662, Serial#: 4588
    public void m_mulss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mulss(destination, placeHolder, index, scale);
        new m_mulss_4588(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code mvntdq    L1: 0x12345678[esi * 4], xmm0}
     */
    // Template#: 663, Serial#: 3906
    public void m_mvntdq(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mvntdq(placeHolder, index, scale, source);
        new m_mvntdq_3906(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code mvntdq  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code mvntdq    [L1: 0x12345678], xmm0}
     */
    // Template#: 664, Serial#: 3907
    public void m_mvntdq(final Label label, final IA32XMMRegister source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_mvntdq(placeHolder, source);
        new m_mvntdq_3907(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>label</i>
     * Example disassembly syntax: {@code negb      [L1: 0x12345678]}
     */
    // Template#: 665, Serial#: 1358
    public void m_negb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negb(placeHolder);
        new m_negb_1358(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>label</i>
     * Example disassembly syntax: {@code negl      [L1: 0x12345678]}
     */
    // Template#: 666, Serial#: 1421
    public void m_negl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negl(placeHolder);
        new m_negl_1421(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>label</i>
     * Example disassembly syntax: {@code negw      [L1: 0x12345678]}
     */
    // Template#: 667, Serial#: 1484
    public void m_negw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negw(placeHolder);
        new m_negw_1484(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code negb      L1: 0x12345678[esi * 4]}
     */
    // Template#: 668, Serial#: 1357
    public void m_negb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negb(placeHolder, index, scale);
        new m_negb_1357(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code negl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 669, Serial#: 1420
    public void m_negl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negl(placeHolder, index, scale);
        new m_negl_1420(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code negw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code negw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 670, Serial#: 1483
    public void m_negw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_negw(placeHolder, index, scale);
        new m_negw_1483(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>label</i>
     * Example disassembly syntax: {@code notb      [L1: 0x12345678]}
     */
    // Template#: 671, Serial#: 1354
    public void m_notb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notb(placeHolder);
        new m_notb_1354(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>label</i>
     * Example disassembly syntax: {@code notl      [L1: 0x12345678]}
     */
    // Template#: 672, Serial#: 1417
    public void m_notl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notl(placeHolder);
        new m_notl_1417(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>label</i>
     * Example disassembly syntax: {@code notw      [L1: 0x12345678]}
     */
    // Template#: 673, Serial#: 1480
    public void m_notw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notw(placeHolder);
        new m_notw_1480(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code notb      L1: 0x12345678[esi * 4]}
     */
    // Template#: 674, Serial#: 1353
    public void m_notb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notb(placeHolder, index, scale);
        new m_notb_1353(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code notl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 675, Serial#: 1416
    public void m_notl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notl(placeHolder, index, scale);
        new m_notl_1416(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code notw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code notw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 676, Serial#: 1479
    public void m_notw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_notw(placeHolder, index, scale);
        new m_notw_1479(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code or        ax, [L1: 0x12345678]}
     */
    // Template#: 677, Serial#: 1582
    public void m_or(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder);
        new m_or_1582(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code or        ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 678, Serial#: 1581
    public void m_or(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder, index, scale);
        new m_or_1581(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code or        eax, [L1: 0x12345678]}
     */
    // Template#: 679, Serial#: 1574
    public void m_or(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder);
        new m_or_1574(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code or        eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 680, Serial#: 1573
    public void m_or(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder, index, scale);
        new m_or_1573(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code or        al, [L1: 0x12345678]}
     */
    // Template#: 681, Serial#: 1566
    public void m_or(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder);
        new m_or_1566(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code or        al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 682, Serial#: 1565
    public void m_or(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(destination, placeHolder, index, scale);
        new m_or_1565(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orb       [L1: 0x12345678], 0x12}
     */
    // Template#: 683, Serial#: 277
    public void m_orb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orb(placeHolder, imm8);
        new m_orb_277(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orl       [L1: 0x12345678], 0x12}
     */
    // Template#: 684, Serial#: 493
    public void m_orl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orl(placeHolder, imm8);
        new m_orl_493(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orw       [L1: 0x12345678], 0x12}
     */
    // Template#: 685, Serial#: 565
    public void m_orw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orw(placeHolder, imm8);
        new m_orw_565(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code or        [L1: 0x12345678], ax}
     */
    // Template#: 686, Serial#: 1557
    public void m_or(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, source);
        new m_or_1557(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code or        [L1: 0x12345678], eax}
     */
    // Template#: 687, Serial#: 1548
    public void m_or(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, source);
        new m_or_1548(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code or        [L1: 0x12345678], al}
     */
    // Template#: 688, Serial#: 1539
    public void m_or(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, source);
        new m_or_1539(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orb       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 689, Serial#: 276
    public void m_orb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orb(placeHolder, index, scale, imm8);
        new m_orb_276(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orl       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 690, Serial#: 492
    public void m_orl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orl(placeHolder, index, scale, imm8);
        new m_orl_492(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code orw       L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 691, Serial#: 564
    public void m_orw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orw(placeHolder, index, scale, imm8);
        new m_orw_564(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code or        L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 692, Serial#: 1556
    public void m_or(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, index, scale, source);
        new m_or_1556(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code or        L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 693, Serial#: 1547
    public void m_or(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, index, scale, source);
        new m_or_1547(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code or  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code or        L1: 0x12345678[esi * 4], al}
     */
    // Template#: 694, Serial#: 1538
    public void m_or(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_or(placeHolder, index, scale, source);
        new m_or_1538(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code orl       L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 695, Serial#: 348
    public void m_orl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orl(placeHolder, index, scale, imm32);
        new m_orl_348(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code orw       L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 696, Serial#: 420
    public void m_orw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orw(placeHolder, index, scale, imm16);
        new m_orw_420(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code orl       [L1: 0x12345678], 0x12345678}
     */
    // Template#: 697, Serial#: 349
    public void m_orl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orl(placeHolder, imm32);
        new m_orl_349(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code orw       [L1: 0x12345678], 0x1234}
     */
    // Template#: 698, Serial#: 421
    public void m_orw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orw(placeHolder, imm16);
        new m_orw_421(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code orpd      xmm0, [L1: 0x12345678]}
     */
    // Template#: 699, Serial#: 3076
    public void m_orpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orpd(destination, placeHolder);
        new m_orpd_3076(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code orpd      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 700, Serial#: 3075
    public void m_orpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orpd(destination, placeHolder, index, scale);
        new m_orpd_3075(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code orps      xmm0, [L1: 0x12345678]}
     */
    // Template#: 701, Serial#: 3030
    public void m_orps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orps(destination, placeHolder);
        new m_orps_3030(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code orps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code orps      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 702, Serial#: 3029
    public void m_orps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_orps(destination, placeHolder, index, scale);
        new m_orps_3029(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packssdw  xmm0, [L1: 0x12345678]}
     */
    // Template#: 703, Serial#: 4733
    public void m_packssdw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packssdw(destination, placeHolder);
        new m_packssdw_4733(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packssdw  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 704, Serial#: 4732
    public void m_packssdw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packssdw(destination, placeHolder, index, scale);
        new m_packssdw_4732(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packssdw  mm0, [L1: 0x12345678]}
     */
    // Template#: 705, Serial#: 4679
    public void m_packssdw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packssdw(destination, placeHolder);
        new m_packssdw_4679(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packssdw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packssdw  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 706, Serial#: 4678
    public void m_packssdw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packssdw(destination, placeHolder, index, scale);
        new m_packssdw_4678(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packsswb  xmm0, [L1: 0x12345678]}
     */
    // Template#: 707, Serial#: 3274
    public void m_packsswb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packsswb(destination, placeHolder);
        new m_packsswb_3274(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packsswb  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 708, Serial#: 3273
    public void m_packsswb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packsswb(destination, placeHolder, index, scale);
        new m_packsswb_3273(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packsswb  mm0, [L1: 0x12345678]}
     */
    // Template#: 709, Serial#: 3157
    public void m_packsswb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packsswb(destination, placeHolder);
        new m_packsswb_3157(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packsswb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packsswb  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 710, Serial#: 3156
    public void m_packsswb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packsswb(destination, placeHolder, index, scale);
        new m_packsswb_3156(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packuswb  xmm0, [L1: 0x12345678]}
     */
    // Template#: 711, Serial#: 3310
    public void m_packuswb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packuswb(destination, placeHolder);
        new m_packuswb_3310(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packuswb  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 712, Serial#: 3309
    public void m_packuswb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packuswb(destination, placeHolder, index, scale);
        new m_packuswb_3309(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code packuswb  mm0, [L1: 0x12345678]}
     */
    // Template#: 713, Serial#: 3193
    public void m_packuswb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packuswb(destination, placeHolder);
        new m_packuswb_3193(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code packuswb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code packuswb  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 714, Serial#: 3192
    public void m_packuswb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_packuswb(destination, placeHolder, index, scale);
        new m_packuswb_3192(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddb     xmm0, [L1: 0x12345678]}
     */
    // Template#: 715, Serial#: 5504
    public void m_paddb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddb(destination, placeHolder);
        new m_paddb_5504(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddb     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 716, Serial#: 5503
    public void m_paddb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddb(destination, placeHolder, index, scale);
        new m_paddb_5503(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddb     mm0, [L1: 0x12345678]}
     */
    // Template#: 717, Serial#: 5441
    public void m_paddb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddb(destination, placeHolder);
        new m_paddb_5441(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddb     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 718, Serial#: 5440
    public void m_paddb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddb(destination, placeHolder, index, scale);
        new m_paddb_5440(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 719, Serial#: 5522
    public void m_paddd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddd(destination, placeHolder);
        new m_paddd_5522(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 720, Serial#: 5521
    public void m_paddd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddd(destination, placeHolder, index, scale);
        new m_paddd_5521(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddd     mm0, [L1: 0x12345678]}
     */
    // Template#: 721, Serial#: 5459
    public void m_paddd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddd(destination, placeHolder);
        new m_paddd_5459(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddd     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 722, Serial#: 5458
    public void m_paddd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddd(destination, placeHolder, index, scale);
        new m_paddd_5458(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddq     xmm0, [L1: 0x12345678]}
     */
    // Template#: 723, Serial#: 3787
    public void m_paddq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddq(destination, placeHolder);
        new m_paddq_3787(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddq     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 724, Serial#: 3786
    public void m_paddq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddq(destination, placeHolder, index, scale);
        new m_paddq_3786(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddsb    xmm0, [L1: 0x12345678]}
     */
    // Template#: 725, Serial#: 5378
    public void m_paddsb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsb(destination, placeHolder);
        new m_paddsb_5378(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddsb    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 726, Serial#: 5377
    public void m_paddsb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsb(destination, placeHolder, index, scale);
        new m_paddsb_5377(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddsb    mm0, [L1: 0x12345678]}
     */
    // Template#: 727, Serial#: 5315
    public void m_paddsb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsb(destination, placeHolder);
        new m_paddsb_5315(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddsb    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 728, Serial#: 5314
    public void m_paddsb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsb(destination, placeHolder, index, scale);
        new m_paddsb_5314(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddsw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 729, Serial#: 5387
    public void m_paddsw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsw(destination, placeHolder);
        new m_paddsw_5387(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddsw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 730, Serial#: 5386
    public void m_paddsw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsw(destination, placeHolder, index, scale);
        new m_paddsw_5386(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddsw    mm0, [L1: 0x12345678]}
     */
    // Template#: 731, Serial#: 5324
    public void m_paddsw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsw(destination, placeHolder);
        new m_paddsw_5324(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddsw    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 732, Serial#: 5323
    public void m_paddsw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddsw(destination, placeHolder, index, scale);
        new m_paddsw_5323(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddusb   xmm0, [L1: 0x12345678]}
     */
    // Template#: 733, Serial#: 5252
    public void m_paddusb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusb(destination, placeHolder);
        new m_paddusb_5252(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddusb   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 734, Serial#: 5251
    public void m_paddusb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusb(destination, placeHolder, index, scale);
        new m_paddusb_5251(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddusb   mm0, [L1: 0x12345678]}
     */
    // Template#: 735, Serial#: 5189
    public void m_paddusb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusb(destination, placeHolder);
        new m_paddusb_5189(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddusb   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 736, Serial#: 5188
    public void m_paddusb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusb(destination, placeHolder, index, scale);
        new m_paddusb_5188(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddusw   xmm0, [L1: 0x12345678]}
     */
    // Template#: 737, Serial#: 5261
    public void m_paddusw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusw(destination, placeHolder);
        new m_paddusw_5261(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddusw   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 738, Serial#: 5260
    public void m_paddusw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusw(destination, placeHolder, index, scale);
        new m_paddusw_5260(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddusw   mm0, [L1: 0x12345678]}
     */
    // Template#: 739, Serial#: 5198
    public void m_paddusw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusw(destination, placeHolder);
        new m_paddusw_5198(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddusw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddusw   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 740, Serial#: 5197
    public void m_paddusw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddusw(destination, placeHolder, index, scale);
        new m_paddusw_5197(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 741, Serial#: 5513
    public void m_paddw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddw(destination, placeHolder);
        new m_paddw_5513(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 742, Serial#: 5512
    public void m_paddw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddw(destination, placeHolder, index, scale);
        new m_paddw_5512(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code paddw     mm0, [L1: 0x12345678]}
     */
    // Template#: 743, Serial#: 5450
    public void m_paddw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddw(destination, placeHolder);
        new m_paddw_5450(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code paddw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code paddw     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 744, Serial#: 5449
    public void m_paddw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_paddw(destination, placeHolder, index, scale);
        new m_paddw_5449(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pand      xmm0, [L1: 0x12345678]}
     */
    // Template#: 745, Serial#: 5243
    public void m_pand(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pand(destination, placeHolder);
        new m_pand_5243(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pand      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 746, Serial#: 5242
    public void m_pand(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pand(destination, placeHolder, index, scale);
        new m_pand_5242(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pand      mm0, [L1: 0x12345678]}
     */
    // Template#: 747, Serial#: 5180
    public void m_pand(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pand(destination, placeHolder);
        new m_pand_5180(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pand  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pand      mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 748, Serial#: 5179
    public void m_pand(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pand(destination, placeHolder, index, scale);
        new m_pand_5179(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pandn     xmm0, [L1: 0x12345678]}
     */
    // Template#: 749, Serial#: 5279
    public void m_pandn(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pandn(destination, placeHolder);
        new m_pandn_5279(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pandn     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 750, Serial#: 5278
    public void m_pandn(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pandn(destination, placeHolder, index, scale);
        new m_pandn_5278(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pandn     mm0, [L1: 0x12345678]}
     */
    // Template#: 751, Serial#: 5207
    public void m_pandn(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pandn(destination, placeHolder);
        new m_pandn_5207(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pandn  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pandn     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 752, Serial#: 5206
    public void m_pandn(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pandn(destination, placeHolder, index, scale);
        new m_pandn_5206(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pavgb     xmm0, [L1: 0x12345678]}
     */
    // Template#: 753, Serial#: 3844
    public void m_pavgb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pavgb(destination, placeHolder);
        new m_pavgb_3844(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pavgb     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 754, Serial#: 3843
    public void m_pavgb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pavgb(destination, placeHolder, index, scale);
        new m_pavgb_3843(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pavgw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 755, Serial#: 3871
    public void m_pavgw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pavgw(destination, placeHolder);
        new m_pavgw_3871(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pavgw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pavgw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 756, Serial#: 3870
    public void m_pavgw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pavgw(destination, placeHolder, index, scale);
        new m_pavgw_3870(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpeqb   mm0, [L1: 0x12345678]}
     */
    // Template#: 757, Serial#: 3219
    public void m_pcmpeqb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqb(destination, placeHolder);
        new m_pcmpeqb_3219(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpeqb   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 758, Serial#: 3218
    public void m_pcmpeqb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqb(destination, placeHolder, index, scale);
        new m_pcmpeqb_3218(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpeqd   xmm0, [L1: 0x12345678]}
     */
    // Template#: 759, Serial#: 3323
    public void m_pcmpeqd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqd(destination, placeHolder);
        new m_pcmpeqd_3323(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpeqd   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 760, Serial#: 3322
    public void m_pcmpeqd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqd(destination, placeHolder, index, scale);
        new m_pcmpeqd_3322(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpeqd   mm0, [L1: 0x12345678]}
     */
    // Template#: 761, Serial#: 3237
    public void m_pcmpeqd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqd(destination, placeHolder);
        new m_pcmpeqd_3237(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpeqd   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 762, Serial#: 3236
    public void m_pcmpeqd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqd(destination, placeHolder, index, scale);
        new m_pcmpeqd_3236(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpeqw   mm0, [L1: 0x12345678]}
     */
    // Template#: 763, Serial#: 3228
    public void m_pcmpeqw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqw(destination, placeHolder);
        new m_pcmpeqw_3228(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpeqw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpeqw   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 764, Serial#: 3227
    public void m_pcmpeqw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpeqw(destination, placeHolder, index, scale);
        new m_pcmpeqw_3227(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtb   xmm0, [L1: 0x12345678]}
     */
    // Template#: 765, Serial#: 3283
    public void m_pcmpgtb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtb(destination, placeHolder);
        new m_pcmpgtb_3283(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtb   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 766, Serial#: 3282
    public void m_pcmpgtb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtb(destination, placeHolder, index, scale);
        new m_pcmpgtb_3282(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtb   mm0, [L1: 0x12345678]}
     */
    // Template#: 767, Serial#: 3166
    public void m_pcmpgtb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtb(destination, placeHolder);
        new m_pcmpgtb_3166(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtb   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 768, Serial#: 3165
    public void m_pcmpgtb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtb(destination, placeHolder, index, scale);
        new m_pcmpgtb_3165(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtd   xmm0, [L1: 0x12345678]}
     */
    // Template#: 769, Serial#: 3301
    public void m_pcmpgtd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtd(destination, placeHolder);
        new m_pcmpgtd_3301(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtd   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 770, Serial#: 3300
    public void m_pcmpgtd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtd(destination, placeHolder, index, scale);
        new m_pcmpgtd_3300(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtd   mm0, [L1: 0x12345678]}
     */
    // Template#: 771, Serial#: 3184
    public void m_pcmpgtd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtd(destination, placeHolder);
        new m_pcmpgtd_3184(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtd   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 772, Serial#: 3183
    public void m_pcmpgtd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtd(destination, placeHolder, index, scale);
        new m_pcmpgtd_3183(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtw   xmm0, [L1: 0x12345678]}
     */
    // Template#: 773, Serial#: 3292
    public void m_pcmpgtw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtw(destination, placeHolder);
        new m_pcmpgtw_3292(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtw   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 774, Serial#: 3291
    public void m_pcmpgtw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtw(destination, placeHolder, index, scale);
        new m_pcmpgtw_3291(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pcmpgtw   mm0, [L1: 0x12345678]}
     */
    // Template#: 775, Serial#: 3175
    public void m_pcmpgtw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtw(destination, placeHolder);
        new m_pcmpgtw_3175(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pcmpgtw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pcmpgtw   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 776, Serial#: 3174
    public void m_pcmpgtw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pcmpgtw(destination, placeHolder, index, scale);
        new m_pcmpgtw_3174(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pinsrw    xmm0, [L1: 0x12345678], 0x12}
     */
    // Template#: 777, Serial#: 3678
    public void m_pinsrw(final IA32XMMRegister destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pinsrw(destination, placeHolder, imm8);
        new m_pinsrw_3678(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pinsrw    xmm0, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 778, Serial#: 3677
    public void m_pinsrw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pinsrw(destination, placeHolder, index, scale, imm8);
        new m_pinsrw_3677(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pinsrw    mm0, [L1: 0x12345678], 0x12}
     */
    // Template#: 779, Serial#: 3642
    public void m_pinsrw(final MMXRegister destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pinsrw(destination, placeHolder, imm8);
        new m_pinsrw_3642(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pinsrw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pinsrw    mm0, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 780, Serial#: 3641
    public void m_pinsrw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pinsrw(destination, placeHolder, index, scale, imm8);
        new m_pinsrw_3641(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmaddwd   xmm0, [L1: 0x12345678]}
     */
    // Template#: 781, Serial#: 4005
    public void m_pmaddwd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaddwd(destination, placeHolder);
        new m_pmaddwd_4005(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmaddwd   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 782, Serial#: 4004
    public void m_pmaddwd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaddwd(destination, placeHolder, index, scale);
        new m_pmaddwd_4004(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmaddwd   mm0, [L1: 0x12345678]}
     */
    // Template#: 783, Serial#: 3960
    public void m_pmaddwd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaddwd(destination, placeHolder);
        new m_pmaddwd_3960(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaddwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmaddwd   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 784, Serial#: 3959
    public void m_pmaddwd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaddwd(destination, placeHolder, index, scale);
        new m_pmaddwd_3959(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmaxsw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 785, Serial#: 5396
    public void m_pmaxsw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaxsw(destination, placeHolder);
        new m_pmaxsw_5396(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmaxsw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 786, Serial#: 5395
    public void m_pmaxsw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaxsw(destination, placeHolder, index, scale);
        new m_pmaxsw_5395(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmaxub    xmm0, [L1: 0x12345678]}
     */
    // Template#: 787, Serial#: 5270
    public void m_pmaxub(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaxub(destination, placeHolder);
        new m_pmaxub_5270(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmaxub  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmaxub    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 788, Serial#: 5269
    public void m_pmaxub(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmaxub(destination, placeHolder, index, scale);
        new m_pmaxub_5269(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pminsw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 789, Serial#: 5360
    public void m_pminsw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pminsw(destination, placeHolder);
        new m_pminsw_5360(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pminsw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 790, Serial#: 5359
    public void m_pminsw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pminsw(destination, placeHolder, index, scale);
        new m_pminsw_5359(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pminub    xmm0, [L1: 0x12345678]}
     */
    // Template#: 791, Serial#: 5234
    public void m_pminub(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pminub(destination, placeHolder);
        new m_pminub_5234(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pminub  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pminub    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 792, Serial#: 5233
    public void m_pminub(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pminub(destination, placeHolder, index, scale);
        new m_pminub_5233(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmulhuw   xmm0, [L1: 0x12345678]}
     */
    // Template#: 793, Serial#: 3880
    public void m_pmulhuw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhuw(destination, placeHolder);
        new m_pmulhuw_3880(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhuw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmulhuw   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 794, Serial#: 3879
    public void m_pmulhuw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhuw(destination, placeHolder, index, scale);
        new m_pmulhuw_3879(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmulhw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 795, Serial#: 3889
    public void m_pmulhw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhw(destination, placeHolder);
        new m_pmulhw_3889(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmulhw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 796, Serial#: 3888
    public void m_pmulhw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhw(destination, placeHolder, index, scale);
        new m_pmulhw_3888(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmulhw    mm0, [L1: 0x12345678]}
     */
    // Template#: 797, Serial#: 3835
    public void m_pmulhw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhw(destination, placeHolder);
        new m_pmulhw_3835(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmulhw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmulhw    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 798, Serial#: 3834
    public void m_pmulhw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmulhw(destination, placeHolder, index, scale);
        new m_pmulhw_3834(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmullw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 799, Serial#: 3796
    public void m_pmullw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmullw(destination, placeHolder);
        new m_pmullw_3796(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmullw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 800, Serial#: 3795
    public void m_pmullw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmullw(destination, placeHolder, index, scale);
        new m_pmullw_3795(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmullw    mm0, [L1: 0x12345678]}
     */
    // Template#: 801, Serial#: 3742
    public void m_pmullw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmullw(destination, placeHolder);
        new m_pmullw_3742(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmullw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmullw    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 802, Serial#: 3741
    public void m_pmullw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmullw(destination, placeHolder, index, scale);
        new m_pmullw_3741(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pmuludq   xmm0, [L1: 0x12345678]}
     */
    // Template#: 803, Serial#: 3996
    public void m_pmuludq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmuludq(destination, placeHolder);
        new m_pmuludq_3996(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pmuludq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pmuludq   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 804, Serial#: 3995
    public void m_pmuludq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pmuludq(destination, placeHolder, index, scale);
        new m_pmuludq_3995(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>label</i>
     * Example disassembly syntax: {@code pop       [L1: 0x12345678]}
     */
    // Template#: 805, Serial#: 1904
    public void m_pop(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pop(placeHolder);
        new m_pop_1904(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pop  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pop       L1: 0x12345678[esi * 4]}
     */
    // Template#: 806, Serial#: 1903
    public void m_pop(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pop(placeHolder, index, scale);
        new m_pop_1903(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code por       xmm0, [L1: 0x12345678]}
     */
    // Template#: 807, Serial#: 5369
    public void m_por(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_por(destination, placeHolder);
        new m_por_5369(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code por       xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 808, Serial#: 5368
    public void m_por(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_por(destination, placeHolder, index, scale);
        new m_por_5368(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code por       mm0, [L1: 0x12345678]}
     */
    // Template#: 809, Serial#: 5306
    public void m_por(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_por(destination, placeHolder);
        new m_por_5306(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code por  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code por       mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 810, Serial#: 5305
    public void m_por(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_por(destination, placeHolder, index, scale);
        new m_por_5305(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psadbw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 811, Serial#: 4014
    public void m_psadbw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psadbw(destination, placeHolder);
        new m_psadbw_4014(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psadbw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psadbw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 812, Serial#: 4013
    public void m_psadbw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psadbw(destination, placeHolder, index, scale);
        new m_psadbw_4013(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pshufw    mm0, [L1: 0x12345678], 0x12}
     */
    // Template#: 813, Serial#: 3202
    public void m_pshufw(final MMXRegister destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pshufw(destination, placeHolder, imm8);
        new m_pshufw_3202(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pshufw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code pshufw    mm0, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 814, Serial#: 3201
    public void m_pshufw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pshufw(destination, placeHolder, index, scale, imm8);
        new m_pshufw_3201(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pslld     xmm0, [L1: 0x12345678]}
     */
    // Template#: 815, Serial#: 3978
    public void m_pslld(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pslld(destination, placeHolder);
        new m_pslld_3978(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pslld     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 816, Serial#: 3977
    public void m_pslld(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pslld(destination, placeHolder, index, scale);
        new m_pslld_3977(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pslld     mm0, [L1: 0x12345678]}
     */
    // Template#: 817, Serial#: 3942
    public void m_pslld(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pslld(destination, placeHolder);
        new m_pslld_3942(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pslld  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pslld     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 818, Serial#: 3941
    public void m_pslld(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pslld(destination, placeHolder, index, scale);
        new m_pslld_3941(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psllq     xmm0, [L1: 0x12345678]}
     */
    // Template#: 819, Serial#: 3987
    public void m_psllq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllq(destination, placeHolder);
        new m_psllq_3987(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psllq     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 820, Serial#: 3986
    public void m_psllq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllq(destination, placeHolder, index, scale);
        new m_psllq_3986(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psllq     mm0, [L1: 0x12345678]}
     */
    // Template#: 821, Serial#: 3951
    public void m_psllq(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllq(destination, placeHolder);
        new m_psllq_3951(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psllq     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 822, Serial#: 3950
    public void m_psllq(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllq(destination, placeHolder, index, scale);
        new m_psllq_3950(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psllw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 823, Serial#: 3969
    public void m_psllw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllw(destination, placeHolder);
        new m_psllw_3969(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psllw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 824, Serial#: 3968
    public void m_psllw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllw(destination, placeHolder, index, scale);
        new m_psllw_3968(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psllw     mm0, [L1: 0x12345678]}
     */
    // Template#: 825, Serial#: 3933
    public void m_psllw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllw(destination, placeHolder);
        new m_psllw_3933(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psllw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psllw     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 826, Serial#: 3932
    public void m_psllw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psllw(destination, placeHolder, index, scale);
        new m_psllw_3932(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrad     xmm0, [L1: 0x12345678]}
     */
    // Template#: 827, Serial#: 3862
    public void m_psrad(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrad(destination, placeHolder);
        new m_psrad_3862(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrad     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 828, Serial#: 3861
    public void m_psrad(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrad(destination, placeHolder, index, scale);
        new m_psrad_3861(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrad     mm0, [L1: 0x12345678]}
     */
    // Template#: 829, Serial#: 3826
    public void m_psrad(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrad(destination, placeHolder);
        new m_psrad_3826(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrad  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrad     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 830, Serial#: 3825
    public void m_psrad(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrad(destination, placeHolder, index, scale);
        new m_psrad_3825(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psraw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 831, Serial#: 3853
    public void m_psraw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psraw(destination, placeHolder);
        new m_psraw_3853(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psraw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 832, Serial#: 3852
    public void m_psraw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psraw(destination, placeHolder, index, scale);
        new m_psraw_3852(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psraw     mm0, [L1: 0x12345678]}
     */
    // Template#: 833, Serial#: 3817
    public void m_psraw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psraw(destination, placeHolder);
        new m_psraw_3817(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psraw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psraw     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 834, Serial#: 3816
    public void m_psraw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psraw(destination, placeHolder, index, scale);
        new m_psraw_3816(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrld     xmm0, [L1: 0x12345678]}
     */
    // Template#: 835, Serial#: 3769
    public void m_psrld(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrld(destination, placeHolder);
        new m_psrld_3769(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrld     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 836, Serial#: 3768
    public void m_psrld(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrld(destination, placeHolder, index, scale);
        new m_psrld_3768(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrld     mm0, [L1: 0x12345678]}
     */
    // Template#: 837, Serial#: 3724
    public void m_psrld(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrld(destination, placeHolder);
        new m_psrld_3724(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrld  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrld     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 838, Serial#: 3723
    public void m_psrld(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrld(destination, placeHolder, index, scale);
        new m_psrld_3723(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrlq     xmm0, [L1: 0x12345678]}
     */
    // Template#: 839, Serial#: 3778
    public void m_psrlq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlq(destination, placeHolder);
        new m_psrlq_3778(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrlq     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 840, Serial#: 3777
    public void m_psrlq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlq(destination, placeHolder, index, scale);
        new m_psrlq_3777(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrlq     mm0, [L1: 0x12345678]}
     */
    // Template#: 841, Serial#: 3733
    public void m_psrlq(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlq(destination, placeHolder);
        new m_psrlq_3733(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrlq     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 842, Serial#: 3732
    public void m_psrlq(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlq(destination, placeHolder, index, scale);
        new m_psrlq_3732(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrlw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 843, Serial#: 3760
    public void m_psrlw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlw(destination, placeHolder);
        new m_psrlw_3760(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrlw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 844, Serial#: 3759
    public void m_psrlw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlw(destination, placeHolder, index, scale);
        new m_psrlw_3759(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psrlw     mm0, [L1: 0x12345678]}
     */
    // Template#: 845, Serial#: 3715
    public void m_psrlw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlw(destination, placeHolder);
        new m_psrlw_3715(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psrlw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psrlw     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 846, Serial#: 3714
    public void m_psrlw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psrlw(destination, placeHolder, index, scale);
        new m_psrlw_3714(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubb     xmm0, [L1: 0x12345678]}
     */
    // Template#: 847, Serial#: 5468
    public void m_psubb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubb(destination, placeHolder);
        new m_psubb_5468(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubb     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 848, Serial#: 5467
    public void m_psubb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubb(destination, placeHolder, index, scale);
        new m_psubb_5467(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubb     mm0, [L1: 0x12345678]}
     */
    // Template#: 849, Serial#: 5414
    public void m_psubb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubb(destination, placeHolder);
        new m_psubb_5414(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubb     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 850, Serial#: 5413
    public void m_psubb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubb(destination, placeHolder, index, scale);
        new m_psubb_5413(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 851, Serial#: 5486
    public void m_psubd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubd(destination, placeHolder);
        new m_psubd_5486(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 852, Serial#: 5485
    public void m_psubd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubd(destination, placeHolder, index, scale);
        new m_psubd_5485(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubd     mm0, [L1: 0x12345678]}
     */
    // Template#: 853, Serial#: 5432
    public void m_psubd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubd(destination, placeHolder);
        new m_psubd_5432(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubd     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 854, Serial#: 5431
    public void m_psubd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubd(destination, placeHolder, index, scale);
        new m_psubd_5431(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubq     xmm0, [L1: 0x12345678]}
     */
    // Template#: 855, Serial#: 5495
    public void m_psubq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubq(destination, placeHolder);
        new m_psubq_5495(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubq     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 856, Serial#: 5494
    public void m_psubq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubq(destination, placeHolder, index, scale);
        new m_psubq_5494(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubsb    xmm0, [L1: 0x12345678]}
     */
    // Template#: 857, Serial#: 5342
    public void m_psubsb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsb(destination, placeHolder);
        new m_psubsb_5342(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubsb    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 858, Serial#: 5341
    public void m_psubsb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsb(destination, placeHolder, index, scale);
        new m_psubsb_5341(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubsb    mm0, [L1: 0x12345678]}
     */
    // Template#: 859, Serial#: 5288
    public void m_psubsb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsb(destination, placeHolder);
        new m_psubsb_5288(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubsb    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 860, Serial#: 5287
    public void m_psubsb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsb(destination, placeHolder, index, scale);
        new m_psubsb_5287(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubsw    xmm0, [L1: 0x12345678]}
     */
    // Template#: 861, Serial#: 5351
    public void m_psubsw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsw(destination, placeHolder);
        new m_psubsw_5351(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubsw    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 862, Serial#: 5350
    public void m_psubsw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsw(destination, placeHolder, index, scale);
        new m_psubsw_5350(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubsw    mm0, [L1: 0x12345678]}
     */
    // Template#: 863, Serial#: 5297
    public void m_psubsw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsw(destination, placeHolder);
        new m_psubsw_5297(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubsw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubsw    mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 864, Serial#: 5296
    public void m_psubsw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubsw(destination, placeHolder, index, scale);
        new m_psubsw_5296(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubusb   xmm0, [L1: 0x12345678]}
     */
    // Template#: 865, Serial#: 5216
    public void m_psubusb(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusb(destination, placeHolder);
        new m_psubusb_5216(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubusb   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 866, Serial#: 5215
    public void m_psubusb(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusb(destination, placeHolder, index, scale);
        new m_psubusb_5215(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubusb   mm0, [L1: 0x12345678]}
     */
    // Template#: 867, Serial#: 5162
    public void m_psubusb(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusb(destination, placeHolder);
        new m_psubusb_5162(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubusb   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 868, Serial#: 5161
    public void m_psubusb(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusb(destination, placeHolder, index, scale);
        new m_psubusb_5161(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubusw   xmm0, [L1: 0x12345678]}
     */
    // Template#: 869, Serial#: 5225
    public void m_psubusw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusw(destination, placeHolder);
        new m_psubusw_5225(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubusw   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 870, Serial#: 5224
    public void m_psubusw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusw(destination, placeHolder, index, scale);
        new m_psubusw_5224(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubusw   mm0, [L1: 0x12345678]}
     */
    // Template#: 871, Serial#: 5171
    public void m_psubusw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusw(destination, placeHolder);
        new m_psubusw_5171(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubusw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubusw   mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 872, Serial#: 5170
    public void m_psubusw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubusw(destination, placeHolder, index, scale);
        new m_psubusw_5170(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubw     xmm0, [L1: 0x12345678]}
     */
    // Template#: 873, Serial#: 5477
    public void m_psubw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubw(destination, placeHolder);
        new m_psubw_5477(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubw     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 874, Serial#: 5476
    public void m_psubw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubw(destination, placeHolder, index, scale);
        new m_psubw_5476(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code psubw     mm0, [L1: 0x12345678]}
     */
    // Template#: 875, Serial#: 5423
    public void m_psubw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubw(destination, placeHolder);
        new m_psubw_5423(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code psubw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code psubw     mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 876, Serial#: 5422
    public void m_psubw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_psubw(destination, placeHolder, index, scale);
        new m_psubw_5422(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhbw  xmm0, [L1: 0x12345678]}
     */
    // Template#: 877, Serial#: 4706
    public void m_punpckhbw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhbw(destination, placeHolder);
        new m_punpckhbw_4706(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhbw  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 878, Serial#: 4705
    public void m_punpckhbw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhbw(destination, placeHolder, index, scale);
        new m_punpckhbw_4705(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhbw  mm0, [L1: 0x12345678]}
     */
    // Template#: 879, Serial#: 4652
    public void m_punpckhbw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhbw(destination, placeHolder);
        new m_punpckhbw_4652(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhbw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhbw  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 880, Serial#: 4651
    public void m_punpckhbw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhbw(destination, placeHolder, index, scale);
        new m_punpckhbw_4651(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhdq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 881, Serial#: 4724
    public void m_punpckhdq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhdq(destination, placeHolder);
        new m_punpckhdq_4724(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhdq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 882, Serial#: 4723
    public void m_punpckhdq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhdq(destination, placeHolder, index, scale);
        new m_punpckhdq_4723(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhdq  mm0, [L1: 0x12345678]}
     */
    // Template#: 883, Serial#: 4670
    public void m_punpckhdq(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhdq(destination, placeHolder);
        new m_punpckhdq_4670(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhdq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhdq  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 884, Serial#: 4669
    public void m_punpckhdq(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhdq(destination, placeHolder, index, scale);
        new m_punpckhdq_4669(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhqdq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 885, Serial#: 4751
    public void m_punpckhqdq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhqdq(destination, placeHolder);
        new m_punpckhqdq_4751(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhqdq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhqdq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 886, Serial#: 4750
    public void m_punpckhqdq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhqdq(destination, placeHolder, index, scale);
        new m_punpckhqdq_4750(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhwd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 887, Serial#: 4715
    public void m_punpckhwd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhwd(destination, placeHolder);
        new m_punpckhwd_4715(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhwd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 888, Serial#: 4714
    public void m_punpckhwd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhwd(destination, placeHolder, index, scale);
        new m_punpckhwd_4714(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckhwd  mm0, [L1: 0x12345678]}
     */
    // Template#: 889, Serial#: 4661
    public void m_punpckhwd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhwd(destination, placeHolder);
        new m_punpckhwd_4661(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckhwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckhwd  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 890, Serial#: 4660
    public void m_punpckhwd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckhwd(destination, placeHolder, index, scale);
        new m_punpckhwd_4660(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpcklbw  xmm0, [L1: 0x12345678]}
     */
    // Template#: 891, Serial#: 3247
    public void m_punpcklbw(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklbw(destination, placeHolder);
        new m_punpcklbw_3247(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpcklbw  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 892, Serial#: 3246
    public void m_punpcklbw(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklbw(destination, placeHolder, index, scale);
        new m_punpcklbw_3246(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpcklbw  mm0, [L1: 0x12345678]}
     */
    // Template#: 893, Serial#: 3130
    public void m_punpcklbw(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklbw(destination, placeHolder);
        new m_punpcklbw_3130(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklbw  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpcklbw  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 894, Serial#: 3129
    public void m_punpcklbw(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklbw(destination, placeHolder, index, scale);
        new m_punpcklbw_3129(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckldq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 895, Serial#: 3265
    public void m_punpckldq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckldq(destination, placeHolder);
        new m_punpckldq_3265(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckldq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 896, Serial#: 3264
    public void m_punpckldq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckldq(destination, placeHolder, index, scale);
        new m_punpckldq_3264(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpckldq  mm0, [L1: 0x12345678]}
     */
    // Template#: 897, Serial#: 3148
    public void m_punpckldq(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckldq(destination, placeHolder);
        new m_punpckldq_3148(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpckldq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpckldq  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 898, Serial#: 3147
    public void m_punpckldq(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpckldq(destination, placeHolder, index, scale);
        new m_punpckldq_3147(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpcklqdq  xmm0, [L1: 0x12345678]}
     */
    // Template#: 899, Serial#: 4742
    public void m_punpcklqdq(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklqdq(destination, placeHolder);
        new m_punpcklqdq_4742(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklqdq  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpcklqdq  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 900, Serial#: 4741
    public void m_punpcklqdq(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklqdq(destination, placeHolder, index, scale);
        new m_punpcklqdq_4741(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpcklwd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 901, Serial#: 3256
    public void m_punpcklwd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklwd(destination, placeHolder);
        new m_punpcklwd_3256(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpcklwd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 902, Serial#: 3255
    public void m_punpcklwd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklwd(destination, placeHolder, index, scale);
        new m_punpcklwd_3255(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code punpcklwd  mm0, [L1: 0x12345678]}
     */
    // Template#: 903, Serial#: 3139
    public void m_punpcklwd(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklwd(destination, placeHolder);
        new m_punpcklwd_3139(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code punpcklwd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code punpcklwd  mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 904, Serial#: 3138
    public void m_punpcklwd(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_punpcklwd(destination, placeHolder, index, scale);
        new m_punpcklwd_3138(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>label</i>
     * Example disassembly syntax: {@code push      [L1: 0x12345678]}
     */
    // Template#: 905, Serial#: 2451
    public void m_push(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_push(placeHolder);
        new m_push_2451(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code push  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code push      L1: 0x12345678[esi * 4]}
     */
    // Template#: 906, Serial#: 2450
    public void m_push(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_push(placeHolder, index, scale);
        new m_push_2450(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pxor      xmm0, [L1: 0x12345678]}
     */
    // Template#: 907, Serial#: 5405
    public void m_pxor(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pxor(destination, placeHolder);
        new m_pxor_5405(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pxor      xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 908, Serial#: 5404
    public void m_pxor(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pxor(destination, placeHolder, index, scale);
        new m_pxor_5404(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code pxor      mm0, [L1: 0x12345678]}
     */
    // Template#: 909, Serial#: 5333
    public void m_pxor(final MMXRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pxor(destination, placeHolder);
        new m_pxor_5333(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code pxor  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code pxor      mm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 910, Serial#: 5332
    public void m_pxor(final MMXRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_pxor(destination, placeHolder, index, scale);
        new m_pxor_5332(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>
     * Example disassembly syntax: {@code rclb      [L1: 0x12345678], 0x1}
     */
    // Template#: 911, Serial#: 961
    public void m_rclb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb___1(placeHolder);
        new m_rclb___1_961(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>
     * Example disassembly syntax: {@code rcll      [L1: 0x12345678], 0x1}
     */
    // Template#: 912, Serial#: 1024
    public void m_rcll___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll___1(placeHolder);
        new m_rcll___1_1024(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>
     * Example disassembly syntax: {@code rclw      [L1: 0x12345678], 0x1}
     */
    // Template#: 913, Serial#: 1087
    public void m_rclw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw___1(placeHolder);
        new m_rclw___1_1087(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>
     * Example disassembly syntax: {@code rclb      [L1: 0x12345678], cl}
     */
    // Template#: 914, Serial#: 1150
    public void m_rclb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb___CL(placeHolder);
        new m_rclb___CL_1150(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>
     * Example disassembly syntax: {@code rcll      [L1: 0x12345678], cl}
     */
    // Template#: 915, Serial#: 1213
    public void m_rcll___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll___CL(placeHolder);
        new m_rcll___CL_1213(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>
     * Example disassembly syntax: {@code rclw      [L1: 0x12345678], cl}
     */
    // Template#: 916, Serial#: 1276
    public void m_rclw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw___CL(placeHolder);
        new m_rclw___CL_1276(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rclb      [L1: 0x12345678], 0x12}
     */
    // Template#: 917, Serial#: 711
    public void m_rclb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb(placeHolder, imm8);
        new m_rclb_711(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcll      [L1: 0x12345678], 0x12}
     */
    // Template#: 918, Serial#: 774
    public void m_rcll(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll(placeHolder, imm8);
        new m_rcll_774(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rclw      [L1: 0x12345678], 0x12}
     */
    // Template#: 919, Serial#: 837
    public void m_rclw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw(placeHolder, imm8);
        new m_rclw_837(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rclb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 920, Serial#: 960
    public void m_rclb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb___1(placeHolder, index, scale);
        new m_rclb___1_960(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcll      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 921, Serial#: 1023
    public void m_rcll___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll___1(placeHolder, index, scale);
        new m_rcll___1_1023(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rclw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 922, Serial#: 1086
    public void m_rclw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw___1(placeHolder, index, scale);
        new m_rclw___1_1086(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rclb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 923, Serial#: 1149
    public void m_rclb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb___CL(placeHolder, index, scale);
        new m_rclb___CL_1149(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcll      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 924, Serial#: 1212
    public void m_rcll___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll___CL(placeHolder, index, scale);
        new m_rcll___CL_1212(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rclw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 925, Serial#: 1275
    public void m_rclw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw___CL(placeHolder, index, scale);
        new m_rclw___CL_1275(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rclb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 926, Serial#: 710
    public void m_rclb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclb(placeHolder, index, scale, imm8);
        new m_rclb_710(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcll  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcll      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 927, Serial#: 773
    public void m_rcll(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcll(placeHolder, index, scale, imm8);
        new m_rcll_773(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rclw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rclw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 928, Serial#: 836
    public void m_rclw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rclw(placeHolder, index, scale, imm8);
        new m_rclw_836(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code rcpps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 929, Serial#: 3003
    public void m_rcpps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcpps(destination, placeHolder);
        new m_rcpps_3003(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcpps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 930, Serial#: 3002
    public void m_rcpps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcpps(destination, placeHolder, index, scale);
        new m_rcpps_3002(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code rcpss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 931, Serial#: 3121
    public void m_rcpss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcpss(destination, placeHolder);
        new m_rcpss_3121(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcpss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcpss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 932, Serial#: 3120
    public void m_rcpss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcpss(destination, placeHolder, index, scale);
        new m_rcpss_3120(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>
     * Example disassembly syntax: {@code rcrb      [L1: 0x12345678], 0x1}
     */
    // Template#: 933, Serial#: 965
    public void m_rcrb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb___1(placeHolder);
        new m_rcrb___1_965(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>
     * Example disassembly syntax: {@code rcrl      [L1: 0x12345678], 0x1}
     */
    // Template#: 934, Serial#: 1028
    public void m_rcrl___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl___1(placeHolder);
        new m_rcrl___1_1028(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>
     * Example disassembly syntax: {@code rcrw      [L1: 0x12345678], 0x1}
     */
    // Template#: 935, Serial#: 1091
    public void m_rcrw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw___1(placeHolder);
        new m_rcrw___1_1091(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>
     * Example disassembly syntax: {@code rcrb      [L1: 0x12345678], cl}
     */
    // Template#: 936, Serial#: 1154
    public void m_rcrb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb___CL(placeHolder);
        new m_rcrb___CL_1154(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>
     * Example disassembly syntax: {@code rcrl      [L1: 0x12345678], cl}
     */
    // Template#: 937, Serial#: 1217
    public void m_rcrl___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl___CL(placeHolder);
        new m_rcrl___CL_1217(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>
     * Example disassembly syntax: {@code rcrw      [L1: 0x12345678], cl}
     */
    // Template#: 938, Serial#: 1280
    public void m_rcrw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw___CL(placeHolder);
        new m_rcrw___CL_1280(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrb      [L1: 0x12345678], 0x12}
     */
    // Template#: 939, Serial#: 715
    public void m_rcrb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb(placeHolder, imm8);
        new m_rcrb_715(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrl      [L1: 0x12345678], 0x12}
     */
    // Template#: 940, Serial#: 778
    public void m_rcrl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl(placeHolder, imm8);
        new m_rcrl_778(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrw      [L1: 0x12345678], 0x12}
     */
    // Template#: 941, Serial#: 841
    public void m_rcrw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw(placeHolder, imm8);
        new m_rcrw_841(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 942, Serial#: 964
    public void m_rcrb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb___1(placeHolder, index, scale);
        new m_rcrb___1_964(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrl      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 943, Serial#: 1027
    public void m_rcrl___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl___1(placeHolder, index, scale);
        new m_rcrl___1_1027(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 944, Serial#: 1090
    public void m_rcrw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw___1(placeHolder, index, scale);
        new m_rcrw___1_1090(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 945, Serial#: 1153
    public void m_rcrb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb___CL(placeHolder, index, scale);
        new m_rcrb___CL_1153(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrl      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 946, Serial#: 1216
    public void m_rcrl___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl___CL(placeHolder, index, scale);
        new m_rcrl___CL_1216(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rcrw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 947, Serial#: 1279
    public void m_rcrw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw___CL(placeHolder, index, scale);
        new m_rcrw___CL_1279(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 948, Serial#: 714
    public void m_rcrb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrb(placeHolder, index, scale, imm8);
        new m_rcrb_714(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 949, Serial#: 777
    public void m_rcrl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrl(placeHolder, index, scale, imm8);
        new m_rcrl_777(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rcrw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rcrw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 950, Serial#: 840
    public void m_rcrw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rcrw(placeHolder, index, scale, imm8);
        new m_rcrw_840(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>
     * Example disassembly syntax: {@code rolb      [L1: 0x12345678], 0x1}
     */
    // Template#: 951, Serial#: 953
    public void m_rolb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb___1(placeHolder);
        new m_rolb___1_953(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>
     * Example disassembly syntax: {@code roll      [L1: 0x12345678], 0x1}
     */
    // Template#: 952, Serial#: 1016
    public void m_roll___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll___1(placeHolder);
        new m_roll___1_1016(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>
     * Example disassembly syntax: {@code rolw      [L1: 0x12345678], 0x1}
     */
    // Template#: 953, Serial#: 1079
    public void m_rolw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw___1(placeHolder);
        new m_rolw___1_1079(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>
     * Example disassembly syntax: {@code rolb      [L1: 0x12345678], cl}
     */
    // Template#: 954, Serial#: 1142
    public void m_rolb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb___CL(placeHolder);
        new m_rolb___CL_1142(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>
     * Example disassembly syntax: {@code roll      [L1: 0x12345678], cl}
     */
    // Template#: 955, Serial#: 1205
    public void m_roll___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll___CL(placeHolder);
        new m_roll___CL_1205(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>
     * Example disassembly syntax: {@code rolw      [L1: 0x12345678], cl}
     */
    // Template#: 956, Serial#: 1268
    public void m_rolw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw___CL(placeHolder);
        new m_rolw___CL_1268(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rolb      [L1: 0x12345678], 0x12}
     */
    // Template#: 957, Serial#: 703
    public void m_rolb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb(placeHolder, imm8);
        new m_rolb_703(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code roll      [L1: 0x12345678], 0x12}
     */
    // Template#: 958, Serial#: 766
    public void m_roll(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll(placeHolder, imm8);
        new m_roll_766(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rolw      [L1: 0x12345678], 0x12}
     */
    // Template#: 959, Serial#: 829
    public void m_rolw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw(placeHolder, imm8);
        new m_rolw_829(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rolb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 960, Serial#: 952
    public void m_rolb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb___1(placeHolder, index, scale);
        new m_rolb___1_952(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code roll      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 961, Serial#: 1015
    public void m_roll___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll___1(placeHolder, index, scale);
        new m_roll___1_1015(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rolw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 962, Serial#: 1078
    public void m_rolw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw___1(placeHolder, index, scale);
        new m_rolw___1_1078(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rolb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 963, Serial#: 1141
    public void m_rolb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb___CL(placeHolder, index, scale);
        new m_rolb___CL_1141(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code roll      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 964, Serial#: 1204
    public void m_roll___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll___CL(placeHolder, index, scale);
        new m_roll___CL_1204(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rolw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 965, Serial#: 1267
    public void m_rolw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw___CL(placeHolder, index, scale);
        new m_rolw___CL_1267(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rolb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 966, Serial#: 702
    public void m_rolb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolb(placeHolder, index, scale, imm8);
        new m_rolb_702(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code roll  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code roll      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 967, Serial#: 765
    public void m_roll(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_roll(placeHolder, index, scale, imm8);
        new m_roll_765(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rolw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rolw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 968, Serial#: 828
    public void m_rolw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rolw(placeHolder, index, scale, imm8);
        new m_rolw_828(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>
     * Example disassembly syntax: {@code rorb      [L1: 0x12345678], 0x1}
     */
    // Template#: 969, Serial#: 957
    public void m_rorb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb___1(placeHolder);
        new m_rorb___1_957(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>
     * Example disassembly syntax: {@code rorl      [L1: 0x12345678], 0x1}
     */
    // Template#: 970, Serial#: 1020
    public void m_rorl___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl___1(placeHolder);
        new m_rorl___1_1020(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>
     * Example disassembly syntax: {@code rorw      [L1: 0x12345678], 0x1}
     */
    // Template#: 971, Serial#: 1083
    public void m_rorw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw___1(placeHolder);
        new m_rorw___1_1083(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>
     * Example disassembly syntax: {@code rorb      [L1: 0x12345678], cl}
     */
    // Template#: 972, Serial#: 1146
    public void m_rorb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb___CL(placeHolder);
        new m_rorb___CL_1146(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>
     * Example disassembly syntax: {@code rorl      [L1: 0x12345678], cl}
     */
    // Template#: 973, Serial#: 1209
    public void m_rorl___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl___CL(placeHolder);
        new m_rorl___CL_1209(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>
     * Example disassembly syntax: {@code rorw      [L1: 0x12345678], cl}
     */
    // Template#: 974, Serial#: 1272
    public void m_rorw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw___CL(placeHolder);
        new m_rorw___CL_1272(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorb      [L1: 0x12345678], 0x12}
     */
    // Template#: 975, Serial#: 707
    public void m_rorb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb(placeHolder, imm8);
        new m_rorb_707(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorl      [L1: 0x12345678], 0x12}
     */
    // Template#: 976, Serial#: 770
    public void m_rorl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl(placeHolder, imm8);
        new m_rorl_770(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorw      [L1: 0x12345678], 0x12}
     */
    // Template#: 977, Serial#: 833
    public void m_rorw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw(placeHolder, imm8);
        new m_rorw_833(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 978, Serial#: 956
    public void m_rorb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb___1(placeHolder, index, scale);
        new m_rorb___1_956(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorl      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 979, Serial#: 1019
    public void m_rorl___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl___1(placeHolder, index, scale);
        new m_rorl___1_1019(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 980, Serial#: 1082
    public void m_rorw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw___1(placeHolder, index, scale);
        new m_rorw___1_1082(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 981, Serial#: 1145
    public void m_rorb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb___CL(placeHolder, index, scale);
        new m_rorb___CL_1145(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorl      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 982, Serial#: 1208
    public void m_rorl___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl___CL(placeHolder, index, scale);
        new m_rorl___CL_1208(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rorw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 983, Serial#: 1271
    public void m_rorw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw___CL(placeHolder, index, scale);
        new m_rorw___CL_1271(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 984, Serial#: 706
    public void m_rorb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorb(placeHolder, index, scale, imm8);
        new m_rorb_706(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 985, Serial#: 769
    public void m_rorl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorl(placeHolder, index, scale, imm8);
        new m_rorl_769(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rorw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code rorw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 986, Serial#: 832
    public void m_rorw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rorw(placeHolder, index, scale, imm8);
        new m_rorw_832(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code rsqrtps   xmm0, [L1: 0x12345678]}
     */
    // Template#: 987, Serial#: 2994
    public void m_rsqrtps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rsqrtps(destination, placeHolder);
        new m_rsqrtps_2994(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rsqrtps   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 988, Serial#: 2993
    public void m_rsqrtps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rsqrtps(destination, placeHolder, index, scale);
        new m_rsqrtps_2993(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code rsqrtss   xmm0, [L1: 0x12345678]}
     */
    // Template#: 989, Serial#: 3112
    public void m_rsqrtss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rsqrtss(destination, placeHolder);
        new m_rsqrtss_3112(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code rsqrtss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code rsqrtss   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 990, Serial#: 3111
    public void m_rsqrtss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_rsqrtss(destination, placeHolder, index, scale);
        new m_rsqrtss_3111(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>
     * Example disassembly syntax: {@code sarb      [L1: 0x12345678], 0x1}
     */
    // Template#: 991, Serial#: 977
    public void m_sarb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb___1(placeHolder);
        new m_sarb___1_977(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>
     * Example disassembly syntax: {@code sarl      [L1: 0x12345678], 0x1}
     */
    // Template#: 992, Serial#: 1040
    public void m_sarl___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl___1(placeHolder);
        new m_sarl___1_1040(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>
     * Example disassembly syntax: {@code sarw      [L1: 0x12345678], 0x1}
     */
    // Template#: 993, Serial#: 1103
    public void m_sarw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw___1(placeHolder);
        new m_sarw___1_1103(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>
     * Example disassembly syntax: {@code sarb      [L1: 0x12345678], cl}
     */
    // Template#: 994, Serial#: 1166
    public void m_sarb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb___CL(placeHolder);
        new m_sarb___CL_1166(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>
     * Example disassembly syntax: {@code sarl      [L1: 0x12345678], cl}
     */
    // Template#: 995, Serial#: 1229
    public void m_sarl___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl___CL(placeHolder);
        new m_sarl___CL_1229(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>
     * Example disassembly syntax: {@code sarw      [L1: 0x12345678], cl}
     */
    // Template#: 996, Serial#: 1292
    public void m_sarw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw___CL(placeHolder);
        new m_sarw___CL_1292(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarb      [L1: 0x12345678], 0x12}
     */
    // Template#: 997, Serial#: 727
    public void m_sarb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb(placeHolder, imm8);
        new m_sarb_727(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarl      [L1: 0x12345678], 0x12}
     */
    // Template#: 998, Serial#: 790
    public void m_sarl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl(placeHolder, imm8);
        new m_sarl_790(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarw      [L1: 0x12345678], 0x12}
     */
    // Template#: 999, Serial#: 853
    public void m_sarw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw(placeHolder, imm8);
        new m_sarw_853(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1000, Serial#: 976
    public void m_sarb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb___1(placeHolder, index, scale);
        new m_sarb___1_976(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarl      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1001, Serial#: 1039
    public void m_sarl___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl___1(placeHolder, index, scale);
        new m_sarl___1_1039(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1002, Serial#: 1102
    public void m_sarw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw___1(placeHolder, index, scale);
        new m_sarw___1_1102(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1003, Serial#: 1165
    public void m_sarb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb___CL(placeHolder, index, scale);
        new m_sarb___CL_1165(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarl      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1004, Serial#: 1228
    public void m_sarl___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl___CL(placeHolder, index, scale);
        new m_sarl___CL_1228(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sarw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1005, Serial#: 1291
    public void m_sarw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw___CL(placeHolder, index, scale);
        new m_sarw___CL_1291(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1006, Serial#: 726
    public void m_sarb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarb(placeHolder, index, scale, imm8);
        new m_sarb_726(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1007, Serial#: 789
    public void m_sarl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarl(placeHolder, index, scale, imm8);
        new m_sarl_789(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sarw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sarw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1008, Serial#: 852
    public void m_sarw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sarw(placeHolder, index, scale, imm8);
        new m_sarw_852(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sbb       ax, [L1: 0x12345678]}
     */
    // Template#: 1009, Serial#: 1637
    public void m_sbb(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder);
        new m_sbb_1637(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sbb       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1010, Serial#: 1636
    public void m_sbb(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder, index, scale);
        new m_sbb_1636(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sbb       eax, [L1: 0x12345678]}
     */
    // Template#: 1011, Serial#: 1629
    public void m_sbb(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder);
        new m_sbb_1629(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sbb       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1012, Serial#: 1628
    public void m_sbb(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder, index, scale);
        new m_sbb_1628(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sbb       al, [L1: 0x12345678]}
     */
    // Template#: 1013, Serial#: 1621
    public void m_sbb(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder);
        new m_sbb_1621(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sbb       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1014, Serial#: 1620
    public void m_sbb(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(destination, placeHolder, index, scale);
        new m_sbb_1620(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbb      [L1: 0x12345678], 0x12}
     */
    // Template#: 1015, Serial#: 285
    public void m_sbbb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbb(placeHolder, imm8);
        new m_sbbb_285(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbl      [L1: 0x12345678], 0x12}
     */
    // Template#: 1016, Serial#: 501
    public void m_sbbl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbl(placeHolder, imm8);
        new m_sbbl_501(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbw      [L1: 0x12345678], 0x12}
     */
    // Template#: 1017, Serial#: 573
    public void m_sbbw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbw(placeHolder, imm8);
        new m_sbbw_573(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       [L1: 0x12345678], ax}
     */
    // Template#: 1018, Serial#: 1612
    public void m_sbb(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, source);
        new m_sbb_1612(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       [L1: 0x12345678], eax}
     */
    // Template#: 1019, Serial#: 1603
    public void m_sbb(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, source);
        new m_sbb_1603(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       [L1: 0x12345678], al}
     */
    // Template#: 1020, Serial#: 1594
    public void m_sbb(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, source);
        new m_sbb_1594(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1021, Serial#: 284
    public void m_sbbb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbb(placeHolder, index, scale, imm8);
        new m_sbbb_284(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1022, Serial#: 500
    public void m_sbbl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbl(placeHolder, index, scale, imm8);
        new m_sbbl_500(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code sbbw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1023, Serial#: 572
    public void m_sbbw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbw(placeHolder, index, scale, imm8);
        new m_sbbw_572(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1024, Serial#: 1611
    public void m_sbb(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, index, scale, source);
        new m_sbb_1611(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1025, Serial#: 1602
    public void m_sbb(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, index, scale, source);
        new m_sbb_1602(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sbb       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1026, Serial#: 1593
    public void m_sbb(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbb(placeHolder, index, scale, source);
        new m_sbb_1593(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code sbbl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 1027, Serial#: 356
    public void m_sbbl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbl(placeHolder, index, scale, imm32);
        new m_sbbl_356(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code sbbw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 1028, Serial#: 428
    public void m_sbbw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbw(placeHolder, index, scale, imm16);
        new m_sbbw_428(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code sbbl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 1029, Serial#: 357
    public void m_sbbl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbl(placeHolder, imm32);
        new m_sbbl_357(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sbbw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code sbbw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 1030, Serial#: 429
    public void m_sbbw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sbbw(placeHolder, imm16);
        new m_sbbw_429(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>label</i>
     * Example disassembly syntax: {@code setb      [L1: 0x12345678]}
     */
    // Template#: 1031, Serial#: 3358
    public void m_setb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setb(placeHolder);
        new m_setb_3358(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setb      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1032, Serial#: 3357
    public void m_setb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setb(placeHolder, index, scale);
        new m_setb_3357(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>label</i>
     * Example disassembly syntax: {@code setbe     [L1: 0x12345678]}
     */
    // Template#: 1033, Serial#: 3394
    public void m_setbe(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setbe(placeHolder);
        new m_setbe_3394(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setbe  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setbe     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1034, Serial#: 3393
    public void m_setbe(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setbe(placeHolder, index, scale);
        new m_setbe_3393(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>label</i>
     * Example disassembly syntax: {@code setl      [L1: 0x12345678]}
     */
    // Template#: 1035, Serial#: 4917
    public void m_setl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setl(placeHolder);
        new m_setl_4917(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setl      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1036, Serial#: 4916
    public void m_setl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setl(placeHolder, index, scale);
        new m_setl_4916(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>label</i>
     * Example disassembly syntax: {@code setle     [L1: 0x12345678]}
     */
    // Template#: 1037, Serial#: 4935
    public void m_setle(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setle(placeHolder);
        new m_setle_4935(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setle  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setle     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1038, Serial#: 4934
    public void m_setle(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setle(placeHolder, index, scale);
        new m_setle_4934(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>label</i>
     * Example disassembly syntax: {@code setnb     [L1: 0x12345678]}
     */
    // Template#: 1039, Serial#: 3367
    public void m_setnb(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnb(placeHolder);
        new m_setnb_3367(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnb     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1040, Serial#: 3366
    public void m_setnb(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnb(placeHolder, index, scale);
        new m_setnb_3366(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>label</i>
     * Example disassembly syntax: {@code setnbe    [L1: 0x12345678]}
     */
    // Template#: 1041, Serial#: 3403
    public void m_setnbe(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnbe(placeHolder);
        new m_setnbe_3403(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnbe  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnbe    L1: 0x12345678[esi * 4]}
     */
    // Template#: 1042, Serial#: 3402
    public void m_setnbe(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnbe(placeHolder, index, scale);
        new m_setnbe_3402(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>label</i>
     * Example disassembly syntax: {@code setnl     [L1: 0x12345678]}
     */
    // Template#: 1043, Serial#: 4926
    public void m_setnl(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnl(placeHolder);
        new m_setnl_4926(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnl     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1044, Serial#: 4925
    public void m_setnl(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnl(placeHolder, index, scale);
        new m_setnl_4925(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>label</i>
     * Example disassembly syntax: {@code setnle    [L1: 0x12345678]}
     */
    // Template#: 1045, Serial#: 4944
    public void m_setnle(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnle(placeHolder);
        new m_setnle_4944(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnle  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnle    L1: 0x12345678[esi * 4]}
     */
    // Template#: 1046, Serial#: 4943
    public void m_setnle(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnle(placeHolder, index, scale);
        new m_setnle_4943(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>label</i>
     * Example disassembly syntax: {@code setno     [L1: 0x12345678]}
     */
    // Template#: 1047, Serial#: 3349
    public void m_setno(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setno(placeHolder);
        new m_setno_3349(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setno  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setno     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1048, Serial#: 3348
    public void m_setno(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setno(placeHolder, index, scale);
        new m_setno_3348(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>label</i>
     * Example disassembly syntax: {@code setnp     [L1: 0x12345678]}
     */
    // Template#: 1049, Serial#: 4908
    public void m_setnp(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnp(placeHolder);
        new m_setnp_4908(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnp  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnp     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1050, Serial#: 4907
    public void m_setnp(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnp(placeHolder, index, scale);
        new m_setnp_4907(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>label</i>
     * Example disassembly syntax: {@code setns     [L1: 0x12345678]}
     */
    // Template#: 1051, Serial#: 4890
    public void m_setns(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setns(placeHolder);
        new m_setns_4890(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setns  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setns     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1052, Serial#: 4889
    public void m_setns(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setns(placeHolder, index, scale);
        new m_setns_4889(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>label</i>
     * Example disassembly syntax: {@code setnz     [L1: 0x12345678]}
     */
    // Template#: 1053, Serial#: 3385
    public void m_setnz(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnz(placeHolder);
        new m_setnz_3385(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setnz  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setnz     L1: 0x12345678[esi * 4]}
     */
    // Template#: 1054, Serial#: 3384
    public void m_setnz(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setnz(placeHolder, index, scale);
        new m_setnz_3384(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>label</i>
     * Example disassembly syntax: {@code seto      [L1: 0x12345678]}
     */
    // Template#: 1055, Serial#: 3340
    public void m_seto(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_seto(placeHolder);
        new m_seto_3340(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code seto  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code seto      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1056, Serial#: 3339
    public void m_seto(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_seto(placeHolder, index, scale);
        new m_seto_3339(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>label</i>
     * Example disassembly syntax: {@code setp      [L1: 0x12345678]}
     */
    // Template#: 1057, Serial#: 4899
    public void m_setp(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setp(placeHolder);
        new m_setp_4899(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setp  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setp      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1058, Serial#: 4898
    public void m_setp(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setp(placeHolder, index, scale);
        new m_setp_4898(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>label</i>
     * Example disassembly syntax: {@code sets      [L1: 0x12345678]}
     */
    // Template#: 1059, Serial#: 4881
    public void m_sets(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sets(placeHolder);
        new m_sets_4881(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sets  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sets      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1060, Serial#: 4880
    public void m_sets(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sets(placeHolder, index, scale);
        new m_sets_4880(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>label</i>
     * Example disassembly syntax: {@code setz      [L1: 0x12345678]}
     */
    // Template#: 1061, Serial#: 3376
    public void m_setz(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setz(placeHolder);
        new m_setz_3376(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code setz  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code setz      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1062, Serial#: 3375
    public void m_setz(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_setz(placeHolder, index, scale);
        new m_setz_3375(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>label</i>
     * Example disassembly syntax: {@code sgdt      [L1: 0x12345678]}
     */
    // Template#: 1063, Serial#: 2555
    public void m_sgdt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sgdt(placeHolder);
        new m_sgdt_2555(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sgdt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sgdt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1064, Serial#: 2554
    public void m_sgdt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sgdt(placeHolder, index, scale);
        new m_sgdt_2554(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>
     * Example disassembly syntax: {@code shlb      [L1: 0x12345678], 0x1}
     */
    // Template#: 1065, Serial#: 969
    public void m_shlb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb___1(placeHolder);
        new m_shlb___1_969(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>
     * Example disassembly syntax: {@code shll      [L1: 0x12345678], 0x1}
     */
    // Template#: 1066, Serial#: 1032
    public void m_shll___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll___1(placeHolder);
        new m_shll___1_1032(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>
     * Example disassembly syntax: {@code shlw      [L1: 0x12345678], 0x1}
     */
    // Template#: 1067, Serial#: 1095
    public void m_shlw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw___1(placeHolder);
        new m_shlw___1_1095(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>
     * Example disassembly syntax: {@code shlb      [L1: 0x12345678], cl}
     */
    // Template#: 1068, Serial#: 1158
    public void m_shlb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb___CL(placeHolder);
        new m_shlb___CL_1158(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>
     * Example disassembly syntax: {@code shll      [L1: 0x12345678], cl}
     */
    // Template#: 1069, Serial#: 1221
    public void m_shll___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll___CL(placeHolder);
        new m_shll___CL_1221(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>
     * Example disassembly syntax: {@code shlw      [L1: 0x12345678], cl}
     */
    // Template#: 1070, Serial#: 1284
    public void m_shlw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw___CL(placeHolder);
        new m_shlw___CL_1284(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shlb      [L1: 0x12345678], 0x12}
     */
    // Template#: 1071, Serial#: 719
    public void m_shlb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb(placeHolder, imm8);
        new m_shlb_719(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shll      [L1: 0x12345678], 0x12}
     */
    // Template#: 1072, Serial#: 782
    public void m_shll(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll(placeHolder, imm8);
        new m_shll_782(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shlw      [L1: 0x12345678], 0x12}
     */
    // Template#: 1073, Serial#: 845
    public void m_shlw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw(placeHolder, imm8);
        new m_shlw_845(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shlb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1074, Serial#: 968
    public void m_shlb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb___1(placeHolder, index, scale);
        new m_shlb___1_968(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shll      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1075, Serial#: 1031
    public void m_shll___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll___1(placeHolder, index, scale);
        new m_shll___1_1031(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shlw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1076, Serial#: 1094
    public void m_shlw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw___1(placeHolder, index, scale);
        new m_shlw___1_1094(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shlb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1077, Serial#: 1157
    public void m_shlb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb___CL(placeHolder, index, scale);
        new m_shlb___CL_1157(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shll      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1078, Serial#: 1220
    public void m_shll___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll___CL(placeHolder, index, scale);
        new m_shll___CL_1220(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shlw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1079, Serial#: 1283
    public void m_shlw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw___CL(placeHolder, index, scale);
        new m_shlw___CL_1283(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shlb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1080, Serial#: 718
    public void m_shlb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlb(placeHolder, index, scale, imm8);
        new m_shlb_718(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shll  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shll      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1081, Serial#: 781
    public void m_shll(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shll(placeHolder, index, scale, imm8);
        new m_shll_781(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shlw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shlw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1082, Serial#: 844
    public void m_shlw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shlw(placeHolder, index, scale, imm8);
        new m_shlw_844(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code shld      [L1: 0x12345678], ax, cl}
     */
    // Template#: 1083, Serial#: 3460
    public void m_shld_CL(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld_CL(placeHolder, source);
        new m_shld_CL_3460(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shld      [L1: 0x12345678], ax, 0x12}
     */
    // Template#: 1084, Serial#: 3442
    public void m_shld(final Label label, final IA32GeneralRegister16 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld(placeHolder, source, imm8);
        new m_shld_3442(startPosition, currentPosition() - startPosition, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code shld      [L1: 0x12345678], eax, cl}
     */
    // Template#: 1085, Serial#: 3451
    public void m_shld_CL(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld_CL(placeHolder, source);
        new m_shld_CL_3451(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shld      [L1: 0x12345678], eax, 0x12}
     */
    // Template#: 1086, Serial#: 3433
    public void m_shld(final Label label, final IA32GeneralRegister32 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld(placeHolder, source, imm8);
        new m_shld_3433(startPosition, currentPosition() - startPosition, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code shld      L1: 0x12345678[esi * 4], ax, cl}
     */
    // Template#: 1087, Serial#: 3459
    public void m_shld_CL(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld_CL(placeHolder, index, scale, source);
        new m_shld_CL_3459(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shld      L1: 0x12345678[esi * 4], ax, 0x12}
     */
    // Template#: 1088, Serial#: 3441
    public void m_shld(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld(placeHolder, index, scale, source, imm8);
        new m_shld_3441(startPosition, currentPosition() - startPosition, index, scale, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code shld      L1: 0x12345678[esi * 4], eax, cl}
     */
    // Template#: 1089, Serial#: 3450
    public void m_shld_CL(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld_CL(placeHolder, index, scale, source);
        new m_shld_CL_3450(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shld  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shld      L1: 0x12345678[esi * 4], eax, 0x12}
     */
    // Template#: 1090, Serial#: 3432
    public void m_shld(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shld(placeHolder, index, scale, source, imm8);
        new m_shld_3432(startPosition, currentPosition() - startPosition, index, scale, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>
     * Example disassembly syntax: {@code shrb      [L1: 0x12345678], 0x1}
     */
    // Template#: 1091, Serial#: 973
    public void m_shrb___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb___1(placeHolder);
        new m_shrb___1_973(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>
     * Example disassembly syntax: {@code shrl      [L1: 0x12345678], 0x1}
     */
    // Template#: 1092, Serial#: 1036
    public void m_shrl___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl___1(placeHolder);
        new m_shrl___1_1036(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>
     * Example disassembly syntax: {@code shrw      [L1: 0x12345678], 0x1}
     */
    // Template#: 1093, Serial#: 1099
    public void m_shrw___1(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw___1(placeHolder);
        new m_shrw___1_1099(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>
     * Example disassembly syntax: {@code shrb      [L1: 0x12345678], cl}
     */
    // Template#: 1094, Serial#: 1162
    public void m_shrb___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb___CL(placeHolder);
        new m_shrb___CL_1162(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>
     * Example disassembly syntax: {@code shrl      [L1: 0x12345678], cl}
     */
    // Template#: 1095, Serial#: 1225
    public void m_shrl___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl___CL(placeHolder);
        new m_shrl___CL_1225(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>
     * Example disassembly syntax: {@code shrw      [L1: 0x12345678], cl}
     */
    // Template#: 1096, Serial#: 1288
    public void m_shrw___CL(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw___CL(placeHolder);
        new m_shrw___CL_1288(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrb      [L1: 0x12345678], 0x12}
     */
    // Template#: 1097, Serial#: 723
    public void m_shrb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb(placeHolder, imm8);
        new m_shrb_723(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrl      [L1: 0x12345678], 0x12}
     */
    // Template#: 1098, Serial#: 786
    public void m_shrl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl(placeHolder, imm8);
        new m_shrl_786(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrw      [L1: 0x12345678], 0x12}
     */
    // Template#: 1099, Serial#: 849
    public void m_shrw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw(placeHolder, imm8);
        new m_shrw_849(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrb      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1100, Serial#: 972
    public void m_shrb___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb___1(placeHolder, index, scale);
        new m_shrb___1_972(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrl      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1101, Serial#: 1035
    public void m_shrl___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl___1(placeHolder, index, scale);
        new m_shrl___1_1035(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrw      L1: 0x12345678[esi * 4], 0x1}
     */
    // Template#: 1102, Serial#: 1098
    public void m_shrw___1(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw___1(placeHolder, index, scale);
        new m_shrw___1_1098(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrb      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1103, Serial#: 1161
    public void m_shrb___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb___CL(placeHolder, index, scale);
        new m_shrb___CL_1161(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrl      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1104, Serial#: 1224
    public void m_shrl___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl___CL(placeHolder, index, scale);
        new m_shrl___CL_1224(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code shrw      L1: 0x12345678[esi * 4], cl}
     */
    // Template#: 1105, Serial#: 1287
    public void m_shrw___CL(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw___CL(placeHolder, index, scale);
        new m_shrw___CL_1287(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1106, Serial#: 722
    public void m_shrb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrb(placeHolder, index, scale, imm8);
        new m_shrb_722(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1107, Serial#: 785
    public void m_shrl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrl(placeHolder, index, scale, imm8);
        new m_shrl_785(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1108, Serial#: 848
    public void m_shrw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrw(placeHolder, index, scale, imm8);
        new m_shrw_848(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code shrd      [L1: 0x12345678], ax, cl}
     */
    // Template#: 1109, Serial#: 5001
    public void m_shrd_CL(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd_CL(placeHolder, source);
        new m_shrd_CL_5001(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrd      [L1: 0x12345678], ax, 0x12}
     */
    // Template#: 1110, Serial#: 4983
    public void m_shrd(final Label label, final IA32GeneralRegister16 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd(placeHolder, source, imm8);
        new m_shrd_4983(startPosition, currentPosition() - startPosition, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code shrd      [L1: 0x12345678], eax, cl}
     */
    // Template#: 1111, Serial#: 4992
    public void m_shrd_CL(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd_CL(placeHolder, source);
        new m_shrd_CL_4992(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrd      [L1: 0x12345678], eax, 0x12}
     */
    // Template#: 1112, Serial#: 4974
    public void m_shrd(final Label label, final IA32GeneralRegister32 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd(placeHolder, source, imm8);
        new m_shrd_4974(startPosition, currentPosition() - startPosition, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code shrd      L1: 0x12345678[esi * 4], ax, cl}
     */
    // Template#: 1113, Serial#: 5000
    public void m_shrd_CL(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd_CL(placeHolder, index, scale, source);
        new m_shrd_CL_5000(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrd      L1: 0x12345678[esi * 4], ax, 0x12}
     */
    // Template#: 1114, Serial#: 4982
    public void m_shrd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd(placeHolder, index, scale, source, imm8);
        new m_shrd_4982(startPosition, currentPosition() - startPosition, index, scale, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code shrd      L1: 0x12345678[esi * 4], eax, cl}
     */
    // Template#: 1115, Serial#: 4991
    public void m_shrd_CL(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd_CL(placeHolder, index, scale, source);
        new m_shrd_CL_4991(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shrd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shrd      L1: 0x12345678[esi * 4], eax, 0x12}
     */
    // Template#: 1116, Serial#: 4973
    public void m_shrd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shrd(placeHolder, index, scale, source, imm8);
        new m_shrd_4973(startPosition, currentPosition() - startPosition, index, scale, source, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shufpd    xmm0, [L1: 0x12345678], 0x12}
     */
    // Template#: 1117, Serial#: 3688
    public void m_shufpd(final IA32XMMRegister destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shufpd(destination, placeHolder, imm8);
        new m_shufpd_3688(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shufpd    xmm0, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1118, Serial#: 3687
    public void m_shufpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shufpd(destination, placeHolder, index, scale, imm8);
        new m_shufpd_3687(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shufps    xmm0, [L1: 0x12345678], 0x12}
     */
    // Template#: 1119, Serial#: 3652
    public void m_shufps(final IA32XMMRegister destination, final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shufps(destination, placeHolder, imm8);
        new m_shufps_3652(startPosition, currentPosition() - startPosition, destination, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code shufps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code shufps    xmm0, L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1120, Serial#: 3651
    public void m_shufps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_shufps(destination, placeHolder, index, scale, imm8);
        new m_shufps_3651(startPosition, currentPosition() - startPosition, destination, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>label</i>
     * Example disassembly syntax: {@code sidt      [L1: 0x12345678]}
     */
    // Template#: 1121, Serial#: 2559
    public void m_sidt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sidt(placeHolder);
        new m_sidt_2559(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sidt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sidt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1122, Serial#: 2558
    public void m_sidt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sidt(placeHolder, index, scale);
        new m_sidt_2558(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>label</i>
     * Example disassembly syntax: {@code sldt      [L1: 0x12345678]}
     */
    // Template#: 1123, Serial#: 2499
    public void m_sldt(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sldt(placeHolder);
        new m_sldt_2499(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sldt  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sldt      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1124, Serial#: 2498
    public void m_sldt(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sldt(placeHolder, index, scale);
        new m_sldt_2498(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>label</i>
     * Example disassembly syntax: {@code smsw      [L1: 0x12345678]}
     */
    // Template#: 1125, Serial#: 2571
    public void m_smsw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_smsw(placeHolder);
        new m_smsw_2571(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code smsw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code smsw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1126, Serial#: 2570
    public void m_smsw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_smsw(placeHolder, index, scale);
        new m_smsw_2570(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sqrtpd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 1127, Serial#: 3049
    public void m_sqrtpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtpd(destination, placeHolder);
        new m_sqrtpd_3049(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sqrtpd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1128, Serial#: 3048
    public void m_sqrtpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtpd(destination, placeHolder, index, scale);
        new m_sqrtpd_3048(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sqrtps    xmm0, [L1: 0x12345678]}
     */
    // Template#: 1129, Serial#: 2985
    public void m_sqrtps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtps(destination, placeHolder);
        new m_sqrtps_2985(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sqrtps    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1130, Serial#: 2984
    public void m_sqrtps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtps(destination, placeHolder, index, scale);
        new m_sqrtps_2984(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sqrtsd    xmm0, [L1: 0x12345678]}
     */
    // Template#: 1131, Serial#: 3094
    public void m_sqrtsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtsd(destination, placeHolder);
        new m_sqrtsd_3094(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sqrtsd    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1132, Serial#: 3093
    public void m_sqrtsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtsd(destination, placeHolder, index, scale);
        new m_sqrtsd_3093(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sqrtss    xmm0, [L1: 0x12345678]}
     */
    // Template#: 1133, Serial#: 3103
    public void m_sqrtss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtss(destination, placeHolder);
        new m_sqrtss_3103(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sqrtss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sqrtss    xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1134, Serial#: 3102
    public void m_sqrtss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sqrtss(destination, placeHolder, index, scale);
        new m_sqrtss_3102(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>label</i>
     * Example disassembly syntax: {@code str       [L1: 0x12345678]}
     */
    // Template#: 1135, Serial#: 2503
    public void m_str(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_str(placeHolder);
        new m_str_2503(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code str  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code str       L1: 0x12345678[esi * 4]}
     */
    // Template#: 1136, Serial#: 2502
    public void m_str(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_str(placeHolder, index, scale);
        new m_str_2502(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sub       ax, [L1: 0x12345678]}
     */
    // Template#: 1137, Serial#: 1693
    public void m_sub(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder);
        new m_sub_1693(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sub       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1138, Serial#: 1692
    public void m_sub(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder, index, scale);
        new m_sub_1692(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sub       eax, [L1: 0x12345678]}
     */
    // Template#: 1139, Serial#: 1685
    public void m_sub(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder);
        new m_sub_1685(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sub       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1140, Serial#: 1684
    public void m_sub(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder, index, scale);
        new m_sub_1684(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code sub       al, [L1: 0x12345678]}
     */
    // Template#: 1141, Serial#: 1677
    public void m_sub(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder);
        new m_sub_1677(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code sub       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1142, Serial#: 1676
    public void m_sub(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(destination, placeHolder, index, scale);
        new m_sub_1676(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subb      [L1: 0x12345678], 0x12}
     */
    // Template#: 1143, Serial#: 293
    public void m_subb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subb(placeHolder, imm8);
        new m_subb_293(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subl      [L1: 0x12345678], 0x12}
     */
    // Template#: 1144, Serial#: 509
    public void m_subl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subl(placeHolder, imm8);
        new m_subl_509(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subw      [L1: 0x12345678], 0x12}
     */
    // Template#: 1145, Serial#: 581
    public void m_subw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subw(placeHolder, imm8);
        new m_subw_581(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       [L1: 0x12345678], ax}
     */
    // Template#: 1146, Serial#: 1668
    public void m_sub(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, source);
        new m_sub_1668(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       [L1: 0x12345678], eax}
     */
    // Template#: 1147, Serial#: 1659
    public void m_sub(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, source);
        new m_sub_1659(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       [L1: 0x12345678], al}
     */
    // Template#: 1148, Serial#: 1650
    public void m_sub(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, source);
        new m_sub_1650(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1149, Serial#: 292
    public void m_subb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subb(placeHolder, index, scale, imm8);
        new m_subb_292(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1150, Serial#: 508
    public void m_subl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subl(placeHolder, index, scale, imm8);
        new m_subl_508(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code subw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1151, Serial#: 580
    public void m_subw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subw(placeHolder, index, scale, imm8);
        new m_subw_580(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1152, Serial#: 1667
    public void m_sub(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, index, scale, source);
        new m_sub_1667(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1153, Serial#: 1658
    public void m_sub(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, index, scale, source);
        new m_sub_1658(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code sub  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code sub       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1154, Serial#: 1649
    public void m_sub(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_sub(placeHolder, index, scale, source);
        new m_sub_1649(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code subl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 1155, Serial#: 364
    public void m_subl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subl(placeHolder, index, scale, imm32);
        new m_subl_364(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code subw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 1156, Serial#: 436
    public void m_subw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subw(placeHolder, index, scale, imm16);
        new m_subw_436(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code subl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 1157, Serial#: 365
    public void m_subl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subl(placeHolder, imm32);
        new m_subl_365(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code subw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 1158, Serial#: 437
    public void m_subw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subw(placeHolder, imm16);
        new m_subw_437(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code subpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1159, Serial#: 4481
    public void m_subpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subpd(destination, placeHolder);
        new m_subpd_4481(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code subpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1160, Serial#: 4480
    public void m_subpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subpd(destination, placeHolder, index, scale);
        new m_subpd_4480(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code subps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1161, Serial#: 4409
    public void m_subps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subps(destination, placeHolder);
        new m_subps_4409(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code subps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1162, Serial#: 4408
    public void m_subps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subps(destination, placeHolder, index, scale);
        new m_subps_4408(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code subsd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1163, Serial#: 4544
    public void m_subsd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subsd(destination, placeHolder);
        new m_subsd_4544(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subsd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code subsd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1164, Serial#: 4543
    public void m_subsd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subsd(destination, placeHolder, index, scale);
        new m_subsd_4543(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code subss     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1165, Serial#: 4616
    public void m_subss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subss(destination, placeHolder);
        new m_subss_4616(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code subss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code subss     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1166, Serial#: 4615
    public void m_subss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_subss(destination, placeHolder, index, scale);
        new m_subss_4615(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code testb     [L1: 0x12345678], 0x12}
     */
    // Template#: 1167, Serial#: 1350
    public void m_testb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testb(placeHolder, imm8);
        new m_testb_1350(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code test      [L1: 0x12345678], ax}
     */
    // Template#: 1168, Serial#: 651
    public void m_test(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, source);
        new m_test_651(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code test      [L1: 0x12345678], eax}
     */
    // Template#: 1169, Serial#: 642
    public void m_test(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, source);
        new m_test_642(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code test      [L1: 0x12345678], al}
     */
    // Template#: 1170, Serial#: 633
    public void m_test(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, source);
        new m_test_633(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code testb     L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1171, Serial#: 1349
    public void m_testb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testb(placeHolder, index, scale, imm8);
        new m_testb_1349(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code test      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1172, Serial#: 650
    public void m_test(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, index, scale, source);
        new m_test_650(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code test      L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1173, Serial#: 641
    public void m_test(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, index, scale, source);
        new m_test_641(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code test  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code test      L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1174, Serial#: 632
    public void m_test(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_test(placeHolder, index, scale, source);
        new m_test_632(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code testl     L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 1175, Serial#: 1412
    public void m_testl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testl(placeHolder, index, scale, imm32);
        new m_testl_1412(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code testw     L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 1176, Serial#: 1475
    public void m_testw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testw(placeHolder, index, scale, imm16);
        new m_testw_1475(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code testl     [L1: 0x12345678], 0x12345678}
     */
    // Template#: 1177, Serial#: 1413
    public void m_testl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testl(placeHolder, imm32);
        new m_testl_1413(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code testw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code testw     [L1: 0x12345678], 0x1234}
     */
    // Template#: 1178, Serial#: 1476
    public void m_testw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_testw(placeHolder, imm16);
        new m_testw_1476(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code ucomisd   xmm0, [L1: 0x12345678]}
     */
    // Template#: 1179, Serial#: 4157
    public void m_ucomisd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ucomisd(destination, placeHolder);
        new m_ucomisd_4157(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomisd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ucomisd   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1180, Serial#: 4156
    public void m_ucomisd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ucomisd(destination, placeHolder, index, scale);
        new m_ucomisd_4156(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code ucomiss   xmm0, [L1: 0x12345678]}
     */
    // Template#: 1181, Serial#: 4087
    public void m_ucomiss(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ucomiss(destination, placeHolder);
        new m_ucomiss_4087(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code ucomiss  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code ucomiss   xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1182, Serial#: 4086
    public void m_ucomiss(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_ucomiss(destination, placeHolder, index, scale);
        new m_ucomiss_4086(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code unpckhpd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 1183, Serial#: 2746
    public void m_unpckhpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpckhpd(destination, placeHolder);
        new m_unpckhpd_2746(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code unpckhpd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1184, Serial#: 2745
    public void m_unpckhpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpckhpd(destination, placeHolder, index, scale);
        new m_unpckhpd_2745(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code unpckhps  xmm0, [L1: 0x12345678]}
     */
    // Template#: 1185, Serial#: 2686
    public void m_unpckhps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpckhps(destination, placeHolder);
        new m_unpckhps_2686(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpckhps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code unpckhps  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1186, Serial#: 2685
    public void m_unpckhps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpckhps(destination, placeHolder, index, scale);
        new m_unpckhps_2685(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code unpcklpd  xmm0, [L1: 0x12345678]}
     */
    // Template#: 1187, Serial#: 2737
    public void m_unpcklpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpcklpd(destination, placeHolder);
        new m_unpcklpd_2737(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code unpcklpd  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1188, Serial#: 2736
    public void m_unpcklpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpcklpd(destination, placeHolder, index, scale);
        new m_unpcklpd_2736(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code unpcklps  xmm0, [L1: 0x12345678]}
     */
    // Template#: 1189, Serial#: 2677
    public void m_unpcklps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpcklps(destination, placeHolder);
        new m_unpcklps_2677(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code unpcklps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code unpcklps  xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1190, Serial#: 2676
    public void m_unpcklps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_unpcklps(destination, placeHolder, index, scale);
        new m_unpcklps_2676(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>label</i>
     * Example disassembly syntax: {@code verr      [L1: 0x12345678]}
     */
    // Template#: 1191, Serial#: 2515
    public void m_verr(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_verr(placeHolder);
        new m_verr_2515(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code verr  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code verr      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1192, Serial#: 2514
    public void m_verr(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_verr(placeHolder, index, scale);
        new m_verr_2514(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>label</i>
     * Example disassembly syntax: {@code verw      [L1: 0x12345678]}
     */
    // Template#: 1193, Serial#: 2519
    public void m_verw(final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_verw(placeHolder);
        new m_verw_2519(startPosition, currentPosition() - startPosition, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code verw  }<i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code verw      L1: 0x12345678[esi * 4]}
     */
    // Template#: 1194, Serial#: 2518
    public void m_verw(final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_verw(placeHolder, index, scale);
        new m_verw_2518(startPosition, currentPosition() - startPosition, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      [L1: 0x12345678], ax}
     */
    // Template#: 1195, Serial#: 3616
    public void m_xadd(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, source);
        new m_xadd_3616(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      [L1: 0x12345678], eax}
     */
    // Template#: 1196, Serial#: 3607
    public void m_xadd(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, source);
        new m_xadd_3607(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      [L1: 0x12345678], al}
     */
    // Template#: 1197, Serial#: 3598
    public void m_xadd(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, source);
        new m_xadd_3598(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1198, Serial#: 3615
    public void m_xadd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, index, scale, source);
        new m_xadd_3615(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1199, Serial#: 3606
    public void m_xadd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, index, scale, source);
        new m_xadd_3606(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xadd  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xadd      L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1200, Serial#: 3597
    public void m_xadd(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xadd(placeHolder, index, scale, source);
        new m_xadd_3597(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      [L1: 0x12345678], ax}
     */
    // Template#: 1201, Serial#: 678
    public void m_xchg(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, source);
        new m_xchg_678(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      [L1: 0x12345678], eax}
     */
    // Template#: 1202, Serial#: 669
    public void m_xchg(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, source);
        new m_xchg_669(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      [L1: 0x12345678], al}
     */
    // Template#: 1203, Serial#: 660
    public void m_xchg(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, source);
        new m_xchg_660(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1204, Serial#: 677
    public void m_xchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, index, scale, source);
        new m_xchg_677(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1205, Serial#: 668
    public void m_xchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, index, scale, source);
        new m_xchg_668(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xchg  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xchg      L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1206, Serial#: 659
    public void m_xchg(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xchg(placeHolder, index, scale, source);
        new m_xchg_659(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code xor       ax, [L1: 0x12345678]}
     */
    // Template#: 1207, Serial#: 215
    public void m_xor(final IA32GeneralRegister16 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder);
        new m_xor_215(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code xor       ax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1208, Serial#: 214
    public void m_xor(final IA32GeneralRegister16 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder, index, scale);
        new m_xor_214(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code xor       eax, [L1: 0x12345678]}
     */
    // Template#: 1209, Serial#: 207
    public void m_xor(final IA32GeneralRegister32 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder);
        new m_xor_207(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code xor       eax, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1210, Serial#: 206
    public void m_xor(final IA32GeneralRegister32 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder, index, scale);
        new m_xor_206(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code xor       al, [L1: 0x12345678]}
     */
    // Template#: 1211, Serial#: 199
    public void m_xor(final IA32GeneralRegister8 destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder);
        new m_xor_199(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code xor       al, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1212, Serial#: 198
    public void m_xor(final IA32GeneralRegister8 destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(destination, placeHolder, index, scale);
        new m_xor_198(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorb      [L1: 0x12345678], 0x12}
     */
    // Template#: 1213, Serial#: 297
    public void m_xorb(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorb(placeHolder, imm8);
        new m_xorb_297(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorl      [L1: 0x12345678], 0x12}
     */
    // Template#: 1214, Serial#: 513
    public void m_xorl(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorl(placeHolder, imm8);
        new m_xorl_513(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>label</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorw      [L1: 0x12345678], 0x12}
     */
    // Template#: 1215, Serial#: 585
    public void m_xorw(final Label label, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorw(placeHolder, imm8);
        new m_xorw_585(startPosition, currentPosition() - startPosition, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       [L1: 0x12345678], ax}
     */
    // Template#: 1216, Serial#: 190
    public void m_xor(final Label label, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, source);
        new m_xor_190(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       [L1: 0x12345678], eax}
     */
    // Template#: 1217, Serial#: 181
    public void m_xor(final Label label, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, source);
        new m_xor_181(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       [L1: 0x12345678], al}
     */
    // Template#: 1218, Serial#: 172
    public void m_xor(final Label label, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, source);
        new m_xor_172(startPosition, currentPosition() - startPosition, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorb  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorb      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1219, Serial#: 296
    public void m_xorb(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorb(placeHolder, index, scale, imm8);
        new m_xorb_296(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorl      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1220, Serial#: 512
    public void m_xorl(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorl(placeHolder, index, scale, imm8);
        new m_xorl_512(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm8</i>
     * Example disassembly syntax: {@code xorw      L1: 0x12345678[esi * 4], 0x12}
     */
    // Template#: 1221, Serial#: 584
    public void m_xorw(final Label label, final IA32IndexRegister32 index, final Scale scale, final byte imm8) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorw(placeHolder, index, scale, imm8);
        new m_xorw_584(startPosition, currentPosition() - startPosition, index, scale, imm8, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       L1: 0x12345678[esi * 4], ax}
     */
    // Template#: 1222, Serial#: 189
    public void m_xor(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister16 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, index, scale, source);
        new m_xor_189(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       L1: 0x12345678[esi * 4], eax}
     */
    // Template#: 1223, Serial#: 180
    public void m_xor(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister32 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, index, scale, source);
        new m_xor_180(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xor  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>source</i>
     * Example disassembly syntax: {@code xor       L1: 0x12345678[esi * 4], al}
     */
    // Template#: 1224, Serial#: 171
    public void m_xor(final Label label, final IA32IndexRegister32 index, final Scale scale, final IA32GeneralRegister8 source) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xor(placeHolder, index, scale, source);
        new m_xor_171(startPosition, currentPosition() - startPosition, index, scale, source, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm32</i>
     * Example disassembly syntax: {@code xorl      L1: 0x12345678[esi * 4], 0x12345678}
     */
    // Template#: 1225, Serial#: 368
    public void m_xorl(final Label label, final IA32IndexRegister32 index, final Scale scale, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorl(placeHolder, index, scale, imm32);
        new m_xorl_368(startPosition, currentPosition() - startPosition, index, scale, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>label</i>, <i>index</i>, <i>scale</i>, <i>imm16</i>
     * Example disassembly syntax: {@code xorw      L1: 0x12345678[esi * 4], 0x1234}
     */
    // Template#: 1226, Serial#: 440
    public void m_xorw(final Label label, final IA32IndexRegister32 index, final Scale scale, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorw(placeHolder, index, scale, imm16);
        new m_xorw_440(startPosition, currentPosition() - startPosition, index, scale, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorl  }<i>label</i>, <i>imm32</i>
     * Example disassembly syntax: {@code xorl      [L1: 0x12345678], 0x12345678}
     */
    // Template#: 1227, Serial#: 369
    public void m_xorl(final Label label, final int imm32) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorl(placeHolder, imm32);
        new m_xorl_369(startPosition, currentPosition() - startPosition, imm32, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorw  }<i>label</i>, <i>imm16</i>
     * Example disassembly syntax: {@code xorw      [L1: 0x12345678], 0x1234}
     */
    // Template#: 1228, Serial#: 441
    public void m_xorw(final Label label, final short imm16) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorw(placeHolder, imm16);
        new m_xorw_441(startPosition, currentPosition() - startPosition, imm16, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code xorpd     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1229, Serial#: 3085
    public void m_xorpd(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorpd(destination, placeHolder);
        new m_xorpd_3085(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorpd  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code xorpd     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1230, Serial#: 3084
    public void m_xorpd(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorpd(destination, placeHolder, index, scale);
        new m_xorpd_3084(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>label</i>
     * Example disassembly syntax: {@code xorps     xmm0, [L1: 0x12345678]}
     */
    // Template#: 1231, Serial#: 3039
    public void m_xorps(final IA32XMMRegister destination, final Label label) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorps(destination, placeHolder);
        new m_xorps_3039(startPosition, currentPosition() - startPosition, destination, label);
    }

    /**
     * Pseudo-external assembler syntax: {@code xorps  }<i>destination</i>, <i>label</i>, <i>index</i>, <i>scale</i>
     * Example disassembly syntax: {@code xorps     xmm0, L1: 0x12345678[esi * 4]}
     */
    // Template#: 1232, Serial#: 3038
    public void m_xorps(final IA32XMMRegister destination, final Label label, final IA32IndexRegister32 index, final Scale scale) {
        final int startPosition = currentPosition();
        final int placeHolder = 0;
        m_xorps(destination, placeHolder, index, scale);
        new m_xorps_3038(startPosition, currentPosition() - startPosition, destination, index, scale, label);
    }

    class m_adc_103 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_adc_103(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt());
        }
    }

    class m_adc_102 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_adc_102(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt(), index, scale);
        }
    }

    class m_adc_95 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_adc_95(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt());
        }
    }

    class m_adc_94 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_adc_94(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt(), index, scale);
        }
    }

    class m_adc_87 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_adc_87(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt());
        }
    }

    class m_adc_86 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_adc_86(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(destination, addressAsInt(), index, scale);
        }
    }

    class m_adcb_281 extends InstructionWithAddress {
        private final byte imm8;
        m_adcb_281(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcb(addressAsInt(), imm8);
        }
    }

    class m_adcl_497 extends InstructionWithAddress {
        private final byte imm8;
        m_adcl_497(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcl(addressAsInt(), imm8);
        }
    }

    class m_adcw_569 extends InstructionWithAddress {
        private final byte imm8;
        m_adcw_569(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcw(addressAsInt(), imm8);
        }
    }

    class m_adc_78 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_adc_78(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), source);
        }
    }

    class m_adc_69 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_adc_69(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), source);
        }
    }

    class m_adc_60 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_adc_60(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), source);
        }
    }

    class m_adcb_280 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_adcb_280(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_adcl_496 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_adcl_496(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_adcw_568 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_adcw_568(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_adc_77 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_adc_77(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), index, scale, source);
        }
    }

    class m_adc_68 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_adc_68(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), index, scale, source);
        }
    }

    class m_adc_59 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_adc_59(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adc(addressAsInt(), index, scale, source);
        }
    }

    class m_adcl_352 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_adcl_352(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_adcw_424 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_adcw_424(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_adcl_353 extends InstructionWithAddress {
        private final int imm32;
        m_adcl_353(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcl(addressAsInt(), imm32);
        }
    }

    class m_adcw_425 extends InstructionWithAddress {
        private final short imm16;
        m_adcw_425(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_adcw(addressAsInt(), imm16);
        }
    }

    class m_add_47 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_add_47(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt());
        }
    }

    class m_add_46 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_add_46(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt(), index, scale);
        }
    }

    class m_add_39 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_add_39(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt());
        }
    }

    class m_add_38 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_add_38(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt(), index, scale);
        }
    }

    class m_add_31 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_add_31(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt());
        }
    }

    class m_add_30 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_add_30(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(destination, addressAsInt(), index, scale);
        }
    }

    class m_addb_273 extends InstructionWithAddress {
        private final byte imm8;
        m_addb_273(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addb(addressAsInt(), imm8);
        }
    }

    class m_addl_489 extends InstructionWithAddress {
        private final byte imm8;
        m_addl_489(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addl(addressAsInt(), imm8);
        }
    }

    class m_addw_561 extends InstructionWithAddress {
        private final byte imm8;
        m_addw_561(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addw(addressAsInt(), imm8);
        }
    }

    class m_add_22 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_add_22(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), source);
        }
    }

    class m_add_13 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_add_13(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), source);
        }
    }

    class m_add_4 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_add_4(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), source);
        }
    }

    class m_addb_272 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_addb_272(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_addl_488 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_addl_488(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_addw_560 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_addw_560(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_add_21 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_add_21(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), index, scale, source);
        }
    }

    class m_add_12 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_add_12(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), index, scale, source);
        }
    }

    class m_add_3 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_add_3(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_add(addressAsInt(), index, scale, source);
        }
    }

    class m_addl_344 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_addl_344(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_addw_416 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_addw_416(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_addl_345 extends InstructionWithAddress {
        private final int imm32;
        m_addl_345(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addl(addressAsInt(), imm32);
        }
    }

    class m_addw_417 extends InstructionWithAddress {
        private final short imm16;
        m_addw_417(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addw(addressAsInt(), imm16);
        }
    }

    class m_addpd_4445 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_addpd_4445(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addpd(destination, addressAsInt());
        }
    }

    class m_addpd_4444 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_addpd_4444(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_addps_4373 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_addps_4373(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addps(destination, addressAsInt());
        }
    }

    class m_addps_4372 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_addps_4372(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addps(destination, addressAsInt(), index, scale);
        }
    }

    class m_addsd_4517 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_addsd_4517(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addsd(destination, addressAsInt());
        }
    }

    class m_addsd_4516 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_addsd_4516(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_addss_4580 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_addss_4580(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addss(destination, addressAsInt());
        }
    }

    class m_addss_4579 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_addss_4579(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addss(destination, addressAsInt(), index, scale);
        }
    }

    class m_addsubpd_3751 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_addsubpd_3751(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addsubpd(destination, addressAsInt());
        }
    }

    class m_addsubpd_3750 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_addsubpd_3750(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_addsubpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_and_159 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_and_159(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt());
        }
    }

    class m_and_158 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_and_158(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt(), index, scale);
        }
    }

    class m_and_151 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_and_151(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt());
        }
    }

    class m_and_150 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_and_150(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt(), index, scale);
        }
    }

    class m_and_143 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_and_143(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt());
        }
    }

    class m_and_142 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_and_142(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(destination, addressAsInt(), index, scale);
        }
    }

    class m_andb_289 extends InstructionWithAddress {
        private final byte imm8;
        m_andb_289(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andb(addressAsInt(), imm8);
        }
    }

    class m_andl_505 extends InstructionWithAddress {
        private final byte imm8;
        m_andl_505(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andl(addressAsInt(), imm8);
        }
    }

    class m_andw_577 extends InstructionWithAddress {
        private final byte imm8;
        m_andw_577(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andw(addressAsInt(), imm8);
        }
    }

    class m_and_134 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_and_134(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), source);
        }
    }

    class m_and_125 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_and_125(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), source);
        }
    }

    class m_and_116 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_and_116(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), source);
        }
    }

    class m_andb_288 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_andb_288(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_andl_504 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_andl_504(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_andw_576 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_andw_576(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_and_133 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_and_133(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), index, scale, source);
        }
    }

    class m_and_124 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_and_124(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), index, scale, source);
        }
    }

    class m_and_115 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_and_115(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_and(addressAsInt(), index, scale, source);
        }
    }

    class m_andl_360 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_andl_360(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_andw_432 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_andw_432(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_andl_361 extends InstructionWithAddress {
        private final int imm32;
        m_andl_361(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andl(addressAsInt(), imm32);
        }
    }

    class m_andw_433 extends InstructionWithAddress {
        private final short imm16;
        m_andw_433(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andw(addressAsInt(), imm16);
        }
    }

    class m_andnpd_3067 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_andnpd_3067(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andnpd(destination, addressAsInt());
        }
    }

    class m_andnpd_3066 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_andnpd_3066(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andnpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_andnps_3021 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_andnps_3021(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andnps(destination, addressAsInt());
        }
    }

    class m_andnps_3020 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_andnps_3020(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andnps(destination, addressAsInt(), index, scale);
        }
    }

    class m_andpd_3058 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_andpd_3058(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andpd(destination, addressAsInt());
        }
    }

    class m_andpd_3057 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_andpd_3057(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_andps_3012 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_andps_3012(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andps(destination, addressAsInt());
        }
    }

    class m_andps_3011 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_andps_3011(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_andps(destination, addressAsInt(), index, scale);
        }
    }

    class m_arpl_252 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_arpl_252(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_arpl(addressAsInt(), source);
        }
    }

    class m_arpl_251 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_arpl_251(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_arpl(addressAsInt(), index, scale, source);
        }
    }

    class m_bound_244 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_bound_244(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bound(destination, addressAsInt());
        }
    }

    class m_bound_243 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bound_243(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bound(destination, addressAsInt(), index, scale);
        }
    }

    class m_bound_236 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_bound_236(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bound(destination, addressAsInt());
        }
    }

    class m_bound_235 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bound_235(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bound(destination, addressAsInt(), index, scale);
        }
    }

    class m_bsf_5098 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_bsf_5098(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsf(destination, addressAsInt());
        }
    }

    class m_bsf_5097 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bsf_5097(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsf(destination, addressAsInt(), index, scale);
        }
    }

    class m_bsf_5089 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_bsf_5089(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsf(destination, addressAsInt());
        }
    }

    class m_bsf_5088 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bsf_5088(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsf(destination, addressAsInt(), index, scale);
        }
    }

    class m_bsr_5116 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_bsr_5116(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsr(destination, addressAsInt());
        }
    }

    class m_bsr_5115 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bsr_5115(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsr(destination, addressAsInt(), index, scale);
        }
    }

    class m_bsr_5107 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_bsr_5107(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsr(destination, addressAsInt());
        }
    }

    class m_bsr_5106 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_bsr_5106(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bsr(destination, addressAsInt(), index, scale);
        }
    }

    class m_bt_5031 extends InstructionWithAddress {
        private final byte imm8;
        m_bt_5031(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), imm8);
        }
    }

    class m_bt_3424 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_bt_3424(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), source);
        }
    }

    class m_bt_3415 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_bt_3415(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), source);
        }
    }

    class m_bt_5030 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_bt_5030(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), index, scale, imm8);
        }
    }

    class m_bt_3423 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_bt_3423(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), index, scale, source);
        }
    }

    class m_bt_3414 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_bt_3414(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bt(addressAsInt(), index, scale, source);
        }
    }

    class m_btc_5043 extends InstructionWithAddress {
        private final byte imm8;
        m_btc_5043(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), imm8);
        }
    }

    class m_btc_5080 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_btc_5080(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), source);
        }
    }

    class m_btc_5071 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_btc_5071(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), source);
        }
    }

    class m_btc_5042 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_btc_5042(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), index, scale, imm8);
        }
    }

    class m_btc_5079 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_btc_5079(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), index, scale, source);
        }
    }

    class m_btc_5070 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_btc_5070(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btc(addressAsInt(), index, scale, source);
        }
    }

    class m_btr_5039 extends InstructionWithAddress {
        private final byte imm8;
        m_btr_5039(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), imm8);
        }
    }

    class m_btr_3521 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_btr_3521(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), source);
        }
    }

    class m_btr_3512 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_btr_3512(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), source);
        }
    }

    class m_btr_5038 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_btr_5038(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), index, scale, imm8);
        }
    }

    class m_btr_3520 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_btr_3520(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), index, scale, source);
        }
    }

    class m_btr_3511 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_btr_3511(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_btr(addressAsInt(), index, scale, source);
        }
    }

    class m_bts_5035 extends InstructionWithAddress {
        private final byte imm8;
        m_bts_5035(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), imm8);
        }
    }

    class m_bts_4965 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_bts_4965(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), source);
        }
    }

    class m_bts_4956 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_bts_4956(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), source);
        }
    }

    class m_bts_5034 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_bts_5034(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), index, scale, imm8);
        }
    }

    class m_bts_4964 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_bts_4964(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), index, scale, source);
        }
    }

    class m_bts_4955 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_bts_4955(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_bts(addressAsInt(), index, scale, source);
        }
    }

    class m_call_1913 extends InstructionWithAddress {
        m_call_1913(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_call(addressAsInt());
        }
    }

    class call_2399 extends InstructionWithOffset {
        call_2399(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 2 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 2) {
                call(offsetAsShort());
            } else if (labelSize == 4) {
                call(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class m_call_2444 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_call_2444(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_call(addressAsInt(), index, scale);
        }
    }

    class m_cmova_2975 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmova_2975(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmova(destination, addressAsInt());
        }
    }

    class m_cmova_2974 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmova_2974(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmova(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmova_2966 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmova_2966(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmova(destination, addressAsInt());
        }
    }

    class m_cmova_2965 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmova_2965(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmova(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovae_2903 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovae_2903(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovae(destination, addressAsInt());
        }
    }

    class m_cmovae_2902 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovae_2902(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovae(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovae_2894 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovae_2894(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovae(destination, addressAsInt());
        }
    }

    class m_cmovae_2893 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovae_2893(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovae(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovb_2885 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovb_2885(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovb(destination, addressAsInt());
        }
    }

    class m_cmovb_2884 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovb_2884(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovb(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovb_2876 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovb_2876(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovb(destination, addressAsInt());
        }
    }

    class m_cmovb_2875 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovb_2875(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovb(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovbe_2957 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovbe_2957(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovbe(destination, addressAsInt());
        }
    }

    class m_cmovbe_2956 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovbe_2956(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovbe(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovbe_2948 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovbe_2948(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovbe(destination, addressAsInt());
        }
    }

    class m_cmovbe_2947 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovbe_2947(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovbe(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmove_2921 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmove_2921(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmove(destination, addressAsInt());
        }
    }

    class m_cmove_2920 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmove_2920(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmove(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmove_2912 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmove_2912(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmove(destination, addressAsInt());
        }
    }

    class m_cmove_2911 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmove_2911(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmove(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovg_4364 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovg_4364(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovg(destination, addressAsInt());
        }
    }

    class m_cmovg_4363 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovg_4363(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovg(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovg_4355 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovg_4355(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovg(destination, addressAsInt());
        }
    }

    class m_cmovg_4354 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovg_4354(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovg(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovge_4328 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovge_4328(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovge(destination, addressAsInt());
        }
    }

    class m_cmovge_4327 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovge_4327(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovge(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovge_4319 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovge_4319(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovge(destination, addressAsInt());
        }
    }

    class m_cmovge_4318 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovge_4318(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovge(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovl_4310 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovl_4310(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovl(destination, addressAsInt());
        }
    }

    class m_cmovl_4309 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovl_4309(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovl(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovl_4301 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovl_4301(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovl(destination, addressAsInt());
        }
    }

    class m_cmovl_4300 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovl_4300(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovl(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovle_4346 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovle_4346(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovle(destination, addressAsInt());
        }
    }

    class m_cmovle_4345 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovle_4345(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovle(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovle_4337 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovle_4337(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovle(destination, addressAsInt());
        }
    }

    class m_cmovle_4336 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovle_4336(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovle(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovne_2939 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovne_2939(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovne(destination, addressAsInt());
        }
    }

    class m_cmovne_2938 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovne_2938(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovne(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovne_2930 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovne_2930(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovne(destination, addressAsInt());
        }
    }

    class m_cmovne_2929 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovne_2929(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovne(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovno_2867 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovno_2867(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovno(destination, addressAsInt());
        }
    }

    class m_cmovno_2866 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovno_2866(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovno(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovno_2858 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovno_2858(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovno(destination, addressAsInt());
        }
    }

    class m_cmovno_2857 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovno_2857(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovno(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovnp_4292 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovnp_4292(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovnp(destination, addressAsInt());
        }
    }

    class m_cmovnp_4291 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovnp_4291(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovnp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovnp_4283 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovnp_4283(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovnp(destination, addressAsInt());
        }
    }

    class m_cmovnp_4282 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovnp_4282(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovnp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovns_4256 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovns_4256(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovns(destination, addressAsInt());
        }
    }

    class m_cmovns_4255 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovns_4255(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovns(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovns_4247 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovns_4247(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovns(destination, addressAsInt());
        }
    }

    class m_cmovns_4246 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovns_4246(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovns(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovo_2849 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovo_2849(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovo(destination, addressAsInt());
        }
    }

    class m_cmovo_2848 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovo_2848(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovo(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovo_2840 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovo_2840(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovo(destination, addressAsInt());
        }
    }

    class m_cmovo_2839 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovo_2839(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovo(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovp_4274 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovp_4274(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovp(destination, addressAsInt());
        }
    }

    class m_cmovp_4273 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovp_4273(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovp_4265 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovp_4265(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovp(destination, addressAsInt());
        }
    }

    class m_cmovp_4264 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovp_4264(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovs_4238 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmovs_4238(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovs(destination, addressAsInt());
        }
    }

    class m_cmovs_4237 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovs_4237(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovs(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmovs_4229 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmovs_4229(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovs(destination, addressAsInt());
        }
    }

    class m_cmovs_4228 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmovs_4228(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmovs(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmp_1749 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_cmp_1749(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt());
        }
    }

    class m_cmp_1748 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmp_1748(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmp_1741 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cmp_1741(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt());
        }
    }

    class m_cmp_1740 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmp_1740(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmp_1733 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_cmp_1733(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt());
        }
    }

    class m_cmp_1732 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmp_1732(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(destination, addressAsInt(), index, scale);
        }
    }

    class m_cmpb_301 extends InstructionWithAddress {
        private final byte imm8;
        m_cmpb_301(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpb(addressAsInt(), imm8);
        }
    }

    class m_cmpl_517 extends InstructionWithAddress {
        private final byte imm8;
        m_cmpl_517(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpl(addressAsInt(), imm8);
        }
    }

    class m_cmpw_589 extends InstructionWithAddress {
        private final byte imm8;
        m_cmpw_589(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpw(addressAsInt(), imm8);
        }
    }

    class m_cmp_1724 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_cmp_1724(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), source);
        }
    }

    class m_cmp_1715 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_cmp_1715(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), source);
        }
    }

    class m_cmp_1706 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_cmp_1706(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), source);
        }
    }

    class m_cmpb_300 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_cmpb_300(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_cmpl_516 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_cmpl_516(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_cmpw_588 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_cmpw_588(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_cmp_1723 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_cmp_1723(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), index, scale, source);
        }
    }

    class m_cmp_1714 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_cmp_1714(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), index, scale, source);
        }
    }

    class m_cmp_1705 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_cmp_1705(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmp(addressAsInt(), index, scale, source);
        }
    }

    class m_cmpl_372 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_cmpl_372(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_cmpw_444 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_cmpw_444(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_cmpl_373 extends InstructionWithAddress {
        private final int imm32;
        m_cmpl_373(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpl(addressAsInt(), imm32);
        }
    }

    class m_cmpw_445 extends InstructionWithAddress {
        private final short imm16;
        m_cmpw_445(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpw(addressAsInt(), imm16);
        }
    }

    class m_cmppd_3668 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmppd_3668(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmppd(destination, addressAsInt(), index, scale, ia32xmmcomparison);
        }
    }

    class m_cmppd_3669 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmppd_3669(int startPosition, int endPosition, IA32XMMRegister destination, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmppd(destination, addressAsInt(), ia32xmmcomparison);
        }
    }

    class m_cmpps_3624 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpps_3624(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpps(destination, addressAsInt(), index, scale, ia32xmmcomparison);
        }
    }

    class m_cmpps_3625 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpps_3625(int startPosition, int endPosition, IA32XMMRegister destination, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpps(destination, addressAsInt(), ia32xmmcomparison);
        }
    }

    class m_cmpsd_3696 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpsd_3696(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpsd(destination, addressAsInt(), index, scale, ia32xmmcomparison);
        }
    }

    class m_cmpsd_3697 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpsd_3697(int startPosition, int endPosition, IA32XMMRegister destination, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpsd(destination, addressAsInt(), ia32xmmcomparison);
        }
    }

    class m_cmpss_3705 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpss_3705(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpss(destination, addressAsInt(), index, scale, ia32xmmcomparison);
        }
    }

    class m_cmpss_3706 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32XMMComparison ia32xmmcomparison;
        m_cmpss_3706(int startPosition, int endPosition, IA32XMMRegister destination, IA32XMMComparison ia32xmmcomparison, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.ia32xmmcomparison = ia32xmmcomparison;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpss(destination, addressAsInt(), ia32xmmcomparison);
        }
    }

    class m_cmpxchg_3487 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_cmpxchg_3487(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), source);
        }
    }

    class m_cmpxchg_3478 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_cmpxchg_3478(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), source);
        }
    }

    class m_cmpxchg_3469 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_cmpxchg_3469(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), source);
        }
    }

    class m_cmpxchg_3486 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_cmpxchg_3486(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), index, scale, source);
        }
    }

    class m_cmpxchg_3477 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_cmpxchg_3477(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), index, scale, source);
        }
    }

    class m_cmpxchg_3468 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_cmpxchg_3468(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg(addressAsInt(), index, scale, source);
        }
    }

    class m_cmpxchg8b_3661 extends InstructionWithAddress {
        m_cmpxchg8b_3661(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg8b(addressAsInt());
        }
    }

    class m_cmpxchg8b_3660 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cmpxchg8b_3660(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cmpxchg8b(addressAsInt(), index, scale);
        }
    }

    class m_comisd_4166 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_comisd_4166(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_comisd(destination, addressAsInt());
        }
    }

    class m_comisd_4165 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_comisd_4165(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_comisd(destination, addressAsInt(), index, scale);
        }
    }

    class m_comiss_4096 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_comiss_4096(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_comiss(destination, addressAsInt());
        }
    }

    class m_comiss_4095 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_comiss_4095(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_comiss(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtdq2pd_3924 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtdq2pd_3924(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtdq2pd(destination, addressAsInt());
        }
    }

    class m_cvtdq2pd_3923 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtdq2pd_3923(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtdq2pd(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtdq2ps_4400 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtdq2ps_4400(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtdq2ps(destination, addressAsInt());
        }
    }

    class m_cvtdq2ps_4399 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtdq2ps_4399(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtdq2ps(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtpd2dq_3915 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtpd2dq_3915(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2dq(destination, addressAsInt());
        }
    }

    class m_cvtpd2dq_3914 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtpd2dq_3914(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2dq(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtpd2pi_4148 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_cvtpd2pi_4148(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2pi(destination, addressAsInt());
        }
    }

    class m_cvtpd2pi_4147 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtpd2pi_4147(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2pi(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtpd2ps_4463 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtpd2ps_4463(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2ps(destination, addressAsInt());
        }
    }

    class m_cvtpd2ps_4462 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtpd2ps_4462(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpd2ps(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtpi2pd_4122 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtpi2pd_4122(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpi2pd(destination, addressAsInt());
        }
    }

    class m_cvtpi2pd_4121 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtpi2pd_4121(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpi2pd(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtpi2ps_4052 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtpi2ps_4052(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpi2ps(destination, addressAsInt());
        }
    }

    class m_cvtpi2ps_4051 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtpi2ps_4051(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtpi2ps(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtps2dq_4472 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtps2dq_4472(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2dq(destination, addressAsInt());
        }
    }

    class m_cvtps2dq_4471 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtps2dq_4471(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2dq(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtps2pd_4391 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtps2pd_4391(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2pd(destination, addressAsInt());
        }
    }

    class m_cvtps2pd_4390 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtps2pd_4390(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2pd(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtps2pi_4078 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_cvtps2pi_4078(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2pi(destination, addressAsInt());
        }
    }

    class m_cvtps2pi_4077 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtps2pi_4077(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtps2pi(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtsd2si_4193 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cvtsd2si_4193(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsd2si(destination, addressAsInt());
        }
    }

    class m_cvtsd2si_4192 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtsd2si_4192(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsd2si(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtsd2ss_4535 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtsd2ss_4535(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsd2ss(destination, addressAsInt());
        }
    }

    class m_cvtsd2ss_4534 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtsd2ss_4534(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsd2ss(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtsi2sd_4175 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtsi2sd_4175(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsi2sd(destination, addressAsInt());
        }
    }

    class m_cvtsi2sd_4174 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtsi2sd_4174(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsi2sd(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtsi2ss_4202 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtsi2ss_4202(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsi2ss(destination, addressAsInt());
        }
    }

    class m_cvtsi2ss_4201 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtsi2ss_4201(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtsi2ss(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtss2sd_4598 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvtss2sd_4598(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtss2sd(destination, addressAsInt());
        }
    }

    class m_cvtss2sd_4597 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtss2sd_4597(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtss2sd(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvtss2si_4220 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cvtss2si_4220(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtss2si(destination, addressAsInt());
        }
    }

    class m_cvtss2si_4219 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvtss2si_4219(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvtss2si(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttpd2dq_3898 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvttpd2dq_3898(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttpd2dq(destination, addressAsInt());
        }
    }

    class m_cvttpd2dq_3897 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttpd2dq_3897(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttpd2dq(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttpd2pi_4139 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_cvttpd2pi_4139(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttpd2pi(destination, addressAsInt());
        }
    }

    class m_cvttpd2pi_4138 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttpd2pi_4138(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttpd2pi(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttps2dq_4607 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_cvttps2dq_4607(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttps2dq(destination, addressAsInt());
        }
    }

    class m_cvttps2dq_4606 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttps2dq_4606(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttps2dq(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttps2pi_4069 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_cvttps2pi_4069(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttps2pi(destination, addressAsInt());
        }
    }

    class m_cvttps2pi_4068 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttps2pi_4068(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttps2pi(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttsd2si_4184 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cvttsd2si_4184(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttsd2si(destination, addressAsInt());
        }
    }

    class m_cvttsd2si_4183 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttsd2si_4183(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttsd2si(destination, addressAsInt(), index, scale);
        }
    }

    class m_cvttss2si_4211 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_cvttss2si_4211(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttss2si(destination, addressAsInt());
        }
    }

    class m_cvttss2si_4210 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_cvttss2si_4210(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_cvttss2si(destination, addressAsInt(), index, scale);
        }
    }

    class m_decb_2423 extends InstructionWithAddress {
        m_decb_2423(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decb(addressAsInt());
        }
    }

    class m_decl_2441 extends InstructionWithAddress {
        m_decl_2441(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decl(addressAsInt());
        }
    }

    class m_decw_2483 extends InstructionWithAddress {
        m_decw_2483(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decw(addressAsInt());
        }
    }

    class m_decb_2422 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_decb_2422(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decb(addressAsInt(), index, scale);
        }
    }

    class m_decl_2440 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_decl_2440(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decl(addressAsInt(), index, scale);
        }
    }

    class m_decw_2482 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_decw_2482(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_decw(addressAsInt(), index, scale);
        }
    }

    class m_divb___AL_1370 extends InstructionWithAddress {
        m_divb___AL_1370(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divb___AL(addressAsInt());
        }
    }

    class m_divl___EAX_1433 extends InstructionWithAddress {
        m_divl___EAX_1433(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divl___EAX(addressAsInt());
        }
    }

    class m_divw___AX_1496 extends InstructionWithAddress {
        m_divw___AX_1496(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divw___AX(addressAsInt());
        }
    }

    class m_divb___AL_1369 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divb___AL_1369(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divb___AL(addressAsInt(), index, scale);
        }
    }

    class m_divl___EAX_1432 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divl___EAX_1432(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divl___EAX(addressAsInt(), index, scale);
        }
    }

    class m_divw___AX_1495 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divw___AX_1495(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divw___AX(addressAsInt(), index, scale);
        }
    }

    class m_divpd_4499 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_divpd_4499(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divpd(destination, addressAsInt());
        }
    }

    class m_divpd_4498 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divpd_4498(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_divps_4427 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_divps_4427(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divps(destination, addressAsInt());
        }
    }

    class m_divps_4426 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divps_4426(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divps(destination, addressAsInt(), index, scale);
        }
    }

    class m_divsd_4562 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_divsd_4562(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divsd(destination, addressAsInt());
        }
    }

    class m_divsd_4561 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divsd_4561(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_divss_4634 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_divss_4634(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divss(destination, addressAsInt());
        }
    }

    class m_divss_4633 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_divss_4633(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_divss(destination, addressAsInt(), index, scale);
        }
    }

    class m_fadds_1946 extends InstructionWithAddress {
        m_fadds_1946(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fadds(addressAsInt());
        }
    }

    class m_faddl_2170 extends InstructionWithAddress {
        m_faddl_2170(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_faddl(addressAsInt());
        }
    }

    class m_fadds_1945 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fadds_1945(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fadds(addressAsInt(), index, scale);
        }
    }

    class m_faddl_2169 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_faddl_2169(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_faddl(addressAsInt(), index, scale);
        }
    }

    class m_fbld_2358 extends InstructionWithAddress {
        m_fbld_2358(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fbld(addressAsInt());
        }
    }

    class m_fbld_2357 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fbld_2357(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fbld(addressAsInt(), index, scale);
        }
    }

    class m_fbstp_2366 extends InstructionWithAddress {
        m_fbstp_2366(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fbstp(addressAsInt());
        }
    }

    class m_fbstp_2365 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fbstp_2365(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fbstp(addressAsInt(), index, scale);
        }
    }

    class m_fcoms_1954 extends InstructionWithAddress {
        m_fcoms_1954(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcoms(addressAsInt());
        }
    }

    class m_fcoml_2178 extends InstructionWithAddress {
        m_fcoml_2178(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcoml(addressAsInt());
        }
    }

    class m_fcoms_1953 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fcoms_1953(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcoms(addressAsInt(), index, scale);
        }
    }

    class m_fcoml_2177 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fcoml_2177(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcoml(addressAsInt(), index, scale);
        }
    }

    class m_fcomps_1958 extends InstructionWithAddress {
        m_fcomps_1958(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcomps(addressAsInt());
        }
    }

    class m_fcompl_2182 extends InstructionWithAddress {
        m_fcompl_2182(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcompl(addressAsInt());
        }
    }

    class m_fcomps_1957 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fcomps_1957(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcomps(addressAsInt(), index, scale);
        }
    }

    class m_fcompl_2181 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fcompl_2181(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fcompl(addressAsInt(), index, scale);
        }
    }

    class m_fdivs_1970 extends InstructionWithAddress {
        m_fdivs_1970(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivs(addressAsInt());
        }
    }

    class m_fdivl_2194 extends InstructionWithAddress {
        m_fdivl_2194(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivl(addressAsInt());
        }
    }

    class m_fdivs_1969 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fdivs_1969(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivs(addressAsInt(), index, scale);
        }
    }

    class m_fdivl_2193 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fdivl_2193(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivl(addressAsInt(), index, scale);
        }
    }

    class m_fdivrs_1974 extends InstructionWithAddress {
        m_fdivrs_1974(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivrs(addressAsInt());
        }
    }

    class m_fdivrl_2198 extends InstructionWithAddress {
        m_fdivrl_2198(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivrl(addressAsInt());
        }
    }

    class m_fdivrs_1973 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fdivrs_1973(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivrs(addressAsInt(), index, scale);
        }
    }

    class m_fdivrl_2197 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fdivrl_2197(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fdivrl(addressAsInt(), index, scale);
        }
    }

    class m_fiaddl_2066 extends InstructionWithAddress {
        m_fiaddl_2066(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fiaddl(addressAsInt());
        }
    }

    class m_fiadds_2282 extends InstructionWithAddress {
        m_fiadds_2282(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fiadds(addressAsInt());
        }
    }

    class m_fiaddl_2065 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fiaddl_2065(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fiaddl(addressAsInt(), index, scale);
        }
    }

    class m_fiadds_2281 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fiadds_2281(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fiadds(addressAsInt(), index, scale);
        }
    }

    class m_ficoml_2074 extends InstructionWithAddress {
        m_ficoml_2074(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficoml(addressAsInt());
        }
    }

    class m_ficoms_2290 extends InstructionWithAddress {
        m_ficoms_2290(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficoms(addressAsInt());
        }
    }

    class m_ficoml_2073 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ficoml_2073(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficoml(addressAsInt(), index, scale);
        }
    }

    class m_ficoms_2289 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ficoms_2289(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficoms(addressAsInt(), index, scale);
        }
    }

    class m_ficompl_2078 extends InstructionWithAddress {
        m_ficompl_2078(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficompl(addressAsInt());
        }
    }

    class m_ficomps_2294 extends InstructionWithAddress {
        m_ficomps_2294(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficomps(addressAsInt());
        }
    }

    class m_ficompl_2077 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ficompl_2077(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficompl(addressAsInt(), index, scale);
        }
    }

    class m_ficomps_2293 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ficomps_2293(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ficomps(addressAsInt(), index, scale);
        }
    }

    class m_fidivl_2090 extends InstructionWithAddress {
        m_fidivl_2090(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivl(addressAsInt());
        }
    }

    class m_fidivs_2306 extends InstructionWithAddress {
        m_fidivs_2306(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivs(addressAsInt());
        }
    }

    class m_fidivl_2089 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fidivl_2089(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivl(addressAsInt(), index, scale);
        }
    }

    class m_fidivs_2305 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fidivs_2305(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivs(addressAsInt(), index, scale);
        }
    }

    class m_fidivrl_2094 extends InstructionWithAddress {
        m_fidivrl_2094(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivrl(addressAsInt());
        }
    }

    class m_fidivrs_2310 extends InstructionWithAddress {
        m_fidivrs_2310(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivrs(addressAsInt());
        }
    }

    class m_fidivrl_2093 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fidivrl_2093(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivrl(addressAsInt(), index, scale);
        }
    }

    class m_fidivrs_2309 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fidivrs_2309(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fidivrs(addressAsInt(), index, scale);
        }
    }

    class m_fildl_2130 extends InstructionWithAddress {
        m_fildl_2130(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fildl(addressAsInt());
        }
    }

    class m_filds_2346 extends InstructionWithAddress {
        m_filds_2346(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_filds(addressAsInt());
        }
    }

    class m_fildq_2362 extends InstructionWithAddress {
        m_fildq_2362(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fildq(addressAsInt());
        }
    }

    class m_fildl_2129 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fildl_2129(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fildl(addressAsInt(), index, scale);
        }
    }

    class m_filds_2345 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_filds_2345(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_filds(addressAsInt(), index, scale);
        }
    }

    class m_fildq_2361 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fildq_2361(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fildq(addressAsInt(), index, scale);
        }
    }

    class m_fimull_2070 extends InstructionWithAddress {
        m_fimull_2070(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fimull(addressAsInt());
        }
    }

    class m_fimuls_2286 extends InstructionWithAddress {
        m_fimuls_2286(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fimuls(addressAsInt());
        }
    }

    class m_fimull_2069 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fimull_2069(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fimull(addressAsInt(), index, scale);
        }
    }

    class m_fimuls_2285 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fimuls_2285(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fimuls(addressAsInt(), index, scale);
        }
    }

    class m_fistl_2134 extends InstructionWithAddress {
        m_fistl_2134(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistl(addressAsInt());
        }
    }

    class m_fists_2350 extends InstructionWithAddress {
        m_fists_2350(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fists(addressAsInt());
        }
    }

    class m_fistl_2133 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fistl_2133(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistl(addressAsInt(), index, scale);
        }
    }

    class m_fists_2349 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fists_2349(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fists(addressAsInt(), index, scale);
        }
    }

    class m_fistpl_2138 extends InstructionWithAddress {
        m_fistpl_2138(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistpl(addressAsInt());
        }
    }

    class m_fistps_2354 extends InstructionWithAddress {
        m_fistps_2354(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistps(addressAsInt());
        }
    }

    class m_fistpq_2370 extends InstructionWithAddress {
        m_fistpq_2370(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistpq(addressAsInt());
        }
    }

    class m_fistpl_2137 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fistpl_2137(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistpl(addressAsInt(), index, scale);
        }
    }

    class m_fistps_2353 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fistps_2353(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistps(addressAsInt(), index, scale);
        }
    }

    class m_fistpq_2369 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fistpq_2369(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fistpq(addressAsInt(), index, scale);
        }
    }

    class m_fisubl_2082 extends InstructionWithAddress {
        m_fisubl_2082(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubl(addressAsInt());
        }
    }

    class m_fisubs_2298 extends InstructionWithAddress {
        m_fisubs_2298(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubs(addressAsInt());
        }
    }

    class m_fisubl_2081 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fisubl_2081(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubl(addressAsInt(), index, scale);
        }
    }

    class m_fisubs_2297 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fisubs_2297(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubs(addressAsInt(), index, scale);
        }
    }

    class m_fisubrl_2086 extends InstructionWithAddress {
        m_fisubrl_2086(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubrl(addressAsInt());
        }
    }

    class m_fisubrs_2302 extends InstructionWithAddress {
        m_fisubrs_2302(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubrs(addressAsInt());
        }
    }

    class m_fisubrl_2085 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fisubrl_2085(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubrl(addressAsInt(), index, scale);
        }
    }

    class m_fisubrs_2301 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fisubrs_2301(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fisubrs(addressAsInt(), index, scale);
        }
    }

    class m_flds_2010 extends InstructionWithAddress {
        m_flds_2010(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_flds(addressAsInt());
        }
    }

    class m_fldt_2142 extends InstructionWithAddress {
        m_fldt_2142(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldt(addressAsInt());
        }
    }

    class m_fldl_2234 extends InstructionWithAddress {
        m_fldl_2234(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldl(addressAsInt());
        }
    }

    class m_flds_2009 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_flds_2009(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_flds(addressAsInt(), index, scale);
        }
    }

    class m_fldt_2141 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fldt_2141(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldt(addressAsInt(), index, scale);
        }
    }

    class m_fldl_2233 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fldl_2233(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldl(addressAsInt(), index, scale);
        }
    }

    class m_fldcw_2026 extends InstructionWithAddress {
        m_fldcw_2026(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldcw(addressAsInt());
        }
    }

    class m_fldcw_2025 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fldcw_2025(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldcw(addressAsInt(), index, scale);
        }
    }

    class m_fldenv_2022 extends InstructionWithAddress {
        m_fldenv_2022(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldenv(addressAsInt());
        }
    }

    class m_fldenv_2021 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fldenv_2021(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fldenv(addressAsInt(), index, scale);
        }
    }

    class m_fmuls_1950 extends InstructionWithAddress {
        m_fmuls_1950(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fmuls(addressAsInt());
        }
    }

    class m_fmull_2174 extends InstructionWithAddress {
        m_fmull_2174(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fmull(addressAsInt());
        }
    }

    class m_fmuls_1949 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fmuls_1949(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fmuls(addressAsInt(), index, scale);
        }
    }

    class m_fmull_2173 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fmull_2173(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fmull(addressAsInt(), index, scale);
        }
    }

    class m_frstor_2246 extends InstructionWithAddress {
        m_frstor_2246(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_frstor(addressAsInt());
        }
    }

    class m_frstor_2245 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_frstor_2245(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_frstor(addressAsInt(), index, scale);
        }
    }

    class m_fsave_2250 extends InstructionWithAddress {
        m_fsave_2250(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsave(addressAsInt());
        }
    }

    class m_fsave_2249 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsave_2249(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsave(addressAsInt(), index, scale);
        }
    }

    class m_fsts_2014 extends InstructionWithAddress {
        m_fsts_2014(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsts(addressAsInt());
        }
    }

    class m_fstl_2238 extends InstructionWithAddress {
        m_fstl_2238(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstl(addressAsInt());
        }
    }

    class m_fsts_2013 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsts_2013(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsts(addressAsInt(), index, scale);
        }
    }

    class m_fstl_2237 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstl_2237(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstl(addressAsInt(), index, scale);
        }
    }

    class m_fstcw_2034 extends InstructionWithAddress {
        m_fstcw_2034(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstcw(addressAsInt());
        }
    }

    class m_fstcw_2033 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstcw_2033(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstcw(addressAsInt(), index, scale);
        }
    }

    class m_fstenv_2030 extends InstructionWithAddress {
        m_fstenv_2030(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstenv(addressAsInt());
        }
    }

    class m_fstenv_2029 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstenv_2029(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstenv(addressAsInt(), index, scale);
        }
    }

    class m_fstps_2018 extends InstructionWithAddress {
        m_fstps_2018(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstps(addressAsInt());
        }
    }

    class m_fstpt_2146 extends InstructionWithAddress {
        m_fstpt_2146(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstpt(addressAsInt());
        }
    }

    class m_fstpl_2242 extends InstructionWithAddress {
        m_fstpl_2242(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstpl(addressAsInt());
        }
    }

    class m_fstps_2017 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstps_2017(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstps(addressAsInt(), index, scale);
        }
    }

    class m_fstpt_2145 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstpt_2145(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstpt(addressAsInt(), index, scale);
        }
    }

    class m_fstpl_2241 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstpl_2241(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstpl(addressAsInt(), index, scale);
        }
    }

    class m_fstsw_2254 extends InstructionWithAddress {
        m_fstsw_2254(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstsw(addressAsInt());
        }
    }

    class m_fstsw_2253 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fstsw_2253(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fstsw(addressAsInt(), index, scale);
        }
    }

    class m_fsubs_1962 extends InstructionWithAddress {
        m_fsubs_1962(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubs(addressAsInt());
        }
    }

    class m_fsubl_2186 extends InstructionWithAddress {
        m_fsubl_2186(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubl(addressAsInt());
        }
    }

    class m_fsubs_1961 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsubs_1961(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubs(addressAsInt(), index, scale);
        }
    }

    class m_fsubl_2185 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsubl_2185(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubl(addressAsInt(), index, scale);
        }
    }

    class m_fsubrs_1966 extends InstructionWithAddress {
        m_fsubrs_1966(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubrs(addressAsInt());
        }
    }

    class m_fsubrl_2190 extends InstructionWithAddress {
        m_fsubrl_2190(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubrl(addressAsInt());
        }
    }

    class m_fsubrs_1965 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsubrs_1965(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubrs(addressAsInt(), index, scale);
        }
    }

    class m_fsubrl_2189 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_fsubrl_2189(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_fsubrl(addressAsInt(), index, scale);
        }
    }

    class m_haddpd_4804 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_haddpd_4804(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_haddpd(destination, addressAsInt());
        }
    }

    class m_haddpd_4803 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_haddpd_4803(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_haddpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_haddps_4839 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_haddps_4839(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_haddps(destination, addressAsInt());
        }
    }

    class m_haddps_4838 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_haddps_4838(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_haddps(destination, addressAsInt(), index, scale);
        }
    }

    class m_hsubpd_4813 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_hsubpd_4813(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_hsubpd(destination, addressAsInt());
        }
    }

    class m_hsubpd_4812 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_hsubpd_4812(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_hsubpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_hsubps_4848 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_hsubps_4848(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_hsubps(destination, addressAsInt());
        }
    }

    class m_hsubps_4847 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_hsubps_4847(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_hsubps(destination, addressAsInt(), index, scale);
        }
    }

    class m_idivb___AL_1374 extends InstructionWithAddress {
        m_idivb___AL_1374(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivb___AL(addressAsInt());
        }
    }

    class m_idivl___EAX_1437 extends InstructionWithAddress {
        m_idivl___EAX_1437(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivl___EAX(addressAsInt());
        }
    }

    class m_idivw___AX_1500 extends InstructionWithAddress {
        m_idivw___AX_1500(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivw___AX(addressAsInt());
        }
    }

    class m_idivb___AL_1373 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_idivb___AL_1373(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivb___AL(addressAsInt(), index, scale);
        }
    }

    class m_idivl___EAX_1436 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_idivl___EAX_1436(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivl___EAX(addressAsInt(), index, scale);
        }
    }

    class m_idivw___AX_1499 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_idivw___AX_1499(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_idivw___AX(addressAsInt(), index, scale);
        }
    }

    class m_imul_5022 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_imul_5022(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt());
        }
    }

    class m_imul_1796 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final byte imm8;
        m_imul_1796(int startPosition, int endPosition, IA32GeneralRegister16 destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), imm8);
        }
    }

    class m_imul_5021 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_imul_5021(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale);
        }
    }

    class m_imul_1795 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_imul_1795(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_imul_1776 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_imul_1776(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale, imm16);
        }
    }

    class m_imul_1777 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final short imm16;
        m_imul_1777(int startPosition, int endPosition, IA32GeneralRegister16 destination, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), imm16);
        }
    }

    class m_imul_5013 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_imul_5013(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt());
        }
    }

    class m_imul_1787 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final byte imm8;
        m_imul_1787(int startPosition, int endPosition, IA32GeneralRegister32 destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), imm8);
        }
    }

    class m_imul_5012 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_imul_5012(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale);
        }
    }

    class m_imul_1786 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_imul_1786(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_imul_1767 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_imul_1767(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), index, scale, imm32);
        }
    }

    class m_imul_1768 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final int imm32;
        m_imul_1768(int startPosition, int endPosition, IA32GeneralRegister32 destination, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imul(destination, addressAsInt(), imm32);
        }
    }

    class m_imulb___AL_1366 extends InstructionWithAddress {
        m_imulb___AL_1366(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imulb___AL(addressAsInt());
        }
    }

    class m_imull___EAX_1429 extends InstructionWithAddress {
        m_imull___EAX_1429(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imull___EAX(addressAsInt());
        }
    }

    class m_imulw___AX_1492 extends InstructionWithAddress {
        m_imulw___AX_1492(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imulw___AX(addressAsInt());
        }
    }

    class m_imulb___AL_1365 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_imulb___AL_1365(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imulb___AL(addressAsInt(), index, scale);
        }
    }

    class m_imull___EAX_1428 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_imull___EAX_1428(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imull___EAX(addressAsInt(), index, scale);
        }
    }

    class m_imulw___AX_1491 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_imulw___AX_1491(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_imulw___AX(addressAsInt(), index, scale);
        }
    }

    class m_incb_2419 extends InstructionWithAddress {
        m_incb_2419(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incb(addressAsInt());
        }
    }

    class m_incl_2437 extends InstructionWithAddress {
        m_incl_2437(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incl(addressAsInt());
        }
    }

    class m_incw_2479 extends InstructionWithAddress {
        m_incw_2479(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incw(addressAsInt());
        }
    }

    class m_incb_2418 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_incb_2418(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incb(addressAsInt(), index, scale);
        }
    }

    class m_incl_2436 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_incl_2436(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incl(addressAsInt(), index, scale);
        }
    }

    class m_incw_2478 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_incw_2478(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_incw(addressAsInt(), index, scale);
        }
    }

    class m_invlpg_2579 extends InstructionWithAddress {
        m_invlpg_2579(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_invlpg(addressAsInt());
        }
    }

    class m_invlpg_2578 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_invlpg_2578(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_invlpg(addressAsInt(), index, scale);
        }
    }

    class jb_264 extends InstructionWithOffset {
        jb_264(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jb(offsetAsByte());
            } else if (labelSize == 4) {
                jb(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jbe_268 extends InstructionWithOffset {
        jbe_268(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jbe(offsetAsByte());
            } else if (labelSize == 4) {
                jbe(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jecxz_1335 extends InstructionWithOffset {
        jecxz_1335(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1);
        }
        @Override
        protected void assemble() throws AssemblyException {
            jecxz(offsetAsByte());
        }
    }

    class jl_1812 extends InstructionWithOffset {
        jl_1812(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jl(offsetAsByte());
            } else if (labelSize == 4) {
                jl(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jle_1814 extends InstructionWithOffset {
        jle_1814(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jle(offsetAsByte());
            } else if (labelSize == 4) {
                jle(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jmp_2403 extends InstructionWithOffset {
        jmp_2403(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jmp(offsetAsByte());
            } else if (labelSize == 4) {
                jmp(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class m_jmp_2402 extends InstructionWithAddress {
        m_jmp_2402(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_jmp(addressAsInt());
        }
    }

    class m_jmp_2447 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_jmp_2447(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_jmp(addressAsInt(), index, scale);
        }
    }

    class jnb_265 extends InstructionWithOffset {
        jnb_265(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnb(offsetAsByte());
            } else if (labelSize == 4) {
                jnb(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jnbe_269 extends InstructionWithOffset {
        jnbe_269(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnbe(offsetAsByte());
            } else if (labelSize == 4) {
                jnbe(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jnl_1813 extends InstructionWithOffset {
        jnl_1813(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnl(offsetAsByte());
            } else if (labelSize == 4) {
                jnl(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jnle_1815 extends InstructionWithOffset {
        jnle_1815(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnle(offsetAsByte());
            } else if (labelSize == 4) {
                jnle(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jno_263 extends InstructionWithOffset {
        jno_263(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jno(offsetAsByte());
            } else if (labelSize == 4) {
                jno(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jnp_1811 extends InstructionWithOffset {
        jnp_1811(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnp(offsetAsByte());
            } else if (labelSize == 4) {
                jnp(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jns_1809 extends InstructionWithOffset {
        jns_1809(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jns(offsetAsByte());
            } else if (labelSize == 4) {
                jns(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jnz_267 extends InstructionWithOffset {
        jnz_267(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jnz(offsetAsByte());
            } else if (labelSize == 4) {
                jnz(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jo_262 extends InstructionWithOffset {
        jo_262(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jo(offsetAsByte());
            } else if (labelSize == 4) {
                jo(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jp_1810 extends InstructionWithOffset {
        jp_1810(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jp(offsetAsByte());
            } else if (labelSize == 4) {
                jp(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class js_1808 extends InstructionWithOffset {
        js_1808(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                js(offsetAsByte());
            } else if (labelSize == 4) {
                js(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class jz_266 extends InstructionWithOffset {
        jz_266(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1 | 4);
        }
        @Override
        protected void assemble() throws AssemblyException {
            final int labelSize = labelSize();
            if (labelSize == 1) {
                jz(offsetAsByte());
            } else if (labelSize == 4) {
                jz(offsetAsInt());
            } else {
                throw new AssemblyException("Unexpected label width: " + labelSize);
            }
        }
    }

    class m_lar_2623 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lar_2623(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lar(destination, addressAsInt());
        }
    }

    class m_lar_2622 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lar_2622(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lar(destination, addressAsInt(), index, scale);
        }
    }

    class m_lar_2614 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lar_2614(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lar(destination, addressAsInt());
        }
    }

    class m_lar_2613 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lar_2613(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lar(destination, addressAsInt(), index, scale);
        }
    }

    class m_lddqu_4024 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_lddqu_4024(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lddqu(destination, addressAsInt());
        }
    }

    class m_lddqu_4023 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lddqu_4023(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lddqu(destination, addressAsInt(), index, scale);
        }
    }

    class m_lds_918 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lds_918(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lds(destination, addressAsInt());
        }
    }

    class m_lds_917 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lds_917(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lds(destination, addressAsInt(), index, scale);
        }
    }

    class m_lds_910 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lds_910(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lds(destination, addressAsInt());
        }
    }

    class m_lds_909 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lds_909(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lds(destination, addressAsInt(), index, scale);
        }
    }

    class m_lea_1887 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lea_1887(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lea(destination, addressAsInt());
        }
    }

    class m_lea_1886 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lea_1886(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lea(destination, addressAsInt(), index, scale);
        }
    }

    class m_lea_1879 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lea_1879(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lea(destination, addressAsInt());
        }
    }

    class m_lea_1878 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lea_1878(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lea(destination, addressAsInt(), index, scale);
        }
    }

    class m_les_902 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_les_902(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_les(destination, addressAsInt());
        }
    }

    class m_les_901 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_les_901(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_les(destination, addressAsInt(), index, scale);
        }
    }

    class m_les_894 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_les_894(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_les(destination, addressAsInt());
        }
    }

    class m_les_893 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_les_893(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_les(destination, addressAsInt(), index, scale);
        }
    }

    class m_lfs_3538 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lfs_3538(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lfs(destination, addressAsInt());
        }
    }

    class m_lfs_3537 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lfs_3537(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lfs(destination, addressAsInt(), index, scale);
        }
    }

    class m_lfs_3530 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lfs_3530(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lfs(destination, addressAsInt());
        }
    }

    class m_lfs_3529 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lfs_3529(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lfs(destination, addressAsInt(), index, scale);
        }
    }

    class m_lgdt_2563 extends InstructionWithAddress {
        m_lgdt_2563(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgdt(addressAsInt());
        }
    }

    class m_lgdt_2562 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lgdt_2562(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgdt(addressAsInt(), index, scale);
        }
    }

    class m_lgs_3554 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lgs_3554(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgs(destination, addressAsInt());
        }
    }

    class m_lgs_3553 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lgs_3553(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgs(destination, addressAsInt(), index, scale);
        }
    }

    class m_lgs_3546 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lgs_3546(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgs(destination, addressAsInt());
        }
    }

    class m_lgs_3545 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lgs_3545(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lgs(destination, addressAsInt(), index, scale);
        }
    }

    class m_lidt_2567 extends InstructionWithAddress {
        m_lidt_2567(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lidt(addressAsInt());
        }
    }

    class m_lidt_2566 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lidt_2566(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lidt(addressAsInt(), index, scale);
        }
    }

    class m_lldt_2507 extends InstructionWithAddress {
        m_lldt_2507(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lldt(addressAsInt());
        }
    }

    class m_lldt_2506 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lldt_2506(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lldt(addressAsInt(), index, scale);
        }
    }

    class m_lmsw_2575 extends InstructionWithAddress {
        m_lmsw_2575(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lmsw(addressAsInt());
        }
    }

    class m_lmsw_2574 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lmsw_2574(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lmsw(addressAsInt(), index, scale);
        }
    }

    class loop_1334 extends InstructionWithOffset {
        loop_1334(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1);
        }
        @Override
        protected void assemble() throws AssemblyException {
            loop(offsetAsByte());
        }
    }

    class loope_1333 extends InstructionWithOffset {
        loope_1333(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1);
        }
        @Override
        protected void assemble() throws AssemblyException {
            loope(offsetAsByte());
        }
    }

    class loopne_1332 extends InstructionWithOffset {
        loopne_1332(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label, 1);
        }
        @Override
        protected void assemble() throws AssemblyException {
            loopne(offsetAsByte());
        }
    }

    class m_lsl_2641 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lsl_2641(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lsl(destination, addressAsInt());
        }
    }

    class m_lsl_2640 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lsl_2640(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lsl(destination, addressAsInt(), index, scale);
        }
    }

    class m_lsl_2632 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lsl_2632(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lsl(destination, addressAsInt());
        }
    }

    class m_lsl_2631 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lsl_2631(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lsl(destination, addressAsInt(), index, scale);
        }
    }

    class m_lss_3504 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_lss_3504(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lss(destination, addressAsInt());
        }
    }

    class m_lss_3503 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lss_3503(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lss(destination, addressAsInt(), index, scale);
        }
    }

    class m_lss_3496 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_lss_3496(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lss(destination, addressAsInt());
        }
    }

    class m_lss_3495 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_lss_3495(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_lss(destination, addressAsInt(), index, scale);
        }
    }

    class m_ltr_2511 extends InstructionWithAddress {
        m_ltr_2511(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ltr(addressAsInt());
        }
    }

    class m_ltr_2510 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ltr_2510(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ltr(addressAsInt(), index, scale);
        }
    }

    class m_maxpd_4508 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_maxpd_4508(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxpd(destination, addressAsInt());
        }
    }

    class m_maxpd_4507 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_maxpd_4507(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_maxps_4436 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_maxps_4436(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxps(destination, addressAsInt());
        }
    }

    class m_maxps_4435 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_maxps_4435(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxps(destination, addressAsInt(), index, scale);
        }
    }

    class m_maxsd_4571 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_maxsd_4571(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxsd(destination, addressAsInt());
        }
    }

    class m_maxsd_4570 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_maxsd_4570(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_maxss_4643 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_maxss_4643(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxss(destination, addressAsInt());
        }
    }

    class m_maxss_4642 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_maxss_4642(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_maxss(destination, addressAsInt(), index, scale);
        }
    }

    class m_minpd_4490 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_minpd_4490(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minpd(destination, addressAsInt());
        }
    }

    class m_minpd_4489 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_minpd_4489(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_minps_4418 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_minps_4418(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minps(destination, addressAsInt());
        }
    }

    class m_minps_4417 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_minps_4417(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minps(destination, addressAsInt(), index, scale);
        }
    }

    class m_minsd_4553 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_minsd_4553(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minsd(destination, addressAsInt());
        }
    }

    class m_minsd_4552 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_minsd_4552(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_minss_4625 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_minss_4625(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minss(destination, addressAsInt());
        }
    }

    class m_minss_4624 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_minss_4624(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_minss(destination, addressAsInt(), index, scale);
        }
    }

    class m_mov_1862 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_mov_1862(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt());
        }
    }

    class m_mov_1861 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mov_1861(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt(), index, scale);
        }
    }

    class m_mov_1854 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_mov_1854(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt());
        }
    }

    class m_mov_1853 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mov_1853(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt(), index, scale);
        }
    }

    class m_mov_1846 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_mov_1846(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt());
        }
    }

    class m_mov_1845 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mov_1845(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt(), index, scale);
        }
    }

    class m_mov_1895 extends InstructionWithAddress {
        private final SegmentRegister destination;
        m_mov_1895(int startPosition, int endPosition, SegmentRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt());
        }
    }

    class m_mov_1894 extends InstructionWithAddress {
        private final SegmentRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mov_1894(int startPosition, int endPosition, SegmentRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(destination, addressAsInt(), index, scale);
        }
    }

    class m_mov_AL_687 extends InstructionWithAddress {
        m_mov_AL_687(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov_AL(addressAsInt());
        }
    }

    class m_mov_EAX_688 extends InstructionWithAddress {
        m_mov_EAX_688(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov_EAX(addressAsInt());
        }
    }

    class m_mov_AX_689 extends InstructionWithAddress {
        m_mov_AX_689(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov_AX(addressAsInt());
        }
    }

    class m_mov___AL_690 extends InstructionWithAddress {
        m_mov___AL_690(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov___AL(addressAsInt());
        }
    }

    class m_mov___EAX_691 extends InstructionWithAddress {
        m_mov___EAX_691(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov___EAX(addressAsInt());
        }
    }

    class m_mov___AX_692 extends InstructionWithAddress {
        m_mov___AX_692(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov___AX(addressAsInt());
        }
    }

    class m_movb_926 extends InstructionWithAddress {
        private final byte imm8;
        m_movb_926(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movb(addressAsInt(), imm8);
        }
    }

    class m_mov_1837 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_mov_1837(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), source);
        }
    }

    class m_mov_1828 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_mov_1828(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), source);
        }
    }

    class m_mov_1819 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_mov_1819(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), source);
        }
    }

    class m_movb_925 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_movb_925(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_mov_1836 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_mov_1836(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), index, scale, source);
        }
    }

    class m_mov_1827 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_mov_1827(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), index, scale, source);
        }
    }

    class m_mov_1818 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_mov_1818(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), index, scale, source);
        }
    }

    class m_mov_1869 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final SegmentRegister source;
        m_mov_1869(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, SegmentRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), index, scale, source);
        }
    }

    class m_movl_934 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_movl_934(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_movw_943 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_movw_943(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_mov_1870 extends InstructionWithAddress {
        private final SegmentRegister source;
        m_mov_1870(int startPosition, int endPosition, SegmentRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mov(addressAsInt(), source);
        }
    }

    class m_movl_935 extends InstructionWithAddress {
        private final int imm32;
        m_movl_935(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movl(addressAsInt(), imm32);
        }
    }

    class m_movw_944 extends InstructionWithAddress {
        private final short imm16;
        m_movw_944(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movw(addressAsInt(), imm16);
        }
    }

    class m_movapd_4105 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movapd_4105(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movapd(destination, addressAsInt());
        }
    }

    class m_movapd_4104 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movapd_4104(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movapd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movapd_4113 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movapd_4113(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movapd(addressAsInt(), index, scale, source);
        }
    }

    class m_movapd_4114 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movapd_4114(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movapd(addressAsInt(), source);
        }
    }

    class m_movaps_4035 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movaps_4035(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movaps(destination, addressAsInt());
        }
    }

    class m_movaps_4034 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movaps_4034(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movaps(destination, addressAsInt(), index, scale);
        }
    }

    class m_movaps_4043 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movaps_4043(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movaps(addressAsInt(), index, scale, source);
        }
    }

    class m_movaps_4044 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movaps_4044(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movaps(addressAsInt(), source);
        }
    }

    class m_movd_4760 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movd_4760(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(destination, addressAsInt());
        }
    }

    class m_movd_4759 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movd_4759(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movd_4688 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_movd_4688(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(destination, addressAsInt());
        }
    }

    class m_movd_4687 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movd_4687(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movd_4821 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movd_4821(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(addressAsInt(), index, scale, source);
        }
    }

    class m_movd_4786 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final MMXRegister source;
        m_movd_4786(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, MMXRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(addressAsInt(), index, scale, source);
        }
    }

    class m_movd_4822 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movd_4822(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(addressAsInt(), source);
        }
    }

    class m_movd_4787 extends InstructionWithAddress {
        private final MMXRegister source;
        m_movd_4787(int startPosition, int endPosition, MMXRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movd(addressAsInt(), source);
        }
    }

    class m_movddup_2788 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movddup_2788(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movddup(destination, addressAsInt());
        }
    }

    class m_movddup_2787 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movddup_2787(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movddup(destination, addressAsInt(), index, scale);
        }
    }

    class m_movdqa_4769 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movdqa_4769(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqa(destination, addressAsInt());
        }
    }

    class m_movdqa_4768 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movdqa_4768(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqa(destination, addressAsInt(), index, scale);
        }
    }

    class m_movdqa_4830 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movdqa_4830(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqa(addressAsInt(), index, scale, source);
        }
    }

    class m_movdqa_4831 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movdqa_4831(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqa(addressAsInt(), source);
        }
    }

    class m_movdqu_4778 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movdqu_4778(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqu(destination, addressAsInt());
        }
    }

    class m_movdqu_4777 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movdqu_4777(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqu(destination, addressAsInt(), index, scale);
        }
    }

    class m_movdqu_4864 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movdqu_4864(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqu(addressAsInt(), index, scale, source);
        }
    }

    class m_movdqu_4865 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movdqu_4865(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movdqu(addressAsInt(), source);
        }
    }

    class m_movhpd_2755 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movhpd_2755(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhpd(destination, addressAsInt());
        }
    }

    class m_movhpd_2754 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movhpd_2754(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movhpd_2762 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movhpd_2762(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhpd(addressAsInt(), index, scale, source);
        }
    }

    class m_movhpd_2763 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movhpd_2763(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhpd(addressAsInt(), source);
        }
    }

    class m_movhps_2695 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movhps_2695(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhps(addressAsInt(), index, scale, source);
        }
    }

    class m_movhps_2696 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movhps_2696(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movhps(addressAsInt(), source);
        }
    }

    class m_movlpd_2721 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movlpd_2721(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlpd(destination, addressAsInt());
        }
    }

    class m_movlpd_2720 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movlpd_2720(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movlpd_2728 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movlpd_2728(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlpd(addressAsInt(), index, scale, source);
        }
    }

    class m_movlpd_2729 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movlpd_2729(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlpd(addressAsInt(), source);
        }
    }

    class m_movlps_2668 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movlps_2668(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlps(addressAsInt(), index, scale, source);
        }
    }

    class m_movlps_2669 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movlps_2669(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movlps(addressAsInt(), source);
        }
    }

    class m_movnti_3634 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_movnti_3634(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movnti(addressAsInt(), source);
        }
    }

    class m_movnti_3633 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_movnti_3633(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movnti(addressAsInt(), index, scale, source);
        }
    }

    class m_movntpd_4130 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movntpd_4130(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movntpd(addressAsInt(), index, scale, source);
        }
    }

    class m_movntpd_4131 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movntpd_4131(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movntpd(addressAsInt(), source);
        }
    }

    class m_movntps_4060 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movntps_4060(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movntps(addressAsInt(), index, scale, source);
        }
    }

    class m_movntps_4061 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movntps_4061(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movntps(addressAsInt(), source);
        }
    }

    class m_movq_4857 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movq_4857(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(destination, addressAsInt());
        }
    }

    class m_movq_4856 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movq_4856(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(destination, addressAsInt(), index, scale);
        }
    }

    class m_movq_4697 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_movq_4697(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(destination, addressAsInt());
        }
    }

    class m_movq_4696 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movq_4696(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(destination, addressAsInt(), index, scale);
        }
    }

    class m_movq_3804 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movq_3804(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(addressAsInt(), index, scale, source);
        }
    }

    class m_movq_4795 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final MMXRegister source;
        m_movq_4795(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, MMXRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(addressAsInt(), index, scale, source);
        }
    }

    class m_movq_3805 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movq_3805(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(addressAsInt(), source);
        }
    }

    class m_movq_4796 extends InstructionWithAddress {
        private final MMXRegister source;
        m_movq_4796(int startPosition, int endPosition, MMXRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movq(addressAsInt(), source);
        }
    }

    class m_movsd_2771 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movsd_2771(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsd(destination, addressAsInt());
        }
    }

    class m_movsd_2770 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsd_2770(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movsd_2779 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movsd_2779(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsd(addressAsInt(), index, scale, source);
        }
    }

    class m_movsd_2780 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movsd_2780(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsd(addressAsInt(), source);
        }
    }

    class m_movshdup_2823 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movshdup_2823(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movshdup(destination, addressAsInt());
        }
    }

    class m_movshdup_2822 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movshdup_2822(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movshdup(destination, addressAsInt(), index, scale);
        }
    }

    class m_movsldup_2814 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movsldup_2814(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsldup(destination, addressAsInt());
        }
    }

    class m_movsldup_2813 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsldup_2813(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsldup(destination, addressAsInt(), index, scale);
        }
    }

    class m_movss_2797 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movss_2797(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movss(destination, addressAsInt());
        }
    }

    class m_movss_2796 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movss_2796(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movss(destination, addressAsInt(), index, scale);
        }
    }

    class m_movss_2805 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movss_2805(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movss(addressAsInt(), index, scale, source);
        }
    }

    class m_movss_2806 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movss_2806(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movss(addressAsInt(), source);
        }
    }

    class m_movsxb_5134 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_movsxb_5134(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxb(destination, addressAsInt());
        }
    }

    class m_movsxb_5133 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsxb_5133(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxb(destination, addressAsInt(), index, scale);
        }
    }

    class m_movsxb_5125 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_movsxb_5125(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxb(destination, addressAsInt());
        }
    }

    class m_movsxb_5124 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsxb_5124(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxb(destination, addressAsInt(), index, scale);
        }
    }

    class m_movsxw_5152 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_movsxw_5152(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxw(destination, addressAsInt());
        }
    }

    class m_movsxw_5151 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsxw_5151(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxw(destination, addressAsInt(), index, scale);
        }
    }

    class m_movsxw_5143 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_movsxw_5143(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxw(destination, addressAsInt());
        }
    }

    class m_movsxw_5142 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movsxw_5142(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movsxw(destination, addressAsInt(), index, scale);
        }
    }

    class m_movupd_2704 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movupd_2704(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movupd(destination, addressAsInt());
        }
    }

    class m_movupd_2703 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movupd_2703(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movupd(destination, addressAsInt(), index, scale);
        }
    }

    class m_movupd_2712 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movupd_2712(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movupd(addressAsInt(), index, scale, source);
        }
    }

    class m_movupd_2713 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movupd_2713(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movupd(addressAsInt(), source);
        }
    }

    class m_movups_2651 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_movups_2651(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movups(destination, addressAsInt());
        }
    }

    class m_movups_2650 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movups_2650(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movups(destination, addressAsInt(), index, scale);
        }
    }

    class m_movups_2659 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_movups_2659(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movups(addressAsInt(), index, scale, source);
        }
    }

    class m_movups_2660 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_movups_2660(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movups(addressAsInt(), source);
        }
    }

    class m_movzxb_3571 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_movzxb_3571(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxb(destination, addressAsInt());
        }
    }

    class m_movzxb_3570 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movzxb_3570(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxb(destination, addressAsInt(), index, scale);
        }
    }

    class m_movzxb_3562 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_movzxb_3562(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxb(destination, addressAsInt());
        }
    }

    class m_movzxb_3561 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movzxb_3561(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxb(destination, addressAsInt(), index, scale);
        }
    }

    class m_movzxw_3589 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_movzxw_3589(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxw(destination, addressAsInt());
        }
    }

    class m_movzxw_3588 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movzxw_3588(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxw(destination, addressAsInt(), index, scale);
        }
    }

    class m_movzxw_3580 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_movzxw_3580(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxw(destination, addressAsInt());
        }
    }

    class m_movzxw_3579 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_movzxw_3579(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_movzxw(destination, addressAsInt(), index, scale);
        }
    }

    class m_mulb___AL_1362 extends InstructionWithAddress {
        m_mulb___AL_1362(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulb___AL(addressAsInt());
        }
    }

    class m_mull___EAX_1425 extends InstructionWithAddress {
        m_mull___EAX_1425(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mull___EAX(addressAsInt());
        }
    }

    class m_mulw___AX_1488 extends InstructionWithAddress {
        m_mulw___AX_1488(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulw___AX(addressAsInt());
        }
    }

    class m_mulb___AL_1361 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulb___AL_1361(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulb___AL(addressAsInt(), index, scale);
        }
    }

    class m_mull___EAX_1424 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mull___EAX_1424(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mull___EAX(addressAsInt(), index, scale);
        }
    }

    class m_mulw___AX_1487 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulw___AX_1487(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulw___AX(addressAsInt(), index, scale);
        }
    }

    class m_mulpd_4454 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_mulpd_4454(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulpd(destination, addressAsInt());
        }
    }

    class m_mulpd_4453 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulpd_4453(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_mulps_4382 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_mulps_4382(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulps(destination, addressAsInt());
        }
    }

    class m_mulps_4381 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulps_4381(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulps(destination, addressAsInt(), index, scale);
        }
    }

    class m_mulsd_4526 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_mulsd_4526(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulsd(destination, addressAsInt());
        }
    }

    class m_mulsd_4525 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulsd_4525(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_mulss_4589 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_mulss_4589(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulss(destination, addressAsInt());
        }
    }

    class m_mulss_4588 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_mulss_4588(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mulss(destination, addressAsInt(), index, scale);
        }
    }

    class m_mvntdq_3906 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32XMMRegister source;
        m_mvntdq_3906(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mvntdq(addressAsInt(), index, scale, source);
        }
    }

    class m_mvntdq_3907 extends InstructionWithAddress {
        private final IA32XMMRegister source;
        m_mvntdq_3907(int startPosition, int endPosition, IA32XMMRegister source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_mvntdq(addressAsInt(), source);
        }
    }

    class m_negb_1358 extends InstructionWithAddress {
        m_negb_1358(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negb(addressAsInt());
        }
    }

    class m_negl_1421 extends InstructionWithAddress {
        m_negl_1421(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negl(addressAsInt());
        }
    }

    class m_negw_1484 extends InstructionWithAddress {
        m_negw_1484(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negw(addressAsInt());
        }
    }

    class m_negb_1357 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_negb_1357(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negb(addressAsInt(), index, scale);
        }
    }

    class m_negl_1420 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_negl_1420(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negl(addressAsInt(), index, scale);
        }
    }

    class m_negw_1483 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_negw_1483(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_negw(addressAsInt(), index, scale);
        }
    }

    class m_notb_1354 extends InstructionWithAddress {
        m_notb_1354(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notb(addressAsInt());
        }
    }

    class m_notl_1417 extends InstructionWithAddress {
        m_notl_1417(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notl(addressAsInt());
        }
    }

    class m_notw_1480 extends InstructionWithAddress {
        m_notw_1480(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notw(addressAsInt());
        }
    }

    class m_notb_1353 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_notb_1353(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notb(addressAsInt(), index, scale);
        }
    }

    class m_notl_1416 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_notl_1416(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notl(addressAsInt(), index, scale);
        }
    }

    class m_notw_1479 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_notw_1479(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_notw(addressAsInt(), index, scale);
        }
    }

    class m_or_1582 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_or_1582(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt());
        }
    }

    class m_or_1581 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_or_1581(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt(), index, scale);
        }
    }

    class m_or_1574 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_or_1574(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt());
        }
    }

    class m_or_1573 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_or_1573(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt(), index, scale);
        }
    }

    class m_or_1566 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_or_1566(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt());
        }
    }

    class m_or_1565 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_or_1565(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(destination, addressAsInt(), index, scale);
        }
    }

    class m_orb_277 extends InstructionWithAddress {
        private final byte imm8;
        m_orb_277(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orb(addressAsInt(), imm8);
        }
    }

    class m_orl_493 extends InstructionWithAddress {
        private final byte imm8;
        m_orl_493(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orl(addressAsInt(), imm8);
        }
    }

    class m_orw_565 extends InstructionWithAddress {
        private final byte imm8;
        m_orw_565(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orw(addressAsInt(), imm8);
        }
    }

    class m_or_1557 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_or_1557(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), source);
        }
    }

    class m_or_1548 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_or_1548(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), source);
        }
    }

    class m_or_1539 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_or_1539(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), source);
        }
    }

    class m_orb_276 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_orb_276(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_orl_492 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_orl_492(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_orw_564 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_orw_564(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_or_1556 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_or_1556(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), index, scale, source);
        }
    }

    class m_or_1547 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_or_1547(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), index, scale, source);
        }
    }

    class m_or_1538 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_or_1538(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_or(addressAsInt(), index, scale, source);
        }
    }

    class m_orl_348 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_orl_348(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_orw_420 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_orw_420(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_orl_349 extends InstructionWithAddress {
        private final int imm32;
        m_orl_349(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orl(addressAsInt(), imm32);
        }
    }

    class m_orw_421 extends InstructionWithAddress {
        private final short imm16;
        m_orw_421(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orw(addressAsInt(), imm16);
        }
    }

    class m_orpd_3076 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_orpd_3076(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orpd(destination, addressAsInt());
        }
    }

    class m_orpd_3075 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_orpd_3075(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_orps_3030 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_orps_3030(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orps(destination, addressAsInt());
        }
    }

    class m_orps_3029 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_orps_3029(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_orps(destination, addressAsInt(), index, scale);
        }
    }

    class m_packssdw_4733 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_packssdw_4733(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packssdw(destination, addressAsInt());
        }
    }

    class m_packssdw_4732 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packssdw_4732(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packssdw(destination, addressAsInt(), index, scale);
        }
    }

    class m_packssdw_4679 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_packssdw_4679(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packssdw(destination, addressAsInt());
        }
    }

    class m_packssdw_4678 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packssdw_4678(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packssdw(destination, addressAsInt(), index, scale);
        }
    }

    class m_packsswb_3274 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_packsswb_3274(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packsswb(destination, addressAsInt());
        }
    }

    class m_packsswb_3273 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packsswb_3273(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packsswb(destination, addressAsInt(), index, scale);
        }
    }

    class m_packsswb_3157 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_packsswb_3157(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packsswb(destination, addressAsInt());
        }
    }

    class m_packsswb_3156 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packsswb_3156(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packsswb(destination, addressAsInt(), index, scale);
        }
    }

    class m_packuswb_3310 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_packuswb_3310(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packuswb(destination, addressAsInt());
        }
    }

    class m_packuswb_3309 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packuswb_3309(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packuswb(destination, addressAsInt(), index, scale);
        }
    }

    class m_packuswb_3193 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_packuswb_3193(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packuswb(destination, addressAsInt());
        }
    }

    class m_packuswb_3192 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_packuswb_3192(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_packuswb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddb_5504 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddb_5504(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddb(destination, addressAsInt());
        }
    }

    class m_paddb_5503 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddb_5503(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddb_5441 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddb_5441(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddb(destination, addressAsInt());
        }
    }

    class m_paddb_5440 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddb_5440(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddd_5522 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddd_5522(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddd(destination, addressAsInt());
        }
    }

    class m_paddd_5521 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddd_5521(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddd(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddd_5459 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddd_5459(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddd(destination, addressAsInt());
        }
    }

    class m_paddd_5458 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddd_5458(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddd(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddq_3787 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddq_3787(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddq(destination, addressAsInt());
        }
    }

    class m_paddq_3786 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddq_3786(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddq(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddsb_5378 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddsb_5378(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsb(destination, addressAsInt());
        }
    }

    class m_paddsb_5377 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddsb_5377(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddsb_5315 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddsb_5315(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsb(destination, addressAsInt());
        }
    }

    class m_paddsb_5314 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddsb_5314(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddsw_5387 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddsw_5387(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsw(destination, addressAsInt());
        }
    }

    class m_paddsw_5386 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddsw_5386(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddsw_5324 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddsw_5324(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsw(destination, addressAsInt());
        }
    }

    class m_paddsw_5323 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddsw_5323(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddusb_5252 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddusb_5252(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusb(destination, addressAsInt());
        }
    }

    class m_paddusb_5251 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddusb_5251(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddusb_5189 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddusb_5189(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusb(destination, addressAsInt());
        }
    }

    class m_paddusb_5188 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddusb_5188(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusb(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddusw_5261 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddusw_5261(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusw(destination, addressAsInt());
        }
    }

    class m_paddusw_5260 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddusw_5260(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusw(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddusw_5198 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddusw_5198(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusw(destination, addressAsInt());
        }
    }

    class m_paddusw_5197 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddusw_5197(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddusw(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddw_5513 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_paddw_5513(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddw(destination, addressAsInt());
        }
    }

    class m_paddw_5512 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddw_5512(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddw(destination, addressAsInt(), index, scale);
        }
    }

    class m_paddw_5450 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_paddw_5450(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddw(destination, addressAsInt());
        }
    }

    class m_paddw_5449 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_paddw_5449(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_paddw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pand_5243 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pand_5243(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pand(destination, addressAsInt());
        }
    }

    class m_pand_5242 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pand_5242(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pand(destination, addressAsInt(), index, scale);
        }
    }

    class m_pand_5180 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pand_5180(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pand(destination, addressAsInt());
        }
    }

    class m_pand_5179 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pand_5179(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pand(destination, addressAsInt(), index, scale);
        }
    }

    class m_pandn_5279 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pandn_5279(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pandn(destination, addressAsInt());
        }
    }

    class m_pandn_5278 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pandn_5278(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pandn(destination, addressAsInt(), index, scale);
        }
    }

    class m_pandn_5207 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pandn_5207(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pandn(destination, addressAsInt());
        }
    }

    class m_pandn_5206 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pandn_5206(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pandn(destination, addressAsInt(), index, scale);
        }
    }

    class m_pavgb_3844 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pavgb_3844(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pavgb(destination, addressAsInt());
        }
    }

    class m_pavgb_3843 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pavgb_3843(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pavgb(destination, addressAsInt(), index, scale);
        }
    }

    class m_pavgw_3871 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pavgw_3871(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pavgw(destination, addressAsInt());
        }
    }

    class m_pavgw_3870 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pavgw_3870(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pavgw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpeqb_3219 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpeqb_3219(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqb(destination, addressAsInt());
        }
    }

    class m_pcmpeqb_3218 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpeqb_3218(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqb(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpeqd_3323 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pcmpeqd_3323(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqd(destination, addressAsInt());
        }
    }

    class m_pcmpeqd_3322 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpeqd_3322(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpeqd_3237 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpeqd_3237(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqd(destination, addressAsInt());
        }
    }

    class m_pcmpeqd_3236 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpeqd_3236(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpeqw_3228 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpeqw_3228(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqw(destination, addressAsInt());
        }
    }

    class m_pcmpeqw_3227 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpeqw_3227(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpeqw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtb_3283 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pcmpgtb_3283(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtb(destination, addressAsInt());
        }
    }

    class m_pcmpgtb_3282 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtb_3282(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtb(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtb_3166 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpgtb_3166(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtb(destination, addressAsInt());
        }
    }

    class m_pcmpgtb_3165 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtb_3165(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtb(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtd_3301 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pcmpgtd_3301(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtd(destination, addressAsInt());
        }
    }

    class m_pcmpgtd_3300 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtd_3300(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtd_3184 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpgtd_3184(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtd(destination, addressAsInt());
        }
    }

    class m_pcmpgtd_3183 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtd_3183(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtw_3292 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pcmpgtw_3292(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtw(destination, addressAsInt());
        }
    }

    class m_pcmpgtw_3291 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtw_3291(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pcmpgtw_3175 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pcmpgtw_3175(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtw(destination, addressAsInt());
        }
    }

    class m_pcmpgtw_3174 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pcmpgtw_3174(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pcmpgtw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pinsrw_3678 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final byte imm8;
        m_pinsrw_3678(int startPosition, int endPosition, IA32XMMRegister destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pinsrw(destination, addressAsInt(), imm8);
        }
    }

    class m_pinsrw_3677 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_pinsrw_3677(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pinsrw(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_pinsrw_3642 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final byte imm8;
        m_pinsrw_3642(int startPosition, int endPosition, MMXRegister destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pinsrw(destination, addressAsInt(), imm8);
        }
    }

    class m_pinsrw_3641 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_pinsrw_3641(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pinsrw(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_pmaddwd_4005 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmaddwd_4005(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaddwd(destination, addressAsInt());
        }
    }

    class m_pmaddwd_4004 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmaddwd_4004(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaddwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmaddwd_3960 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pmaddwd_3960(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaddwd(destination, addressAsInt());
        }
    }

    class m_pmaddwd_3959 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmaddwd_3959(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaddwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmaxsw_5396 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmaxsw_5396(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaxsw(destination, addressAsInt());
        }
    }

    class m_pmaxsw_5395 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmaxsw_5395(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaxsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmaxub_5270 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmaxub_5270(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaxub(destination, addressAsInt());
        }
    }

    class m_pmaxub_5269 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmaxub_5269(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmaxub(destination, addressAsInt(), index, scale);
        }
    }

    class m_pminsw_5360 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pminsw_5360(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pminsw(destination, addressAsInt());
        }
    }

    class m_pminsw_5359 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pminsw_5359(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pminsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pminub_5234 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pminub_5234(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pminub(destination, addressAsInt());
        }
    }

    class m_pminub_5233 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pminub_5233(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pminub(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmulhuw_3880 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmulhuw_3880(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhuw(destination, addressAsInt());
        }
    }

    class m_pmulhuw_3879 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmulhuw_3879(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhuw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmulhw_3889 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmulhw_3889(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhw(destination, addressAsInt());
        }
    }

    class m_pmulhw_3888 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmulhw_3888(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmulhw_3835 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pmulhw_3835(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhw(destination, addressAsInt());
        }
    }

    class m_pmulhw_3834 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmulhw_3834(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmulhw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmullw_3796 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmullw_3796(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmullw(destination, addressAsInt());
        }
    }

    class m_pmullw_3795 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmullw_3795(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmullw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmullw_3742 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pmullw_3742(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmullw(destination, addressAsInt());
        }
    }

    class m_pmullw_3741 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmullw_3741(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmullw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pmuludq_3996 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pmuludq_3996(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmuludq(destination, addressAsInt());
        }
    }

    class m_pmuludq_3995 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pmuludq_3995(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pmuludq(destination, addressAsInt(), index, scale);
        }
    }

    class m_pop_1904 extends InstructionWithAddress {
        m_pop_1904(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pop(addressAsInt());
        }
    }

    class m_pop_1903 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pop_1903(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pop(addressAsInt(), index, scale);
        }
    }

    class m_por_5369 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_por_5369(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_por(destination, addressAsInt());
        }
    }

    class m_por_5368 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_por_5368(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_por(destination, addressAsInt(), index, scale);
        }
    }

    class m_por_5306 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_por_5306(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_por(destination, addressAsInt());
        }
    }

    class m_por_5305 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_por_5305(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_por(destination, addressAsInt(), index, scale);
        }
    }

    class m_psadbw_4014 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psadbw_4014(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psadbw(destination, addressAsInt());
        }
    }

    class m_psadbw_4013 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psadbw_4013(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psadbw(destination, addressAsInt(), index, scale);
        }
    }

    class m_pshufw_3202 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final byte imm8;
        m_pshufw_3202(int startPosition, int endPosition, MMXRegister destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pshufw(destination, addressAsInt(), imm8);
        }
    }

    class m_pshufw_3201 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_pshufw_3201(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pshufw(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_pslld_3978 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pslld_3978(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pslld(destination, addressAsInt());
        }
    }

    class m_pslld_3977 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pslld_3977(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pslld(destination, addressAsInt(), index, scale);
        }
    }

    class m_pslld_3942 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pslld_3942(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pslld(destination, addressAsInt());
        }
    }

    class m_pslld_3941 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pslld_3941(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pslld(destination, addressAsInt(), index, scale);
        }
    }

    class m_psllq_3987 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psllq_3987(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllq(destination, addressAsInt());
        }
    }

    class m_psllq_3986 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psllq_3986(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllq(destination, addressAsInt(), index, scale);
        }
    }

    class m_psllq_3951 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psllq_3951(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllq(destination, addressAsInt());
        }
    }

    class m_psllq_3950 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psllq_3950(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllq(destination, addressAsInt(), index, scale);
        }
    }

    class m_psllw_3969 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psllw_3969(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllw(destination, addressAsInt());
        }
    }

    class m_psllw_3968 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psllw_3968(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psllw_3933 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psllw_3933(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllw(destination, addressAsInt());
        }
    }

    class m_psllw_3932 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psllw_3932(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psllw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrad_3862 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psrad_3862(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrad(destination, addressAsInt());
        }
    }

    class m_psrad_3861 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrad_3861(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrad(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrad_3826 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psrad_3826(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrad(destination, addressAsInt());
        }
    }

    class m_psrad_3825 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrad_3825(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrad(destination, addressAsInt(), index, scale);
        }
    }

    class m_psraw_3853 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psraw_3853(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psraw(destination, addressAsInt());
        }
    }

    class m_psraw_3852 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psraw_3852(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psraw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psraw_3817 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psraw_3817(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psraw(destination, addressAsInt());
        }
    }

    class m_psraw_3816 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psraw_3816(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psraw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrld_3769 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psrld_3769(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrld(destination, addressAsInt());
        }
    }

    class m_psrld_3768 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrld_3768(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrld(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrld_3724 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psrld_3724(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrld(destination, addressAsInt());
        }
    }

    class m_psrld_3723 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrld_3723(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrld(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrlq_3778 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psrlq_3778(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlq(destination, addressAsInt());
        }
    }

    class m_psrlq_3777 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrlq_3777(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlq(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrlq_3733 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psrlq_3733(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlq(destination, addressAsInt());
        }
    }

    class m_psrlq_3732 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrlq_3732(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlq(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrlw_3760 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psrlw_3760(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlw(destination, addressAsInt());
        }
    }

    class m_psrlw_3759 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrlw_3759(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psrlw_3715 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psrlw_3715(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlw(destination, addressAsInt());
        }
    }

    class m_psrlw_3714 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psrlw_3714(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psrlw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubb_5468 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubb_5468(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubb(destination, addressAsInt());
        }
    }

    class m_psubb_5467 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubb_5467(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubb_5414 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubb_5414(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubb(destination, addressAsInt());
        }
    }

    class m_psubb_5413 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubb_5413(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubd_5486 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubd_5486(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubd(destination, addressAsInt());
        }
    }

    class m_psubd_5485 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubd_5485(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubd(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubd_5432 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubd_5432(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubd(destination, addressAsInt());
        }
    }

    class m_psubd_5431 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubd_5431(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubd(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubq_5495 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubq_5495(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubq(destination, addressAsInt());
        }
    }

    class m_psubq_5494 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubq_5494(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubq(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubsb_5342 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubsb_5342(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsb(destination, addressAsInt());
        }
    }

    class m_psubsb_5341 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubsb_5341(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubsb_5288 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubsb_5288(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsb(destination, addressAsInt());
        }
    }

    class m_psubsb_5287 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubsb_5287(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubsw_5351 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubsw_5351(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsw(destination, addressAsInt());
        }
    }

    class m_psubsw_5350 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubsw_5350(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubsw_5297 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubsw_5297(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsw(destination, addressAsInt());
        }
    }

    class m_psubsw_5296 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubsw_5296(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubsw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubusb_5216 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubusb_5216(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusb(destination, addressAsInt());
        }
    }

    class m_psubusb_5215 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubusb_5215(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubusb_5162 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubusb_5162(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusb(destination, addressAsInt());
        }
    }

    class m_psubusb_5161 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubusb_5161(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusb(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubusw_5225 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubusw_5225(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusw(destination, addressAsInt());
        }
    }

    class m_psubusw_5224 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubusw_5224(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubusw_5171 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubusw_5171(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusw(destination, addressAsInt());
        }
    }

    class m_psubusw_5170 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubusw_5170(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubusw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubw_5477 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_psubw_5477(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubw(destination, addressAsInt());
        }
    }

    class m_psubw_5476 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubw_5476(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubw(destination, addressAsInt(), index, scale);
        }
    }

    class m_psubw_5423 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_psubw_5423(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubw(destination, addressAsInt());
        }
    }

    class m_psubw_5422 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_psubw_5422(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_psubw(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhbw_4706 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpckhbw_4706(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhbw(destination, addressAsInt());
        }
    }

    class m_punpckhbw_4705 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhbw_4705(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhbw(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhbw_4652 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpckhbw_4652(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhbw(destination, addressAsInt());
        }
    }

    class m_punpckhbw_4651 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhbw_4651(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhbw(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhdq_4724 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpckhdq_4724(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhdq(destination, addressAsInt());
        }
    }

    class m_punpckhdq_4723 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhdq_4723(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhdq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhdq_4670 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpckhdq_4670(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhdq(destination, addressAsInt());
        }
    }

    class m_punpckhdq_4669 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhdq_4669(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhdq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhqdq_4751 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpckhqdq_4751(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhqdq(destination, addressAsInt());
        }
    }

    class m_punpckhqdq_4750 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhqdq_4750(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhqdq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhwd_4715 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpckhwd_4715(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhwd(destination, addressAsInt());
        }
    }

    class m_punpckhwd_4714 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhwd_4714(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckhwd_4661 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpckhwd_4661(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhwd(destination, addressAsInt());
        }
    }

    class m_punpckhwd_4660 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckhwd_4660(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckhwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpcklbw_3247 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpcklbw_3247(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklbw(destination, addressAsInt());
        }
    }

    class m_punpcklbw_3246 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpcklbw_3246(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklbw(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpcklbw_3130 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpcklbw_3130(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklbw(destination, addressAsInt());
        }
    }

    class m_punpcklbw_3129 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpcklbw_3129(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklbw(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckldq_3265 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpckldq_3265(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckldq(destination, addressAsInt());
        }
    }

    class m_punpckldq_3264 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckldq_3264(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckldq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpckldq_3148 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpckldq_3148(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckldq(destination, addressAsInt());
        }
    }

    class m_punpckldq_3147 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpckldq_3147(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpckldq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpcklqdq_4742 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpcklqdq_4742(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklqdq(destination, addressAsInt());
        }
    }

    class m_punpcklqdq_4741 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpcklqdq_4741(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklqdq(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpcklwd_3256 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_punpcklwd_3256(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklwd(destination, addressAsInt());
        }
    }

    class m_punpcklwd_3255 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpcklwd_3255(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_punpcklwd_3139 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_punpcklwd_3139(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklwd(destination, addressAsInt());
        }
    }

    class m_punpcklwd_3138 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_punpcklwd_3138(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_punpcklwd(destination, addressAsInt(), index, scale);
        }
    }

    class m_push_2451 extends InstructionWithAddress {
        m_push_2451(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_push(addressAsInt());
        }
    }

    class m_push_2450 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_push_2450(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_push(addressAsInt(), index, scale);
        }
    }

    class m_pxor_5405 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_pxor_5405(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pxor(destination, addressAsInt());
        }
    }

    class m_pxor_5404 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pxor_5404(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pxor(destination, addressAsInt(), index, scale);
        }
    }

    class m_pxor_5333 extends InstructionWithAddress {
        private final MMXRegister destination;
        m_pxor_5333(int startPosition, int endPosition, MMXRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pxor(destination, addressAsInt());
        }
    }

    class m_pxor_5332 extends InstructionWithAddress {
        private final MMXRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_pxor_5332(int startPosition, int endPosition, MMXRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_pxor(destination, addressAsInt(), index, scale);
        }
    }

    class m_rclb___1_961 extends InstructionWithAddress {
        m_rclb___1_961(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb___1(addressAsInt());
        }
    }

    class m_rcll___1_1024 extends InstructionWithAddress {
        m_rcll___1_1024(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll___1(addressAsInt());
        }
    }

    class m_rclw___1_1087 extends InstructionWithAddress {
        m_rclw___1_1087(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw___1(addressAsInt());
        }
    }

    class m_rclb___CL_1150 extends InstructionWithAddress {
        m_rclb___CL_1150(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb___CL(addressAsInt());
        }
    }

    class m_rcll___CL_1213 extends InstructionWithAddress {
        m_rcll___CL_1213(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll___CL(addressAsInt());
        }
    }

    class m_rclw___CL_1276 extends InstructionWithAddress {
        m_rclw___CL_1276(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw___CL(addressAsInt());
        }
    }

    class m_rclb_711 extends InstructionWithAddress {
        private final byte imm8;
        m_rclb_711(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb(addressAsInt(), imm8);
        }
    }

    class m_rcll_774 extends InstructionWithAddress {
        private final byte imm8;
        m_rcll_774(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll(addressAsInt(), imm8);
        }
    }

    class m_rclw_837 extends InstructionWithAddress {
        private final byte imm8;
        m_rclw_837(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw(addressAsInt(), imm8);
        }
    }

    class m_rclb___1_960 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rclb___1_960(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb___1(addressAsInt(), index, scale);
        }
    }

    class m_rcll___1_1023 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcll___1_1023(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll___1(addressAsInt(), index, scale);
        }
    }

    class m_rclw___1_1086 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rclw___1_1086(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw___1(addressAsInt(), index, scale);
        }
    }

    class m_rclb___CL_1149 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rclb___CL_1149(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb___CL(addressAsInt(), index, scale);
        }
    }

    class m_rcll___CL_1212 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcll___CL_1212(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll___CL(addressAsInt(), index, scale);
        }
    }

    class m_rclw___CL_1275 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rclw___CL_1275(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw___CL(addressAsInt(), index, scale);
        }
    }

    class m_rclb_710 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rclb_710(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rcll_773 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rcll_773(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcll(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rclw_836 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rclw_836(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rclw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rcpps_3003 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_rcpps_3003(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcpps(destination, addressAsInt());
        }
    }

    class m_rcpps_3002 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcpps_3002(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcpps(destination, addressAsInt(), index, scale);
        }
    }

    class m_rcpss_3121 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_rcpss_3121(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcpss(destination, addressAsInt());
        }
    }

    class m_rcpss_3120 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcpss_3120(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcpss(destination, addressAsInt(), index, scale);
        }
    }

    class m_rcrb___1_965 extends InstructionWithAddress {
        m_rcrb___1_965(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb___1(addressAsInt());
        }
    }

    class m_rcrl___1_1028 extends InstructionWithAddress {
        m_rcrl___1_1028(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl___1(addressAsInt());
        }
    }

    class m_rcrw___1_1091 extends InstructionWithAddress {
        m_rcrw___1_1091(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw___1(addressAsInt());
        }
    }

    class m_rcrb___CL_1154 extends InstructionWithAddress {
        m_rcrb___CL_1154(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb___CL(addressAsInt());
        }
    }

    class m_rcrl___CL_1217 extends InstructionWithAddress {
        m_rcrl___CL_1217(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl___CL(addressAsInt());
        }
    }

    class m_rcrw___CL_1280 extends InstructionWithAddress {
        m_rcrw___CL_1280(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw___CL(addressAsInt());
        }
    }

    class m_rcrb_715 extends InstructionWithAddress {
        private final byte imm8;
        m_rcrb_715(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb(addressAsInt(), imm8);
        }
    }

    class m_rcrl_778 extends InstructionWithAddress {
        private final byte imm8;
        m_rcrl_778(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl(addressAsInt(), imm8);
        }
    }

    class m_rcrw_841 extends InstructionWithAddress {
        private final byte imm8;
        m_rcrw_841(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw(addressAsInt(), imm8);
        }
    }

    class m_rcrb___1_964 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrb___1_964(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb___1(addressAsInt(), index, scale);
        }
    }

    class m_rcrl___1_1027 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrl___1_1027(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl___1(addressAsInt(), index, scale);
        }
    }

    class m_rcrw___1_1090 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrw___1_1090(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw___1(addressAsInt(), index, scale);
        }
    }

    class m_rcrb___CL_1153 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrb___CL_1153(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb___CL(addressAsInt(), index, scale);
        }
    }

    class m_rcrl___CL_1216 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrl___CL_1216(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl___CL(addressAsInt(), index, scale);
        }
    }

    class m_rcrw___CL_1279 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rcrw___CL_1279(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw___CL(addressAsInt(), index, scale);
        }
    }

    class m_rcrb_714 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rcrb_714(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rcrl_777 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rcrl_777(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rcrw_840 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rcrw_840(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rcrw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rolb___1_953 extends InstructionWithAddress {
        m_rolb___1_953(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb___1(addressAsInt());
        }
    }

    class m_roll___1_1016 extends InstructionWithAddress {
        m_roll___1_1016(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll___1(addressAsInt());
        }
    }

    class m_rolw___1_1079 extends InstructionWithAddress {
        m_rolw___1_1079(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw___1(addressAsInt());
        }
    }

    class m_rolb___CL_1142 extends InstructionWithAddress {
        m_rolb___CL_1142(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb___CL(addressAsInt());
        }
    }

    class m_roll___CL_1205 extends InstructionWithAddress {
        m_roll___CL_1205(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll___CL(addressAsInt());
        }
    }

    class m_rolw___CL_1268 extends InstructionWithAddress {
        m_rolw___CL_1268(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw___CL(addressAsInt());
        }
    }

    class m_rolb_703 extends InstructionWithAddress {
        private final byte imm8;
        m_rolb_703(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb(addressAsInt(), imm8);
        }
    }

    class m_roll_766 extends InstructionWithAddress {
        private final byte imm8;
        m_roll_766(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll(addressAsInt(), imm8);
        }
    }

    class m_rolw_829 extends InstructionWithAddress {
        private final byte imm8;
        m_rolw_829(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw(addressAsInt(), imm8);
        }
    }

    class m_rolb___1_952 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rolb___1_952(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb___1(addressAsInt(), index, scale);
        }
    }

    class m_roll___1_1015 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_roll___1_1015(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll___1(addressAsInt(), index, scale);
        }
    }

    class m_rolw___1_1078 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rolw___1_1078(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw___1(addressAsInt(), index, scale);
        }
    }

    class m_rolb___CL_1141 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rolb___CL_1141(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb___CL(addressAsInt(), index, scale);
        }
    }

    class m_roll___CL_1204 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_roll___CL_1204(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll___CL(addressAsInt(), index, scale);
        }
    }

    class m_rolw___CL_1267 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rolw___CL_1267(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw___CL(addressAsInt(), index, scale);
        }
    }

    class m_rolb_702 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rolb_702(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_roll_765 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_roll_765(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_roll(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rolw_828 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rolw_828(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rolw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rorb___1_957 extends InstructionWithAddress {
        m_rorb___1_957(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb___1(addressAsInt());
        }
    }

    class m_rorl___1_1020 extends InstructionWithAddress {
        m_rorl___1_1020(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl___1(addressAsInt());
        }
    }

    class m_rorw___1_1083 extends InstructionWithAddress {
        m_rorw___1_1083(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw___1(addressAsInt());
        }
    }

    class m_rorb___CL_1146 extends InstructionWithAddress {
        m_rorb___CL_1146(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb___CL(addressAsInt());
        }
    }

    class m_rorl___CL_1209 extends InstructionWithAddress {
        m_rorl___CL_1209(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl___CL(addressAsInt());
        }
    }

    class m_rorw___CL_1272 extends InstructionWithAddress {
        m_rorw___CL_1272(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw___CL(addressAsInt());
        }
    }

    class m_rorb_707 extends InstructionWithAddress {
        private final byte imm8;
        m_rorb_707(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb(addressAsInt(), imm8);
        }
    }

    class m_rorl_770 extends InstructionWithAddress {
        private final byte imm8;
        m_rorl_770(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl(addressAsInt(), imm8);
        }
    }

    class m_rorw_833 extends InstructionWithAddress {
        private final byte imm8;
        m_rorw_833(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw(addressAsInt(), imm8);
        }
    }

    class m_rorb___1_956 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorb___1_956(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb___1(addressAsInt(), index, scale);
        }
    }

    class m_rorl___1_1019 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorl___1_1019(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl___1(addressAsInt(), index, scale);
        }
    }

    class m_rorw___1_1082 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorw___1_1082(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw___1(addressAsInt(), index, scale);
        }
    }

    class m_rorb___CL_1145 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorb___CL_1145(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb___CL(addressAsInt(), index, scale);
        }
    }

    class m_rorl___CL_1208 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorl___CL_1208(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl___CL(addressAsInt(), index, scale);
        }
    }

    class m_rorw___CL_1271 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rorw___CL_1271(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw___CL(addressAsInt(), index, scale);
        }
    }

    class m_rorb_706 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rorb_706(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rorl_769 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rorl_769(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rorw_832 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_rorw_832(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rorw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_rsqrtps_2994 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_rsqrtps_2994(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rsqrtps(destination, addressAsInt());
        }
    }

    class m_rsqrtps_2993 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rsqrtps_2993(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rsqrtps(destination, addressAsInt(), index, scale);
        }
    }

    class m_rsqrtss_3112 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_rsqrtss_3112(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rsqrtss(destination, addressAsInt());
        }
    }

    class m_rsqrtss_3111 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_rsqrtss_3111(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_rsqrtss(destination, addressAsInt(), index, scale);
        }
    }

    class m_sarb___1_977 extends InstructionWithAddress {
        m_sarb___1_977(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb___1(addressAsInt());
        }
    }

    class m_sarl___1_1040 extends InstructionWithAddress {
        m_sarl___1_1040(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl___1(addressAsInt());
        }
    }

    class m_sarw___1_1103 extends InstructionWithAddress {
        m_sarw___1_1103(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw___1(addressAsInt());
        }
    }

    class m_sarb___CL_1166 extends InstructionWithAddress {
        m_sarb___CL_1166(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb___CL(addressAsInt());
        }
    }

    class m_sarl___CL_1229 extends InstructionWithAddress {
        m_sarl___CL_1229(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl___CL(addressAsInt());
        }
    }

    class m_sarw___CL_1292 extends InstructionWithAddress {
        m_sarw___CL_1292(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw___CL(addressAsInt());
        }
    }

    class m_sarb_727 extends InstructionWithAddress {
        private final byte imm8;
        m_sarb_727(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb(addressAsInt(), imm8);
        }
    }

    class m_sarl_790 extends InstructionWithAddress {
        private final byte imm8;
        m_sarl_790(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl(addressAsInt(), imm8);
        }
    }

    class m_sarw_853 extends InstructionWithAddress {
        private final byte imm8;
        m_sarw_853(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw(addressAsInt(), imm8);
        }
    }

    class m_sarb___1_976 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarb___1_976(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb___1(addressAsInt(), index, scale);
        }
    }

    class m_sarl___1_1039 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarl___1_1039(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl___1(addressAsInt(), index, scale);
        }
    }

    class m_sarw___1_1102 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarw___1_1102(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw___1(addressAsInt(), index, scale);
        }
    }

    class m_sarb___CL_1165 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarb___CL_1165(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb___CL(addressAsInt(), index, scale);
        }
    }

    class m_sarl___CL_1228 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarl___CL_1228(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl___CL(addressAsInt(), index, scale);
        }
    }

    class m_sarw___CL_1291 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sarw___CL_1291(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw___CL(addressAsInt(), index, scale);
        }
    }

    class m_sarb_726 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sarb_726(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sarl_789 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sarl_789(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sarw_852 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sarw_852(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sarw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sbb_1637 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_sbb_1637(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt());
        }
    }

    class m_sbb_1636 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sbb_1636(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt(), index, scale);
        }
    }

    class m_sbb_1629 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_sbb_1629(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt());
        }
    }

    class m_sbb_1628 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sbb_1628(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt(), index, scale);
        }
    }

    class m_sbb_1621 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_sbb_1621(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt());
        }
    }

    class m_sbb_1620 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sbb_1620(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(destination, addressAsInt(), index, scale);
        }
    }

    class m_sbbb_285 extends InstructionWithAddress {
        private final byte imm8;
        m_sbbb_285(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbb(addressAsInt(), imm8);
        }
    }

    class m_sbbl_501 extends InstructionWithAddress {
        private final byte imm8;
        m_sbbl_501(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbl(addressAsInt(), imm8);
        }
    }

    class m_sbbw_573 extends InstructionWithAddress {
        private final byte imm8;
        m_sbbw_573(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbw(addressAsInt(), imm8);
        }
    }

    class m_sbb_1612 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_sbb_1612(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), source);
        }
    }

    class m_sbb_1603 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_sbb_1603(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), source);
        }
    }

    class m_sbb_1594 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_sbb_1594(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), source);
        }
    }

    class m_sbbb_284 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sbbb_284(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sbbl_500 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sbbl_500(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sbbw_572 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_sbbw_572(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sbb_1611 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_sbb_1611(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), index, scale, source);
        }
    }

    class m_sbb_1602 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_sbb_1602(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), index, scale, source);
        }
    }

    class m_sbb_1593 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_sbb_1593(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbb(addressAsInt(), index, scale, source);
        }
    }

    class m_sbbl_356 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_sbbl_356(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_sbbw_428 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_sbbw_428(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_sbbl_357 extends InstructionWithAddress {
        private final int imm32;
        m_sbbl_357(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbl(addressAsInt(), imm32);
        }
    }

    class m_sbbw_429 extends InstructionWithAddress {
        private final short imm16;
        m_sbbw_429(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sbbw(addressAsInt(), imm16);
        }
    }

    class m_setb_3358 extends InstructionWithAddress {
        m_setb_3358(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setb(addressAsInt());
        }
    }

    class m_setb_3357 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setb_3357(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setb(addressAsInt(), index, scale);
        }
    }

    class m_setbe_3394 extends InstructionWithAddress {
        m_setbe_3394(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setbe(addressAsInt());
        }
    }

    class m_setbe_3393 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setbe_3393(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setbe(addressAsInt(), index, scale);
        }
    }

    class m_setl_4917 extends InstructionWithAddress {
        m_setl_4917(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setl(addressAsInt());
        }
    }

    class m_setl_4916 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setl_4916(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setl(addressAsInt(), index, scale);
        }
    }

    class m_setle_4935 extends InstructionWithAddress {
        m_setle_4935(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setle(addressAsInt());
        }
    }

    class m_setle_4934 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setle_4934(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setle(addressAsInt(), index, scale);
        }
    }

    class m_setnb_3367 extends InstructionWithAddress {
        m_setnb_3367(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnb(addressAsInt());
        }
    }

    class m_setnb_3366 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnb_3366(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnb(addressAsInt(), index, scale);
        }
    }

    class m_setnbe_3403 extends InstructionWithAddress {
        m_setnbe_3403(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnbe(addressAsInt());
        }
    }

    class m_setnbe_3402 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnbe_3402(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnbe(addressAsInt(), index, scale);
        }
    }

    class m_setnl_4926 extends InstructionWithAddress {
        m_setnl_4926(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnl(addressAsInt());
        }
    }

    class m_setnl_4925 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnl_4925(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnl(addressAsInt(), index, scale);
        }
    }

    class m_setnle_4944 extends InstructionWithAddress {
        m_setnle_4944(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnle(addressAsInt());
        }
    }

    class m_setnle_4943 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnle_4943(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnle(addressAsInt(), index, scale);
        }
    }

    class m_setno_3349 extends InstructionWithAddress {
        m_setno_3349(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setno(addressAsInt());
        }
    }

    class m_setno_3348 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setno_3348(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setno(addressAsInt(), index, scale);
        }
    }

    class m_setnp_4908 extends InstructionWithAddress {
        m_setnp_4908(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnp(addressAsInt());
        }
    }

    class m_setnp_4907 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnp_4907(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnp(addressAsInt(), index, scale);
        }
    }

    class m_setns_4890 extends InstructionWithAddress {
        m_setns_4890(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setns(addressAsInt());
        }
    }

    class m_setns_4889 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setns_4889(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setns(addressAsInt(), index, scale);
        }
    }

    class m_setnz_3385 extends InstructionWithAddress {
        m_setnz_3385(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnz(addressAsInt());
        }
    }

    class m_setnz_3384 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setnz_3384(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setnz(addressAsInt(), index, scale);
        }
    }

    class m_seto_3340 extends InstructionWithAddress {
        m_seto_3340(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_seto(addressAsInt());
        }
    }

    class m_seto_3339 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_seto_3339(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_seto(addressAsInt(), index, scale);
        }
    }

    class m_setp_4899 extends InstructionWithAddress {
        m_setp_4899(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setp(addressAsInt());
        }
    }

    class m_setp_4898 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setp_4898(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setp(addressAsInt(), index, scale);
        }
    }

    class m_sets_4881 extends InstructionWithAddress {
        m_sets_4881(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sets(addressAsInt());
        }
    }

    class m_sets_4880 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sets_4880(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sets(addressAsInt(), index, scale);
        }
    }

    class m_setz_3376 extends InstructionWithAddress {
        m_setz_3376(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setz(addressAsInt());
        }
    }

    class m_setz_3375 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_setz_3375(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_setz(addressAsInt(), index, scale);
        }
    }

    class m_sgdt_2555 extends InstructionWithAddress {
        m_sgdt_2555(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sgdt(addressAsInt());
        }
    }

    class m_sgdt_2554 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sgdt_2554(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sgdt(addressAsInt(), index, scale);
        }
    }

    class m_shlb___1_969 extends InstructionWithAddress {
        m_shlb___1_969(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb___1(addressAsInt());
        }
    }

    class m_shll___1_1032 extends InstructionWithAddress {
        m_shll___1_1032(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll___1(addressAsInt());
        }
    }

    class m_shlw___1_1095 extends InstructionWithAddress {
        m_shlw___1_1095(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw___1(addressAsInt());
        }
    }

    class m_shlb___CL_1158 extends InstructionWithAddress {
        m_shlb___CL_1158(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb___CL(addressAsInt());
        }
    }

    class m_shll___CL_1221 extends InstructionWithAddress {
        m_shll___CL_1221(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll___CL(addressAsInt());
        }
    }

    class m_shlw___CL_1284 extends InstructionWithAddress {
        m_shlw___CL_1284(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw___CL(addressAsInt());
        }
    }

    class m_shlb_719 extends InstructionWithAddress {
        private final byte imm8;
        m_shlb_719(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb(addressAsInt(), imm8);
        }
    }

    class m_shll_782 extends InstructionWithAddress {
        private final byte imm8;
        m_shll_782(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll(addressAsInt(), imm8);
        }
    }

    class m_shlw_845 extends InstructionWithAddress {
        private final byte imm8;
        m_shlw_845(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw(addressAsInt(), imm8);
        }
    }

    class m_shlb___1_968 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shlb___1_968(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb___1(addressAsInt(), index, scale);
        }
    }

    class m_shll___1_1031 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shll___1_1031(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll___1(addressAsInt(), index, scale);
        }
    }

    class m_shlw___1_1094 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shlw___1_1094(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw___1(addressAsInt(), index, scale);
        }
    }

    class m_shlb___CL_1157 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shlb___CL_1157(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb___CL(addressAsInt(), index, scale);
        }
    }

    class m_shll___CL_1220 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shll___CL_1220(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll___CL(addressAsInt(), index, scale);
        }
    }

    class m_shlw___CL_1283 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shlw___CL_1283(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw___CL(addressAsInt(), index, scale);
        }
    }

    class m_shlb_718 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shlb_718(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shll_781 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shll_781(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shll(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shlw_844 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shlw_844(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shlw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shld_CL_3460 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_shld_CL_3460(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld_CL(addressAsInt(), source);
        }
    }

    class m_shld_3442 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        private final byte imm8;
        m_shld_3442(int startPosition, int endPosition, IA32GeneralRegister16 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld(addressAsInt(), source, imm8);
        }
    }

    class m_shld_CL_3451 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_shld_CL_3451(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld_CL(addressAsInt(), source);
        }
    }

    class m_shld_3433 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        private final byte imm8;
        m_shld_3433(int startPosition, int endPosition, IA32GeneralRegister32 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld(addressAsInt(), source, imm8);
        }
    }

    class m_shld_CL_3459 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_shld_CL_3459(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld_CL(addressAsInt(), index, scale, source);
        }
    }

    class m_shld_3441 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        private final byte imm8;
        m_shld_3441(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld(addressAsInt(), index, scale, source, imm8);
        }
    }

    class m_shld_CL_3450 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_shld_CL_3450(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld_CL(addressAsInt(), index, scale, source);
        }
    }

    class m_shld_3432 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        private final byte imm8;
        m_shld_3432(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shld(addressAsInt(), index, scale, source, imm8);
        }
    }

    class m_shrb___1_973 extends InstructionWithAddress {
        m_shrb___1_973(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb___1(addressAsInt());
        }
    }

    class m_shrl___1_1036 extends InstructionWithAddress {
        m_shrl___1_1036(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl___1(addressAsInt());
        }
    }

    class m_shrw___1_1099 extends InstructionWithAddress {
        m_shrw___1_1099(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw___1(addressAsInt());
        }
    }

    class m_shrb___CL_1162 extends InstructionWithAddress {
        m_shrb___CL_1162(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb___CL(addressAsInt());
        }
    }

    class m_shrl___CL_1225 extends InstructionWithAddress {
        m_shrl___CL_1225(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl___CL(addressAsInt());
        }
    }

    class m_shrw___CL_1288 extends InstructionWithAddress {
        m_shrw___CL_1288(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw___CL(addressAsInt());
        }
    }

    class m_shrb_723 extends InstructionWithAddress {
        private final byte imm8;
        m_shrb_723(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb(addressAsInt(), imm8);
        }
    }

    class m_shrl_786 extends InstructionWithAddress {
        private final byte imm8;
        m_shrl_786(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl(addressAsInt(), imm8);
        }
    }

    class m_shrw_849 extends InstructionWithAddress {
        private final byte imm8;
        m_shrw_849(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw(addressAsInt(), imm8);
        }
    }

    class m_shrb___1_972 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrb___1_972(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb___1(addressAsInt(), index, scale);
        }
    }

    class m_shrl___1_1035 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrl___1_1035(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl___1(addressAsInt(), index, scale);
        }
    }

    class m_shrw___1_1098 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrw___1_1098(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw___1(addressAsInt(), index, scale);
        }
    }

    class m_shrb___CL_1161 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrb___CL_1161(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb___CL(addressAsInt(), index, scale);
        }
    }

    class m_shrl___CL_1224 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrl___CL_1224(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl___CL(addressAsInt(), index, scale);
        }
    }

    class m_shrw___CL_1287 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_shrw___CL_1287(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw___CL(addressAsInt(), index, scale);
        }
    }

    class m_shrb_722 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shrb_722(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shrl_785 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shrl_785(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shrw_848 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shrw_848(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_shrd_CL_5001 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_shrd_CL_5001(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd_CL(addressAsInt(), source);
        }
    }

    class m_shrd_4983 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        private final byte imm8;
        m_shrd_4983(int startPosition, int endPosition, IA32GeneralRegister16 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd(addressAsInt(), source, imm8);
        }
    }

    class m_shrd_CL_4992 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_shrd_CL_4992(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd_CL(addressAsInt(), source);
        }
    }

    class m_shrd_4974 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        private final byte imm8;
        m_shrd_4974(int startPosition, int endPosition, IA32GeneralRegister32 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd(addressAsInt(), source, imm8);
        }
    }

    class m_shrd_CL_5000 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_shrd_CL_5000(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd_CL(addressAsInt(), index, scale, source);
        }
    }

    class m_shrd_4982 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        private final byte imm8;
        m_shrd_4982(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd(addressAsInt(), index, scale, source, imm8);
        }
    }

    class m_shrd_CL_4991 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_shrd_CL_4991(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd_CL(addressAsInt(), index, scale, source);
        }
    }

    class m_shrd_4973 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        private final byte imm8;
        m_shrd_4973(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shrd(addressAsInt(), index, scale, source, imm8);
        }
    }

    class m_shufpd_3688 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final byte imm8;
        m_shufpd_3688(int startPosition, int endPosition, IA32XMMRegister destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shufpd(destination, addressAsInt(), imm8);
        }
    }

    class m_shufpd_3687 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shufpd_3687(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shufpd(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_shufps_3652 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final byte imm8;
        m_shufps_3652(int startPosition, int endPosition, IA32XMMRegister destination, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shufps(destination, addressAsInt(), imm8);
        }
    }

    class m_shufps_3651 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_shufps_3651(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_shufps(destination, addressAsInt(), index, scale, imm8);
        }
    }

    class m_sidt_2559 extends InstructionWithAddress {
        m_sidt_2559(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sidt(addressAsInt());
        }
    }

    class m_sidt_2558 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sidt_2558(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sidt(addressAsInt(), index, scale);
        }
    }

    class m_sldt_2499 extends InstructionWithAddress {
        m_sldt_2499(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sldt(addressAsInt());
        }
    }

    class m_sldt_2498 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sldt_2498(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sldt(addressAsInt(), index, scale);
        }
    }

    class m_smsw_2571 extends InstructionWithAddress {
        m_smsw_2571(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_smsw(addressAsInt());
        }
    }

    class m_smsw_2570 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_smsw_2570(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_smsw(addressAsInt(), index, scale);
        }
    }

    class m_sqrtpd_3049 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_sqrtpd_3049(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtpd(destination, addressAsInt());
        }
    }

    class m_sqrtpd_3048 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sqrtpd_3048(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_sqrtps_2985 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_sqrtps_2985(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtps(destination, addressAsInt());
        }
    }

    class m_sqrtps_2984 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sqrtps_2984(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtps(destination, addressAsInt(), index, scale);
        }
    }

    class m_sqrtsd_3094 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_sqrtsd_3094(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtsd(destination, addressAsInt());
        }
    }

    class m_sqrtsd_3093 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sqrtsd_3093(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_sqrtss_3103 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_sqrtss_3103(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtss(destination, addressAsInt());
        }
    }

    class m_sqrtss_3102 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sqrtss_3102(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sqrtss(destination, addressAsInt(), index, scale);
        }
    }

    class m_str_2503 extends InstructionWithAddress {
        m_str_2503(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_str(addressAsInt());
        }
    }

    class m_str_2502 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_str_2502(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_str(addressAsInt(), index, scale);
        }
    }

    class m_sub_1693 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_sub_1693(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt());
        }
    }

    class m_sub_1692 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sub_1692(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt(), index, scale);
        }
    }

    class m_sub_1685 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_sub_1685(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt());
        }
    }

    class m_sub_1684 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sub_1684(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt(), index, scale);
        }
    }

    class m_sub_1677 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_sub_1677(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt());
        }
    }

    class m_sub_1676 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_sub_1676(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(destination, addressAsInt(), index, scale);
        }
    }

    class m_subb_293 extends InstructionWithAddress {
        private final byte imm8;
        m_subb_293(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subb(addressAsInt(), imm8);
        }
    }

    class m_subl_509 extends InstructionWithAddress {
        private final byte imm8;
        m_subl_509(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subl(addressAsInt(), imm8);
        }
    }

    class m_subw_581 extends InstructionWithAddress {
        private final byte imm8;
        m_subw_581(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subw(addressAsInt(), imm8);
        }
    }

    class m_sub_1668 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_sub_1668(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), source);
        }
    }

    class m_sub_1659 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_sub_1659(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), source);
        }
    }

    class m_sub_1650 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_sub_1650(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), source);
        }
    }

    class m_subb_292 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_subb_292(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_subl_508 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_subl_508(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_subw_580 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_subw_580(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_sub_1667 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_sub_1667(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), index, scale, source);
        }
    }

    class m_sub_1658 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_sub_1658(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), index, scale, source);
        }
    }

    class m_sub_1649 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_sub_1649(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_sub(addressAsInt(), index, scale, source);
        }
    }

    class m_subl_364 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_subl_364(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_subw_436 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_subw_436(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_subl_365 extends InstructionWithAddress {
        private final int imm32;
        m_subl_365(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subl(addressAsInt(), imm32);
        }
    }

    class m_subw_437 extends InstructionWithAddress {
        private final short imm16;
        m_subw_437(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subw(addressAsInt(), imm16);
        }
    }

    class m_subpd_4481 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_subpd_4481(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subpd(destination, addressAsInt());
        }
    }

    class m_subpd_4480 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_subpd_4480(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_subps_4409 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_subps_4409(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subps(destination, addressAsInt());
        }
    }

    class m_subps_4408 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_subps_4408(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subps(destination, addressAsInt(), index, scale);
        }
    }

    class m_subsd_4544 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_subsd_4544(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subsd(destination, addressAsInt());
        }
    }

    class m_subsd_4543 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_subsd_4543(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subsd(destination, addressAsInt(), index, scale);
        }
    }

    class m_subss_4616 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_subss_4616(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subss(destination, addressAsInt());
        }
    }

    class m_subss_4615 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_subss_4615(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_subss(destination, addressAsInt(), index, scale);
        }
    }

    class m_testb_1350 extends InstructionWithAddress {
        private final byte imm8;
        m_testb_1350(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testb(addressAsInt(), imm8);
        }
    }

    class m_test_651 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_test_651(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), source);
        }
    }

    class m_test_642 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_test_642(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), source);
        }
    }

    class m_test_633 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_test_633(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), source);
        }
    }

    class m_testb_1349 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_testb_1349(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_test_650 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_test_650(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), index, scale, source);
        }
    }

    class m_test_641 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_test_641(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), index, scale, source);
        }
    }

    class m_test_632 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_test_632(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_test(addressAsInt(), index, scale, source);
        }
    }

    class m_testl_1412 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_testl_1412(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_testw_1475 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_testw_1475(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_testl_1413 extends InstructionWithAddress {
        private final int imm32;
        m_testl_1413(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testl(addressAsInt(), imm32);
        }
    }

    class m_testw_1476 extends InstructionWithAddress {
        private final short imm16;
        m_testw_1476(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_testw(addressAsInt(), imm16);
        }
    }

    class m_ucomisd_4157 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_ucomisd_4157(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ucomisd(destination, addressAsInt());
        }
    }

    class m_ucomisd_4156 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ucomisd_4156(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ucomisd(destination, addressAsInt(), index, scale);
        }
    }

    class m_ucomiss_4087 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_ucomiss_4087(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ucomiss(destination, addressAsInt());
        }
    }

    class m_ucomiss_4086 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_ucomiss_4086(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_ucomiss(destination, addressAsInt(), index, scale);
        }
    }

    class m_unpckhpd_2746 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_unpckhpd_2746(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpckhpd(destination, addressAsInt());
        }
    }

    class m_unpckhpd_2745 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_unpckhpd_2745(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpckhpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_unpckhps_2686 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_unpckhps_2686(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpckhps(destination, addressAsInt());
        }
    }

    class m_unpckhps_2685 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_unpckhps_2685(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpckhps(destination, addressAsInt(), index, scale);
        }
    }

    class m_unpcklpd_2737 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_unpcklpd_2737(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpcklpd(destination, addressAsInt());
        }
    }

    class m_unpcklpd_2736 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_unpcklpd_2736(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpcklpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_unpcklps_2677 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_unpcklps_2677(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpcklps(destination, addressAsInt());
        }
    }

    class m_unpcklps_2676 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_unpcklps_2676(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_unpcklps(destination, addressAsInt(), index, scale);
        }
    }

    class m_verr_2515 extends InstructionWithAddress {
        m_verr_2515(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_verr(addressAsInt());
        }
    }

    class m_verr_2514 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_verr_2514(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_verr(addressAsInt(), index, scale);
        }
    }

    class m_verw_2519 extends InstructionWithAddress {
        m_verw_2519(int startPosition, int endPosition, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_verw(addressAsInt());
        }
    }

    class m_verw_2518 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_verw_2518(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_verw(addressAsInt(), index, scale);
        }
    }

    class m_xadd_3616 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_xadd_3616(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), source);
        }
    }

    class m_xadd_3607 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_xadd_3607(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), source);
        }
    }

    class m_xadd_3598 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_xadd_3598(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), source);
        }
    }

    class m_xadd_3615 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_xadd_3615(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), index, scale, source);
        }
    }

    class m_xadd_3606 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_xadd_3606(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), index, scale, source);
        }
    }

    class m_xadd_3597 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_xadd_3597(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xadd(addressAsInt(), index, scale, source);
        }
    }

    class m_xchg_678 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_xchg_678(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), source);
        }
    }

    class m_xchg_669 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_xchg_669(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), source);
        }
    }

    class m_xchg_660 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_xchg_660(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), source);
        }
    }

    class m_xchg_677 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_xchg_677(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), index, scale, source);
        }
    }

    class m_xchg_668 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_xchg_668(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), index, scale, source);
        }
    }

    class m_xchg_659 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_xchg_659(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xchg(addressAsInt(), index, scale, source);
        }
    }

    class m_xor_215 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        m_xor_215(int startPosition, int endPosition, IA32GeneralRegister16 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt());
        }
    }

    class m_xor_214 extends InstructionWithAddress {
        private final IA32GeneralRegister16 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_xor_214(int startPosition, int endPosition, IA32GeneralRegister16 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt(), index, scale);
        }
    }

    class m_xor_207 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        m_xor_207(int startPosition, int endPosition, IA32GeneralRegister32 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt());
        }
    }

    class m_xor_206 extends InstructionWithAddress {
        private final IA32GeneralRegister32 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_xor_206(int startPosition, int endPosition, IA32GeneralRegister32 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt(), index, scale);
        }
    }

    class m_xor_199 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        m_xor_199(int startPosition, int endPosition, IA32GeneralRegister8 destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt());
        }
    }

    class m_xor_198 extends InstructionWithAddress {
        private final IA32GeneralRegister8 destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_xor_198(int startPosition, int endPosition, IA32GeneralRegister8 destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(destination, addressAsInt(), index, scale);
        }
    }

    class m_xorb_297 extends InstructionWithAddress {
        private final byte imm8;
        m_xorb_297(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorb(addressAsInt(), imm8);
        }
    }

    class m_xorl_513 extends InstructionWithAddress {
        private final byte imm8;
        m_xorl_513(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorl(addressAsInt(), imm8);
        }
    }

    class m_xorw_585 extends InstructionWithAddress {
        private final byte imm8;
        m_xorw_585(int startPosition, int endPosition, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorw(addressAsInt(), imm8);
        }
    }

    class m_xor_190 extends InstructionWithAddress {
        private final IA32GeneralRegister16 source;
        m_xor_190(int startPosition, int endPosition, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), source);
        }
    }

    class m_xor_181 extends InstructionWithAddress {
        private final IA32GeneralRegister32 source;
        m_xor_181(int startPosition, int endPosition, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), source);
        }
    }

    class m_xor_172 extends InstructionWithAddress {
        private final IA32GeneralRegister8 source;
        m_xor_172(int startPosition, int endPosition, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), source);
        }
    }

    class m_xorb_296 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_xorb_296(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorb(addressAsInt(), index, scale, imm8);
        }
    }

    class m_xorl_512 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_xorl_512(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorl(addressAsInt(), index, scale, imm8);
        }
    }

    class m_xorw_584 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final byte imm8;
        m_xorw_584(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, byte imm8, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm8 = imm8;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorw(addressAsInt(), index, scale, imm8);
        }
    }

    class m_xor_189 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister16 source;
        m_xor_189(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister16 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), index, scale, source);
        }
    }

    class m_xor_180 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister32 source;
        m_xor_180(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister32 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), index, scale, source);
        }
    }

    class m_xor_171 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final IA32GeneralRegister8 source;
        m_xor_171(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, IA32GeneralRegister8 source, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.source = source;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xor(addressAsInt(), index, scale, source);
        }
    }

    class m_xorl_368 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final int imm32;
        m_xorl_368(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorl(addressAsInt(), index, scale, imm32);
        }
    }

    class m_xorw_440 extends InstructionWithAddress {
        private final IA32IndexRegister32 index;
        private final Scale scale;
        private final short imm16;
        m_xorw_440(int startPosition, int endPosition, IA32IndexRegister32 index, Scale scale, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.index = index;
            this.scale = scale;
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorw(addressAsInt(), index, scale, imm16);
        }
    }

    class m_xorl_369 extends InstructionWithAddress {
        private final int imm32;
        m_xorl_369(int startPosition, int endPosition, int imm32, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm32 = imm32;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorl(addressAsInt(), imm32);
        }
    }

    class m_xorw_441 extends InstructionWithAddress {
        private final short imm16;
        m_xorw_441(int startPosition, int endPosition, short imm16, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.imm16 = imm16;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorw(addressAsInt(), imm16);
        }
    }

    class m_xorpd_3085 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_xorpd_3085(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorpd(destination, addressAsInt());
        }
    }

    class m_xorpd_3084 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_xorpd_3084(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorpd(destination, addressAsInt(), index, scale);
        }
    }

    class m_xorps_3039 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        m_xorps_3039(int startPosition, int endPosition, IA32XMMRegister destination, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorps(destination, addressAsInt());
        }
    }

    class m_xorps_3038 extends InstructionWithAddress {
        private final IA32XMMRegister destination;
        private final IA32IndexRegister32 index;
        private final Scale scale;
        m_xorps_3038(int startPosition, int endPosition, IA32XMMRegister destination, IA32IndexRegister32 index, Scale scale, Label label) {
            super(IA32LabelAssembler.this, startPosition, currentPosition(), label);
            this.destination = destination;
            this.index = index;
            this.scale = scale;
        }
        @Override
        protected void assemble() throws AssemblyException {
            m_xorps(destination, addressAsInt(), index, scale);
        }
    }

// END GENERATED LABEL ASSEMBLER METHODS
}
